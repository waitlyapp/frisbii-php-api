<?php
/**
 * VippsMobilepayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * VippsMobilepayAgreement Class Doc Comment
 *
 * @category Class
 * @description Vipps Mobilepay agreement details
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VippsMobilepayAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VippsMobilepayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_serial_number' => 'string',
        'currency' => 'string',
        'minimum_user_age' => 'int',
        'vipps_configuration_settings' => 'map[string,object]',
        'blocked_sources' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_serial_number' => null,
        'currency' => null,
        'minimum_user_age' => 'int32',
        'vipps_configuration_settings' => null,
        'blocked_sources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_serial_number' => 'merchantSerialNumber',
        'currency' => 'currency',
        'minimum_user_age' => 'minimumUserAge',
        'vipps_configuration_settings' => 'vippsConfigurationSettings',
        'blocked_sources' => 'blocked_sources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_serial_number' => 'setMerchantSerialNumber',
        'currency' => 'setCurrency',
        'minimum_user_age' => 'setMinimumUserAge',
        'vipps_configuration_settings' => 'setVippsConfigurationSettings',
        'blocked_sources' => 'setBlockedSources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_serial_number' => 'getMerchantSerialNumber',
        'currency' => 'getCurrency',
        'minimum_user_age' => 'getMinimumUserAge',
        'vipps_configuration_settings' => 'getVippsConfigurationSettings',
        'blocked_sources' => 'getBlockedSources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY_NOK = 'NOK';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_EUR = 'EUR';
    const BLOCKED_SOURCES_COMMERCIAL_CARDS = '[commercial_cards]';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NOK,
            self::CURRENCY_DKK,
            self::CURRENCY_EUR,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedSourcesAllowableValues()
    {
        return [
            self::BLOCKED_SOURCES_COMMERCIAL_CARDS
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_serial_number'] = isset($data['merchant_serial_number']) ? $data['merchant_serial_number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['minimum_user_age'] = isset($data['minimum_user_age']) ? $data['minimum_user_age'] : null;
        $this->container['vipps_configuration_settings'] = isset($data['vipps_configuration_settings']) ? $data['vipps_configuration_settings'] : null;
        $this->container['blocked_sources'] = isset($data['blocked_sources']) ? $data['blocked_sources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_serial_number'] === null) {
            $invalidProperties[] = "'merchant_serial_number' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_serial_number
     *
     * @return string
     */
    public function getMerchantSerialNumber()
    {
        return $this->container['merchant_serial_number'];
    }

    /**
     * Sets merchant_serial_number
     *
     * @param string $merchant_serial_number Merchant serial number
     *
     * @return $this
     */
    public function setMerchantSerialNumber($merchant_serial_number)
    {
        $this->container['merchant_serial_number'] = $merchant_serial_number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency to use for the agreement
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets minimum_user_age
     *
     * @return int
     */
    public function getMinimumUserAge()
    {
        return $this->container['minimum_user_age'];
    }

    /**
     * Sets minimum_user_age
     *
     * @param int $minimum_user_age Minimum age that a customer needs to have to successfully complete payments
     *
     * @return $this
     */
    public function setMinimumUserAge($minimum_user_age)
    {
        $this->container['minimum_user_age'] = $minimum_user_age;

        return $this;
    }

    /**
     * Gets vipps_configuration_settings
     *
     * @return map[string,object]
     */
    public function getVippsConfigurationSettings()
    {
        return $this->container['vipps_configuration_settings'];
    }

    /**
     * Sets vipps_configuration_settings
     *
     * @param map[string,object] $vipps_configuration_settings The configuration settings for this merchant agreement in Vipps' system
     *
     * @return $this
     */
    public function setVippsConfigurationSettings($vipps_configuration_settings)
    {
        $this->container['vipps_configuration_settings'] = $vipps_configuration_settings;

        return $this;
    }

    /**
     * Gets blocked_sources
     *
     * @return string[]
     */
    public function getBlockedSources()
    {
        return $this->container['blocked_sources'];
    }

    /**
     * Sets blocked_sources
     *
     * @param string[] $blocked_sources Require Vipps ePayment to use blocked sources, does not work for Norwegian users
     *
     * @return $this
     */
    public function setBlockedSources($blocked_sources)
    {
        $allowedValues = $this->getBlockedSourcesAllowableValues();
        if (!is_null($blocked_sources) && array_diff($blocked_sources, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'blocked_sources', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blocked_sources'] = $blocked_sources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
