<?php
/**
 * CreatePaypalAgreementV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreatePaypalAgreementV2 Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreatePaypalAgreementV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreatePaypalAgreementV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_consent' => 'bool',
        'paypal_checkout_flow' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'data_consent' => null,
        'paypal_checkout_flow' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_consent' => 'data_consent',
        'paypal_checkout_flow' => 'paypal_checkout_flow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_consent' => 'setDataConsent',
        'paypal_checkout_flow' => 'setPaypalCheckoutFlow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_consent' => 'getDataConsent',
        'paypal_checkout_flow' => 'getPaypalCheckoutFlow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYPAL_CHECKOUT_FLOW_SDK = 'sdk';
    const PAYPAL_CHECKOUT_FLOW_ACTION_URL = 'action_url';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaypalCheckoutFlowAllowableValues()
    {
        return [
            self::PAYPAL_CHECKOUT_FLOW_SDK
            self::PAYPAL_CHECKOUT_FLOW_ACTION_URL
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_consent'] = isset($data['data_consent']) ? $data['data_consent'] : null;
        $this->container['paypal_checkout_flow'] = isset($data['paypal_checkout_flow']) ? $data['paypal_checkout_flow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['data_consent'] === null) {
            $invalidProperties[] = "'data_consent' can't be null";
        }
        $allowedValues = $this->getPaypalCheckoutFlowAllowableValues();
        if (!is_null($this->container['paypal_checkout_flow']) && !in_array($this->container['paypal_checkout_flow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paypal_checkout_flow', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_consent
     *
     * @return bool
     */
    public function getDataConsent()
    {
        return $this->container['data_consent'];
    }

    /**
     * Sets data_consent
     *
     * @param bool $data_consent Share data consent flag
     *
     * @return $this
     */
    public function setDataConsent($data_consent)
    {
        $this->container['data_consent'] = $data_consent;

        return $this;
    }

    /**
     * Gets paypal_checkout_flow
     *
     * @return string
     */
    public function getPaypalCheckoutFlow()
    {
        return $this->container['paypal_checkout_flow'];
    }

    /**
     * Sets paypal_checkout_flow
     *
     * @param string $paypal_checkout_flow The type of flow PayPal will use during checkout
     *
     * @return $this
     */
    public function setPaypalCheckoutFlow($paypal_checkout_flow)
    {
        $allowedValues = $this->getPaypalCheckoutFlowAllowableValues();
        if (!is_null($paypal_checkout_flow) && !in_array($paypal_checkout_flow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paypal_checkout_flow', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paypal_checkout_flow'] = $paypal_checkout_flow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
