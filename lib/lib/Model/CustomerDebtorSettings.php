<?php
/**
 * CustomerDebtorSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib/Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CustomerDebtorSettings Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerDebtorSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerDebtorSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'automatic_counting_enabled' => 'bool',
        'next_debtor_id' => 'int',
        'collective_debtor_enabled' => 'bool',
        'collective_debtor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'automatic_counting_enabled' => null,
        'next_debtor_id' => 'int64',
        'collective_debtor_enabled' => null,
        'collective_debtor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatic_counting_enabled' => 'automatic_counting_enabled',
        'next_debtor_id' => 'next_debtor_id',
        'collective_debtor_enabled' => 'collective_debtor_enabled',
        'collective_debtor_id' => 'collective_debtor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatic_counting_enabled' => 'setAutomaticCountingEnabled',
        'next_debtor_id' => 'setNextDebtorId',
        'collective_debtor_enabled' => 'setCollectiveDebtorEnabled',
        'collective_debtor_id' => 'setCollectiveDebtorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatic_counting_enabled' => 'getAutomaticCountingEnabled',
        'next_debtor_id' => 'getNextDebtorId',
        'collective_debtor_enabled' => 'getCollectiveDebtorEnabled',
        'collective_debtor_id' => 'getCollectiveDebtorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatic_counting_enabled'] = isset($data['automatic_counting_enabled']) ? $data['automatic_counting_enabled'] : null;
        $this->container['next_debtor_id'] = isset($data['next_debtor_id']) ? $data['next_debtor_id'] : null;
        $this->container['collective_debtor_enabled'] = isset($data['collective_debtor_enabled']) ? $data['collective_debtor_enabled'] : null;
        $this->container['collective_debtor_id'] = isset($data['collective_debtor_id']) ? $data['collective_debtor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['automatic_counting_enabled'] === null) {
            $invalidProperties[] = "'automatic_counting_enabled' can't be null";
        }
        if ($this->container['collective_debtor_enabled'] === null) {
            $invalidProperties[] = "'collective_debtor_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatic_counting_enabled
     *
     * @return bool
     */
    public function getAutomaticCountingEnabled()
    {
        return $this->container['automatic_counting_enabled'];
    }

    /**
     * Sets automatic_counting_enabled
     *
     * @param bool $automatic_counting_enabled Is automatic counting of customers enabled
     *
     * @return $this
     */
    public function setAutomaticCountingEnabled($automatic_counting_enabled)
    {
        $this->container['automatic_counting_enabled'] = $automatic_counting_enabled;

        return $this;
    }

    /**
     * Gets next_debtor_id
     *
     * @return int
     */
    public function getNextDebtorId()
    {
        return $this->container['next_debtor_id'];
    }

    /**
     * Sets next_debtor_id
     *
     * @param int $next_debtor_id Next debtor ID
     *
     * @return $this
     */
    public function setNextDebtorId($next_debtor_id)
    {
        $this->container['next_debtor_id'] = $next_debtor_id;

        return $this;
    }

    /**
     * Gets collective_debtor_enabled
     *
     * @return bool
     */
    public function getCollectiveDebtorEnabled()
    {
        return $this->container['collective_debtor_enabled'];
    }

    /**
     * Sets collective_debtor_enabled
     *
     * @param bool $collective_debtor_enabled Is collective debtor id of customers enabled
     *
     * @return $this
     */
    public function setCollectiveDebtorEnabled($collective_debtor_enabled)
    {
        $this->container['collective_debtor_enabled'] = $collective_debtor_enabled;

        return $this;
    }

    /**
     * Gets collective_debtor_id
     *
     * @return int
     */
    public function getCollectiveDebtorId()
    {
        return $this->container['collective_debtor_id'];
    }

    /**
     * Sets collective_debtor_id
     *
     * @param int $collective_debtor_id Collective debtor ID
     *
     * @return $this
     */
    public function setCollectiveDebtorId($collective_debtor_id)
    {
        $this->container['collective_debtor_id'] = $collective_debtor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
