<?php
/**
 * ApplepayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib/Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * ApplepayAgreement Class Doc Comment
 *
 * @category Class
 * @description ApplePay agreement details
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplepayAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplepayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domains' => '\Frisbii\lib/Model\ApplepayDomainDto[]',
        'registered' => 'bool',
        'display_name' => 'string',
        'merchant_management_url' => 'string',
        'webhook_enabled' => 'bool',
        'domains_pending' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domains' => null,
        'registered' => null,
        'display_name' => null,
        'merchant_management_url' => null,
        'webhook_enabled' => null,
        'domains_pending' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domains' => 'domains',
        'registered' => 'registered',
        'display_name' => 'display_name',
        'merchant_management_url' => 'merchant_management_url',
        'webhook_enabled' => 'webhook_enabled',
        'domains_pending' => 'domains_pending'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domains' => 'setDomains',
        'registered' => 'setRegistered',
        'display_name' => 'setDisplayName',
        'merchant_management_url' => 'setMerchantManagementUrl',
        'webhook_enabled' => 'setWebhookEnabled',
        'domains_pending' => 'setDomainsPending'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domains' => 'getDomains',
        'registered' => 'getRegistered',
        'display_name' => 'getDisplayName',
        'merchant_management_url' => 'getMerchantManagementUrl',
        'webhook_enabled' => 'getWebhookEnabled',
        'domains_pending' => 'getDomainsPending'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['registered'] = isset($data['registered']) ? $data['registered'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['merchant_management_url'] = isset($data['merchant_management_url']) ? $data['merchant_management_url'] : null;
        $this->container['webhook_enabled'] = isset($data['webhook_enabled']) ? $data['webhook_enabled'] : null;
        $this->container['domains_pending'] = isset($data['domains_pending']) ? $data['domains_pending'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domains
     *
     * @return \Frisbii\lib/Model\ApplepayDomainDto[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \Frisbii\lib/Model\ApplepayDomainDto[] $domains domains
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets registered
     *
     * @return bool
     */
    public function getRegistered()
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     *
     * @param bool $registered registered
     *
     * @return $this
     */
    public function setRegistered($registered)
    {
        $this->container['registered'] = $registered;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets merchant_management_url
     *
     * @return string
     */
    public function getMerchantManagementUrl()
    {
        return $this->container['merchant_management_url'];
    }

    /**
     * Sets merchant_management_url
     *
     * @param string $merchant_management_url merchant_management_url
     *
     * @return $this
     */
    public function setMerchantManagementUrl($merchant_management_url)
    {
        $this->container['merchant_management_url'] = $merchant_management_url;

        return $this;
    }

    /**
     * Gets webhook_enabled
     *
     * @return bool
     */
    public function getWebhookEnabled()
    {
        return $this->container['webhook_enabled'];
    }

    /**
     * Sets webhook_enabled
     *
     * @param bool $webhook_enabled webhook_enabled
     *
     * @return $this
     */
    public function setWebhookEnabled($webhook_enabled)
    {
        $this->container['webhook_enabled'] = $webhook_enabled;

        return $this;
    }

    /**
     * Gets domains_pending
     *
     * @return bool
     */
    public function getDomainsPending()
    {
        return $this->container['domains_pending'];
    }

    /**
     * Sets domains_pending
     *
     * @param bool $domains_pending domains_pending
     *
     * @return $this
     */
    public function setDomainsPending($domains_pending)
    {
        $this->container['domains_pending'] = $domains_pending;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
