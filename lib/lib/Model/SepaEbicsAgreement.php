<?php
/**
 * SepaEbicsAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib/Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * SepaEbicsAgreement Class Doc Comment
 *
 * @category Class
 * @description Sepa Ebics agreement details
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SepaEbicsAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SepaEbicsAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iban' => 'string',
        'bic' => 'string',
        'scope' => 'string',
        'url' => 'string',
        'do_not_use_simulator' => 'bool',
        'company_name' => 'string',
        'company_address' => 'string',
        'company_postal_code' => 'string',
        'company_city' => 'string',
        'company_country' => 'string',
        'bank_name' => 'string',
        'creditor_identifier' => 'string',
        'secure_sepa' => 'bool',
        'tink_merchant_id' => 'string',
        'sepa_batch_booking' => 'bool',
        'user_id' => 'string',
        'customer_id' => 'string',
        'host_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iban' => null,
        'bic' => null,
        'scope' => null,
        'url' => null,
        'do_not_use_simulator' => null,
        'company_name' => null,
        'company_address' => null,
        'company_postal_code' => null,
        'company_city' => null,
        'company_country' => null,
        'bank_name' => null,
        'creditor_identifier' => null,
        'secure_sepa' => null,
        'tink_merchant_id' => null,
        'sepa_batch_booking' => null,
        'user_id' => null,
        'customer_id' => null,
        'host_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iban' => 'iban',
        'bic' => 'bic',
        'scope' => 'scope',
        'url' => 'url',
        'do_not_use_simulator' => 'do_not_use_simulator',
        'company_name' => 'company_name',
        'company_address' => 'company_address',
        'company_postal_code' => 'company_postal_code',
        'company_city' => 'company_city',
        'company_country' => 'company_country',
        'bank_name' => 'bank_name',
        'creditor_identifier' => 'creditor_identifier',
        'secure_sepa' => 'secure_sepa',
        'tink_merchant_id' => 'tink_merchant_id',
        'sepa_batch_booking' => 'sepa_batch_booking',
        'user_id' => 'user_id',
        'customer_id' => 'customer_id',
        'host_id' => 'host_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iban' => 'setIban',
        'bic' => 'setBic',
        'scope' => 'setScope',
        'url' => 'setUrl',
        'do_not_use_simulator' => 'setDoNotUseSimulator',
        'company_name' => 'setCompanyName',
        'company_address' => 'setCompanyAddress',
        'company_postal_code' => 'setCompanyPostalCode',
        'company_city' => 'setCompanyCity',
        'company_country' => 'setCompanyCountry',
        'bank_name' => 'setBankName',
        'creditor_identifier' => 'setCreditorIdentifier',
        'secure_sepa' => 'setSecureSepa',
        'tink_merchant_id' => 'setTinkMerchantId',
        'sepa_batch_booking' => 'setSepaBatchBooking',
        'user_id' => 'setUserId',
        'customer_id' => 'setCustomerId',
        'host_id' => 'setHostId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iban' => 'getIban',
        'bic' => 'getBic',
        'scope' => 'getScope',
        'url' => 'getUrl',
        'do_not_use_simulator' => 'getDoNotUseSimulator',
        'company_name' => 'getCompanyName',
        'company_address' => 'getCompanyAddress',
        'company_postal_code' => 'getCompanyPostalCode',
        'company_city' => 'getCompanyCity',
        'company_country' => 'getCompanyCountry',
        'bank_name' => 'getBankName',
        'creditor_identifier' => 'getCreditorIdentifier',
        'secure_sepa' => 'getSecureSepa',
        'tink_merchant_id' => 'getTinkMerchantId',
        'sepa_batch_booking' => 'getSepaBatchBooking',
        'user_id' => 'getUserId',
        'customer_id' => 'getCustomerId',
        'host_id' => 'getHostId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['do_not_use_simulator'] = isset($data['do_not_use_simulator']) ? $data['do_not_use_simulator'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['company_postal_code'] = isset($data['company_postal_code']) ? $data['company_postal_code'] : null;
        $this->container['company_city'] = isset($data['company_city']) ? $data['company_city'] : null;
        $this->container['company_country'] = isset($data['company_country']) ? $data['company_country'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['creditor_identifier'] = isset($data['creditor_identifier']) ? $data['creditor_identifier'] : null;
        $this->container['secure_sepa'] = isset($data['secure_sepa']) ? $data['secure_sepa'] : null;
        $this->container['tink_merchant_id'] = isset($data['tink_merchant_id']) ? $data['tink_merchant_id'] : null;
        $this->container['sepa_batch_booking'] = isset($data['sepa_batch_booking']) ? $data['sepa_batch_booking'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['host_id'] = isset($data['host_id']) ? $data['host_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['bic'] === null) {
            $invalidProperties[] = "'bic' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['company_address'] === null) {
            $invalidProperties[] = "'company_address' can't be null";
        }
        if ($this->container['company_postal_code'] === null) {
            $invalidProperties[] = "'company_postal_code' can't be null";
        }
        if ($this->container['company_city'] === null) {
            $invalidProperties[] = "'company_city' can't be null";
        }
        if ($this->container['company_country'] === null) {
            $invalidProperties[] = "'company_country' can't be null";
        }
        if ($this->container['bank_name'] === null) {
            $invalidProperties[] = "'bank_name' can't be null";
        }
        if ($this->container['creditor_identifier'] === null) {
            $invalidProperties[] = "'creditor_identifier' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['host_id'] === null) {
            $invalidProperties[] = "'host_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban Company IBAN
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic Bank Identifier Code
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Defines country specific set of rules according to which a message file is created since EBICS 3.0. Used for sending/fetching data to/from bank.
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Value received from bank
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets do_not_use_simulator
     *
     * @return bool
     */
    public function getDoNotUseSimulator()
    {
        return $this->container['do_not_use_simulator'];
    }

    /**
     * Sets do_not_use_simulator
     *
     * @param bool $do_not_use_simulator For test agreements, should simulator not be used
     *
     * @return $this
     */
    public function setDoNotUseSimulator($do_not_use_simulator)
    {
        $this->container['do_not_use_simulator'] = $do_not_use_simulator;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return string
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param string $company_address Company name
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string $company_postal_code Company postal code
     *
     * @return $this
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets company_city
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['company_city'];
    }

    /**
     * Sets company_city
     *
     * @param string $company_city Company city
     *
     * @return $this
     */
    public function setCompanyCity($company_city)
    {
        $this->container['company_city'] = $company_city;

        return $this;
    }

    /**
     * Gets company_country
     *
     * @return string
     */
    public function getCompanyCountry()
    {
        return $this->container['company_country'];
    }

    /**
     * Sets company_country
     *
     * @param string $company_country Company country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setCompanyCountry($company_country)
    {
        $this->container['company_country'] = $company_country;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name Readable bank name
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets creditor_identifier
     *
     * @return string
     */
    public function getCreditorIdentifier()
    {
        return $this->container['creditor_identifier'];
    }

    /**
     * Sets creditor_identifier
     *
     * @param string $creditor_identifier Creditor identifier
     *
     * @return $this
     */
    public function setCreditorIdentifier($creditor_identifier)
    {
        $this->container['creditor_identifier'] = $creditor_identifier;

        return $this;
    }

    /**
     * Gets secure_sepa
     *
     * @return bool
     */
    public function getSecureSepa()
    {
        return $this->container['secure_sepa'];
    }

    /**
     * Sets secure_sepa
     *
     * @param bool $secure_sepa Optional account validation for SEPA account
     *
     * @return $this
     */
    public function setSecureSepa($secure_sepa)
    {
        $this->container['secure_sepa'] = $secure_sepa;

        return $this;
    }

    /**
     * Gets tink_merchant_id
     *
     * @return string
     */
    public function getTinkMerchantId()
    {
        return $this->container['tink_merchant_id'];
    }

    /**
     * Sets tink_merchant_id
     *
     * @param string $tink_merchant_id Optional custom merchant id for secure SEPA
     *
     * @return $this
     */
    public function setTinkMerchantId($tink_merchant_id)
    {
        $this->container['tink_merchant_id'] = $tink_merchant_id;

        return $this;
    }

    /**
     * Gets sepa_batch_booking
     *
     * @return bool
     */
    public function getSepaBatchBooking()
    {
        return $this->container['sepa_batch_booking'];
    }

    /**
     * Sets sepa_batch_booking
     *
     * @param bool $sepa_batch_booking Indicator of transactions should be reported individually or in bulk on bank statement
     *
     * @return $this
     */
    public function setSepaBatchBooking($sepa_batch_booking)
    {
        $this->container['sepa_batch_booking'] = $sepa_batch_booking;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Value received from bank
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Value received from bank
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string $host_id Value received from bank
     *
     * @return $this
     */
    public function setHostId($host_id)
    {
        $this->container['host_id'] = $host_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
