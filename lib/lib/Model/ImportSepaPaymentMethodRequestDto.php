<?php
/**
 * ImportSepaPaymentMethodRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib/Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * ImportSepaPaymentMethodRequestDto Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportSepaPaymentMethodRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImportSepaPaymentMethodRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference' => 'string',
        'customer' => '\Frisbii\lib/Model\CreateCustomer',
        'customer_handle' => 'string',
        'creditor_country' => 'string',
        'debtor_iban' => 'string',
        'debtor_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference' => null,
        'customer' => null,
        'customer_handle' => null,
        'creditor_country' => null,
        'debtor_iban' => null,
        'debtor_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference' => 'reference',
        'customer' => 'customer',
        'customer_handle' => 'customer_handle',
        'creditor_country' => 'creditor_country',
        'debtor_iban' => 'debtor_iban',
        'debtor_name' => 'debtor_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference' => 'setReference',
        'customer' => 'setCustomer',
        'customer_handle' => 'setCustomerHandle',
        'creditor_country' => 'setCreditorCountry',
        'debtor_iban' => 'setDebtorIban',
        'debtor_name' => 'setDebtorName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference' => 'getReference',
        'customer' => 'getCustomer',
        'customer_handle' => 'getCustomerHandle',
        'creditor_country' => 'getCreditorCountry',
        'debtor_iban' => 'getDebtorIban',
        'debtor_name' => 'getDebtorName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CREDITOR_COUNTRY_UNDEFINED = 'UNDEFINED';
    const CREDITOR_COUNTRY_AC = 'AC';
    const CREDITOR_COUNTRY_AD = 'AD';
    const CREDITOR_COUNTRY_AE = 'AE';
    const CREDITOR_COUNTRY_AF = 'AF';
    const CREDITOR_COUNTRY_AG = 'AG';
    const CREDITOR_COUNTRY_AI = 'AI';
    const CREDITOR_COUNTRY_AL = 'AL';
    const CREDITOR_COUNTRY_AM = 'AM';
    const CREDITOR_COUNTRY_AN = 'AN';
    const CREDITOR_COUNTRY_AO = 'AO';
    const CREDITOR_COUNTRY_AQ = 'AQ';
    const CREDITOR_COUNTRY_AR = 'AR';
    const CREDITOR_COUNTRY__AS = 'AS';
    const CREDITOR_COUNTRY_AT = 'AT';
    const CREDITOR_COUNTRY_AU = 'AU';
    const CREDITOR_COUNTRY_AW = 'AW';
    const CREDITOR_COUNTRY_AX = 'AX';
    const CREDITOR_COUNTRY_AZ = 'AZ';
    const CREDITOR_COUNTRY_BA = 'BA';
    const CREDITOR_COUNTRY_BB = 'BB';
    const CREDITOR_COUNTRY_BD = 'BD';
    const CREDITOR_COUNTRY_BE = 'BE';
    const CREDITOR_COUNTRY_BF = 'BF';
    const CREDITOR_COUNTRY_BG = 'BG';
    const CREDITOR_COUNTRY_BH = 'BH';
    const CREDITOR_COUNTRY_BI = 'BI';
    const CREDITOR_COUNTRY_BJ = 'BJ';
    const CREDITOR_COUNTRY_BL = 'BL';
    const CREDITOR_COUNTRY_BM = 'BM';
    const CREDITOR_COUNTRY_BN = 'BN';
    const CREDITOR_COUNTRY_BO = 'BO';
    const CREDITOR_COUNTRY_BQ = 'BQ';
    const CREDITOR_COUNTRY_BR = 'BR';
    const CREDITOR_COUNTRY_BS = 'BS';
    const CREDITOR_COUNTRY_BT = 'BT';
    const CREDITOR_COUNTRY_BU = 'BU';
    const CREDITOR_COUNTRY_BV = 'BV';
    const CREDITOR_COUNTRY_BW = 'BW';
    const CREDITOR_COUNTRY_BY = 'BY';
    const CREDITOR_COUNTRY_BZ = 'BZ';
    const CREDITOR_COUNTRY_CA = 'CA';
    const CREDITOR_COUNTRY_CC = 'CC';
    const CREDITOR_COUNTRY_CD = 'CD';
    const CREDITOR_COUNTRY_CF = 'CF';
    const CREDITOR_COUNTRY_CG = 'CG';
    const CREDITOR_COUNTRY_CH = 'CH';
    const CREDITOR_COUNTRY_CI = 'CI';
    const CREDITOR_COUNTRY_CK = 'CK';
    const CREDITOR_COUNTRY_CL = 'CL';
    const CREDITOR_COUNTRY_CM = 'CM';
    const CREDITOR_COUNTRY_CN = 'CN';
    const CREDITOR_COUNTRY_CO = 'CO';
    const CREDITOR_COUNTRY_CP = 'CP';
    const CREDITOR_COUNTRY_CR = 'CR';
    const CREDITOR_COUNTRY_CS = 'CS';
    const CREDITOR_COUNTRY_CU = 'CU';
    const CREDITOR_COUNTRY_CV = 'CV';
    const CREDITOR_COUNTRY_CW = 'CW';
    const CREDITOR_COUNTRY_CX = 'CX';
    const CREDITOR_COUNTRY_CY = 'CY';
    const CREDITOR_COUNTRY_CZ = 'CZ';
    const CREDITOR_COUNTRY_DE = 'DE';
    const CREDITOR_COUNTRY_DG = 'DG';
    const CREDITOR_COUNTRY_DJ = 'DJ';
    const CREDITOR_COUNTRY_DK = 'DK';
    const CREDITOR_COUNTRY_DM = 'DM';
    const CREDITOR_COUNTRY__DO = 'DO';
    const CREDITOR_COUNTRY_DZ = 'DZ';
    const CREDITOR_COUNTRY_EA = 'EA';
    const CREDITOR_COUNTRY_EC = 'EC';
    const CREDITOR_COUNTRY_EE = 'EE';
    const CREDITOR_COUNTRY_EG = 'EG';
    const CREDITOR_COUNTRY_EH = 'EH';
    const CREDITOR_COUNTRY_ER = 'ER';
    const CREDITOR_COUNTRY_ES = 'ES';
    const CREDITOR_COUNTRY_ET = 'ET';
    const CREDITOR_COUNTRY_EU = 'EU';
    const CREDITOR_COUNTRY_FI = 'FI';
    const CREDITOR_COUNTRY_FJ = 'FJ';
    const CREDITOR_COUNTRY_FK = 'FK';
    const CREDITOR_COUNTRY_FM = 'FM';
    const CREDITOR_COUNTRY_FO = 'FO';
    const CREDITOR_COUNTRY_FR = 'FR';
    const CREDITOR_COUNTRY_FX = 'FX';
    const CREDITOR_COUNTRY_GA = 'GA';
    const CREDITOR_COUNTRY_GB = 'GB';
    const CREDITOR_COUNTRY_GD = 'GD';
    const CREDITOR_COUNTRY_GE = 'GE';
    const CREDITOR_COUNTRY_GF = 'GF';
    const CREDITOR_COUNTRY_GG = 'GG';
    const CREDITOR_COUNTRY_GH = 'GH';
    const CREDITOR_COUNTRY_GI = 'GI';
    const CREDITOR_COUNTRY_GL = 'GL';
    const CREDITOR_COUNTRY_GM = 'GM';
    const CREDITOR_COUNTRY_GN = 'GN';
    const CREDITOR_COUNTRY_GP = 'GP';
    const CREDITOR_COUNTRY_GQ = 'GQ';
    const CREDITOR_COUNTRY_GR = 'GR';
    const CREDITOR_COUNTRY_GS = 'GS';
    const CREDITOR_COUNTRY_GT = 'GT';
    const CREDITOR_COUNTRY_GU = 'GU';
    const CREDITOR_COUNTRY_GW = 'GW';
    const CREDITOR_COUNTRY_GY = 'GY';
    const CREDITOR_COUNTRY_HK = 'HK';
    const CREDITOR_COUNTRY_HM = 'HM';
    const CREDITOR_COUNTRY_HN = 'HN';
    const CREDITOR_COUNTRY_HR = 'HR';
    const CREDITOR_COUNTRY_HT = 'HT';
    const CREDITOR_COUNTRY_HU = 'HU';
    const CREDITOR_COUNTRY_IC = 'IC';
    const CREDITOR_COUNTRY_ID = 'ID';
    const CREDITOR_COUNTRY_IE = 'IE';
    const CREDITOR_COUNTRY_IL = 'IL';
    const CREDITOR_COUNTRY_IM = 'IM';
    const CREDITOR_COUNTRY_IN = 'IN';
    const CREDITOR_COUNTRY_IO = 'IO';
    const CREDITOR_COUNTRY_IQ = 'IQ';
    const CREDITOR_COUNTRY_IR = 'IR';
    const CREDITOR_COUNTRY_IS = 'IS';
    const CREDITOR_COUNTRY_IT = 'IT';
    const CREDITOR_COUNTRY_JE = 'JE';
    const CREDITOR_COUNTRY_JM = 'JM';
    const CREDITOR_COUNTRY_JO = 'JO';
    const CREDITOR_COUNTRY_JP = 'JP';
    const CREDITOR_COUNTRY_KE = 'KE';
    const CREDITOR_COUNTRY_KG = 'KG';
    const CREDITOR_COUNTRY_KH = 'KH';
    const CREDITOR_COUNTRY_KI = 'KI';
    const CREDITOR_COUNTRY_KM = 'KM';
    const CREDITOR_COUNTRY_KN = 'KN';
    const CREDITOR_COUNTRY_KP = 'KP';
    const CREDITOR_COUNTRY_KR = 'KR';
    const CREDITOR_COUNTRY_KW = 'KW';
    const CREDITOR_COUNTRY_KY = 'KY';
    const CREDITOR_COUNTRY_KZ = 'KZ';
    const CREDITOR_COUNTRY_LA = 'LA';
    const CREDITOR_COUNTRY_LB = 'LB';
    const CREDITOR_COUNTRY_LC = 'LC';
    const CREDITOR_COUNTRY_LI = 'LI';
    const CREDITOR_COUNTRY_LK = 'LK';
    const CREDITOR_COUNTRY_LR = 'LR';
    const CREDITOR_COUNTRY_LS = 'LS';
    const CREDITOR_COUNTRY_LT = 'LT';
    const CREDITOR_COUNTRY_LU = 'LU';
    const CREDITOR_COUNTRY_LV = 'LV';
    const CREDITOR_COUNTRY_LY = 'LY';
    const CREDITOR_COUNTRY_MA = 'MA';
    const CREDITOR_COUNTRY_MC = 'MC';
    const CREDITOR_COUNTRY_MD = 'MD';
    const CREDITOR_COUNTRY_ME = 'ME';
    const CREDITOR_COUNTRY_MF = 'MF';
    const CREDITOR_COUNTRY_MG = 'MG';
    const CREDITOR_COUNTRY_MH = 'MH';
    const CREDITOR_COUNTRY_MK = 'MK';
    const CREDITOR_COUNTRY_ML = 'ML';
    const CREDITOR_COUNTRY_MM = 'MM';
    const CREDITOR_COUNTRY_MN = 'MN';
    const CREDITOR_COUNTRY_MO = 'MO';
    const CREDITOR_COUNTRY_MP = 'MP';
    const CREDITOR_COUNTRY_MQ = 'MQ';
    const CREDITOR_COUNTRY_MR = 'MR';
    const CREDITOR_COUNTRY_MS = 'MS';
    const CREDITOR_COUNTRY_MT = 'MT';
    const CREDITOR_COUNTRY_MU = 'MU';
    const CREDITOR_COUNTRY_MV = 'MV';
    const CREDITOR_COUNTRY_MW = 'MW';
    const CREDITOR_COUNTRY_MX = 'MX';
    const CREDITOR_COUNTRY_MY = 'MY';
    const CREDITOR_COUNTRY_MZ = 'MZ';
    const CREDITOR_COUNTRY_NA = 'NA';
    const CREDITOR_COUNTRY_NC = 'NC';
    const CREDITOR_COUNTRY_NE = 'NE';
    const CREDITOR_COUNTRY_NF = 'NF';
    const CREDITOR_COUNTRY_NG = 'NG';
    const CREDITOR_COUNTRY_NI = 'NI';
    const CREDITOR_COUNTRY_NL = 'NL';
    const CREDITOR_COUNTRY_NO = 'NO';
    const CREDITOR_COUNTRY_NP = 'NP';
    const CREDITOR_COUNTRY_NR = 'NR';
    const CREDITOR_COUNTRY_NT = 'NT';
    const CREDITOR_COUNTRY_NU = 'NU';
    const CREDITOR_COUNTRY_NZ = 'NZ';
    const CREDITOR_COUNTRY_OM = 'OM';
    const CREDITOR_COUNTRY_PA = 'PA';
    const CREDITOR_COUNTRY_PE = 'PE';
    const CREDITOR_COUNTRY_PF = 'PF';
    const CREDITOR_COUNTRY_PG = 'PG';
    const CREDITOR_COUNTRY_PH = 'PH';
    const CREDITOR_COUNTRY_PK = 'PK';
    const CREDITOR_COUNTRY_PL = 'PL';
    const CREDITOR_COUNTRY_PM = 'PM';
    const CREDITOR_COUNTRY_PN = 'PN';
    const CREDITOR_COUNTRY_PR = 'PR';
    const CREDITOR_COUNTRY_PS = 'PS';
    const CREDITOR_COUNTRY_PT = 'PT';
    const CREDITOR_COUNTRY_PW = 'PW';
    const CREDITOR_COUNTRY_PY = 'PY';
    const CREDITOR_COUNTRY_QA = 'QA';
    const CREDITOR_COUNTRY_RE = 'RE';
    const CREDITOR_COUNTRY_RO = 'RO';
    const CREDITOR_COUNTRY_RS = 'RS';
    const CREDITOR_COUNTRY_RU = 'RU';
    const CREDITOR_COUNTRY_RW = 'RW';
    const CREDITOR_COUNTRY_SA = 'SA';
    const CREDITOR_COUNTRY_SB = 'SB';
    const CREDITOR_COUNTRY_SC = 'SC';
    const CREDITOR_COUNTRY_SD = 'SD';
    const CREDITOR_COUNTRY_SE = 'SE';
    const CREDITOR_COUNTRY_SF = 'SF';
    const CREDITOR_COUNTRY_SG = 'SG';
    const CREDITOR_COUNTRY_SH = 'SH';
    const CREDITOR_COUNTRY_SI = 'SI';
    const CREDITOR_COUNTRY_SJ = 'SJ';
    const CREDITOR_COUNTRY_SK = 'SK';
    const CREDITOR_COUNTRY_SL = 'SL';
    const CREDITOR_COUNTRY_SM = 'SM';
    const CREDITOR_COUNTRY_SN = 'SN';
    const CREDITOR_COUNTRY_SO = 'SO';
    const CREDITOR_COUNTRY_SR = 'SR';
    const CREDITOR_COUNTRY_SS = 'SS';
    const CREDITOR_COUNTRY_ST = 'ST';
    const CREDITOR_COUNTRY_SU = 'SU';
    const CREDITOR_COUNTRY_SV = 'SV';
    const CREDITOR_COUNTRY_SX = 'SX';
    const CREDITOR_COUNTRY_SY = 'SY';
    const CREDITOR_COUNTRY_SZ = 'SZ';
    const CREDITOR_COUNTRY_TA = 'TA';
    const CREDITOR_COUNTRY_TC = 'TC';
    const CREDITOR_COUNTRY_TD = 'TD';
    const CREDITOR_COUNTRY_TF = 'TF';
    const CREDITOR_COUNTRY_TG = 'TG';
    const CREDITOR_COUNTRY_TH = 'TH';
    const CREDITOR_COUNTRY_TJ = 'TJ';
    const CREDITOR_COUNTRY_TK = 'TK';
    const CREDITOR_COUNTRY_TL = 'TL';
    const CREDITOR_COUNTRY_TM = 'TM';
    const CREDITOR_COUNTRY_TN = 'TN';
    const CREDITOR_COUNTRY_TO = 'TO';
    const CREDITOR_COUNTRY_TP = 'TP';
    const CREDITOR_COUNTRY_TR = 'TR';
    const CREDITOR_COUNTRY_TT = 'TT';
    const CREDITOR_COUNTRY_TV = 'TV';
    const CREDITOR_COUNTRY_TW = 'TW';
    const CREDITOR_COUNTRY_TZ = 'TZ';
    const CREDITOR_COUNTRY_UA = 'UA';
    const CREDITOR_COUNTRY_UG = 'UG';
    const CREDITOR_COUNTRY_UK = 'UK';
    const CREDITOR_COUNTRY_UM = 'UM';
    const CREDITOR_COUNTRY_US = 'US';
    const CREDITOR_COUNTRY_UY = 'UY';
    const CREDITOR_COUNTRY_UZ = 'UZ';
    const CREDITOR_COUNTRY_VA = 'VA';
    const CREDITOR_COUNTRY_VC = 'VC';
    const CREDITOR_COUNTRY_VE = 'VE';
    const CREDITOR_COUNTRY_VG = 'VG';
    const CREDITOR_COUNTRY_VI = 'VI';
    const CREDITOR_COUNTRY_VN = 'VN';
    const CREDITOR_COUNTRY_VU = 'VU';
    const CREDITOR_COUNTRY_WF = 'WF';
    const CREDITOR_COUNTRY_WS = 'WS';
    const CREDITOR_COUNTRY_XK = 'XK';
    const CREDITOR_COUNTRY_YE = 'YE';
    const CREDITOR_COUNTRY_YT = 'YT';
    const CREDITOR_COUNTRY_YU = 'YU';
    const CREDITOR_COUNTRY_ZA = 'ZA';
    const CREDITOR_COUNTRY_ZM = 'ZM';
    const CREDITOR_COUNTRY_ZR = 'ZR';
    const CREDITOR_COUNTRY_ZW = 'ZW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditorCountryAllowableValues()
    {
        return [
            self::CREDITOR_COUNTRY_UNDEFINED,
            self::CREDITOR_COUNTRY_AC,
            self::CREDITOR_COUNTRY_AD,
            self::CREDITOR_COUNTRY_AE,
            self::CREDITOR_COUNTRY_AF,
            self::CREDITOR_COUNTRY_AG,
            self::CREDITOR_COUNTRY_AI,
            self::CREDITOR_COUNTRY_AL,
            self::CREDITOR_COUNTRY_AM,
            self::CREDITOR_COUNTRY_AN,
            self::CREDITOR_COUNTRY_AO,
            self::CREDITOR_COUNTRY_AQ,
            self::CREDITOR_COUNTRY_AR,
            self::CREDITOR_COUNTRY__AS,
            self::CREDITOR_COUNTRY_AT,
            self::CREDITOR_COUNTRY_AU,
            self::CREDITOR_COUNTRY_AW,
            self::CREDITOR_COUNTRY_AX,
            self::CREDITOR_COUNTRY_AZ,
            self::CREDITOR_COUNTRY_BA,
            self::CREDITOR_COUNTRY_BB,
            self::CREDITOR_COUNTRY_BD,
            self::CREDITOR_COUNTRY_BE,
            self::CREDITOR_COUNTRY_BF,
            self::CREDITOR_COUNTRY_BG,
            self::CREDITOR_COUNTRY_BH,
            self::CREDITOR_COUNTRY_BI,
            self::CREDITOR_COUNTRY_BJ,
            self::CREDITOR_COUNTRY_BL,
            self::CREDITOR_COUNTRY_BM,
            self::CREDITOR_COUNTRY_BN,
            self::CREDITOR_COUNTRY_BO,
            self::CREDITOR_COUNTRY_BQ,
            self::CREDITOR_COUNTRY_BR,
            self::CREDITOR_COUNTRY_BS,
            self::CREDITOR_COUNTRY_BT,
            self::CREDITOR_COUNTRY_BU,
            self::CREDITOR_COUNTRY_BV,
            self::CREDITOR_COUNTRY_BW,
            self::CREDITOR_COUNTRY_BY,
            self::CREDITOR_COUNTRY_BZ,
            self::CREDITOR_COUNTRY_CA,
            self::CREDITOR_COUNTRY_CC,
            self::CREDITOR_COUNTRY_CD,
            self::CREDITOR_COUNTRY_CF,
            self::CREDITOR_COUNTRY_CG,
            self::CREDITOR_COUNTRY_CH,
            self::CREDITOR_COUNTRY_CI,
            self::CREDITOR_COUNTRY_CK,
            self::CREDITOR_COUNTRY_CL,
            self::CREDITOR_COUNTRY_CM,
            self::CREDITOR_COUNTRY_CN,
            self::CREDITOR_COUNTRY_CO,
            self::CREDITOR_COUNTRY_CP,
            self::CREDITOR_COUNTRY_CR,
            self::CREDITOR_COUNTRY_CS,
            self::CREDITOR_COUNTRY_CU,
            self::CREDITOR_COUNTRY_CV,
            self::CREDITOR_COUNTRY_CW,
            self::CREDITOR_COUNTRY_CX,
            self::CREDITOR_COUNTRY_CY,
            self::CREDITOR_COUNTRY_CZ,
            self::CREDITOR_COUNTRY_DE,
            self::CREDITOR_COUNTRY_DG,
            self::CREDITOR_COUNTRY_DJ,
            self::CREDITOR_COUNTRY_DK,
            self::CREDITOR_COUNTRY_DM,
            self::CREDITOR_COUNTRY__DO,
            self::CREDITOR_COUNTRY_DZ,
            self::CREDITOR_COUNTRY_EA,
            self::CREDITOR_COUNTRY_EC,
            self::CREDITOR_COUNTRY_EE,
            self::CREDITOR_COUNTRY_EG,
            self::CREDITOR_COUNTRY_EH,
            self::CREDITOR_COUNTRY_ER,
            self::CREDITOR_COUNTRY_ES,
            self::CREDITOR_COUNTRY_ET,
            self::CREDITOR_COUNTRY_EU,
            self::CREDITOR_COUNTRY_FI,
            self::CREDITOR_COUNTRY_FJ,
            self::CREDITOR_COUNTRY_FK,
            self::CREDITOR_COUNTRY_FM,
            self::CREDITOR_COUNTRY_FO,
            self::CREDITOR_COUNTRY_FR,
            self::CREDITOR_COUNTRY_FX,
            self::CREDITOR_COUNTRY_GA,
            self::CREDITOR_COUNTRY_GB,
            self::CREDITOR_COUNTRY_GD,
            self::CREDITOR_COUNTRY_GE,
            self::CREDITOR_COUNTRY_GF,
            self::CREDITOR_COUNTRY_GG,
            self::CREDITOR_COUNTRY_GH,
            self::CREDITOR_COUNTRY_GI,
            self::CREDITOR_COUNTRY_GL,
            self::CREDITOR_COUNTRY_GM,
            self::CREDITOR_COUNTRY_GN,
            self::CREDITOR_COUNTRY_GP,
            self::CREDITOR_COUNTRY_GQ,
            self::CREDITOR_COUNTRY_GR,
            self::CREDITOR_COUNTRY_GS,
            self::CREDITOR_COUNTRY_GT,
            self::CREDITOR_COUNTRY_GU,
            self::CREDITOR_COUNTRY_GW,
            self::CREDITOR_COUNTRY_GY,
            self::CREDITOR_COUNTRY_HK,
            self::CREDITOR_COUNTRY_HM,
            self::CREDITOR_COUNTRY_HN,
            self::CREDITOR_COUNTRY_HR,
            self::CREDITOR_COUNTRY_HT,
            self::CREDITOR_COUNTRY_HU,
            self::CREDITOR_COUNTRY_IC,
            self::CREDITOR_COUNTRY_ID,
            self::CREDITOR_COUNTRY_IE,
            self::CREDITOR_COUNTRY_IL,
            self::CREDITOR_COUNTRY_IM,
            self::CREDITOR_COUNTRY_IN,
            self::CREDITOR_COUNTRY_IO,
            self::CREDITOR_COUNTRY_IQ,
            self::CREDITOR_COUNTRY_IR,
            self::CREDITOR_COUNTRY_IS,
            self::CREDITOR_COUNTRY_IT,
            self::CREDITOR_COUNTRY_JE,
            self::CREDITOR_COUNTRY_JM,
            self::CREDITOR_COUNTRY_JO,
            self::CREDITOR_COUNTRY_JP,
            self::CREDITOR_COUNTRY_KE,
            self::CREDITOR_COUNTRY_KG,
            self::CREDITOR_COUNTRY_KH,
            self::CREDITOR_COUNTRY_KI,
            self::CREDITOR_COUNTRY_KM,
            self::CREDITOR_COUNTRY_KN,
            self::CREDITOR_COUNTRY_KP,
            self::CREDITOR_COUNTRY_KR,
            self::CREDITOR_COUNTRY_KW,
            self::CREDITOR_COUNTRY_KY,
            self::CREDITOR_COUNTRY_KZ,
            self::CREDITOR_COUNTRY_LA,
            self::CREDITOR_COUNTRY_LB,
            self::CREDITOR_COUNTRY_LC,
            self::CREDITOR_COUNTRY_LI,
            self::CREDITOR_COUNTRY_LK,
            self::CREDITOR_COUNTRY_LR,
            self::CREDITOR_COUNTRY_LS,
            self::CREDITOR_COUNTRY_LT,
            self::CREDITOR_COUNTRY_LU,
            self::CREDITOR_COUNTRY_LV,
            self::CREDITOR_COUNTRY_LY,
            self::CREDITOR_COUNTRY_MA,
            self::CREDITOR_COUNTRY_MC,
            self::CREDITOR_COUNTRY_MD,
            self::CREDITOR_COUNTRY_ME,
            self::CREDITOR_COUNTRY_MF,
            self::CREDITOR_COUNTRY_MG,
            self::CREDITOR_COUNTRY_MH,
            self::CREDITOR_COUNTRY_MK,
            self::CREDITOR_COUNTRY_ML,
            self::CREDITOR_COUNTRY_MM,
            self::CREDITOR_COUNTRY_MN,
            self::CREDITOR_COUNTRY_MO,
            self::CREDITOR_COUNTRY_MP,
            self::CREDITOR_COUNTRY_MQ,
            self::CREDITOR_COUNTRY_MR,
            self::CREDITOR_COUNTRY_MS,
            self::CREDITOR_COUNTRY_MT,
            self::CREDITOR_COUNTRY_MU,
            self::CREDITOR_COUNTRY_MV,
            self::CREDITOR_COUNTRY_MW,
            self::CREDITOR_COUNTRY_MX,
            self::CREDITOR_COUNTRY_MY,
            self::CREDITOR_COUNTRY_MZ,
            self::CREDITOR_COUNTRY_NA,
            self::CREDITOR_COUNTRY_NC,
            self::CREDITOR_COUNTRY_NE,
            self::CREDITOR_COUNTRY_NF,
            self::CREDITOR_COUNTRY_NG,
            self::CREDITOR_COUNTRY_NI,
            self::CREDITOR_COUNTRY_NL,
            self::CREDITOR_COUNTRY_NO,
            self::CREDITOR_COUNTRY_NP,
            self::CREDITOR_COUNTRY_NR,
            self::CREDITOR_COUNTRY_NT,
            self::CREDITOR_COUNTRY_NU,
            self::CREDITOR_COUNTRY_NZ,
            self::CREDITOR_COUNTRY_OM,
            self::CREDITOR_COUNTRY_PA,
            self::CREDITOR_COUNTRY_PE,
            self::CREDITOR_COUNTRY_PF,
            self::CREDITOR_COUNTRY_PG,
            self::CREDITOR_COUNTRY_PH,
            self::CREDITOR_COUNTRY_PK,
            self::CREDITOR_COUNTRY_PL,
            self::CREDITOR_COUNTRY_PM,
            self::CREDITOR_COUNTRY_PN,
            self::CREDITOR_COUNTRY_PR,
            self::CREDITOR_COUNTRY_PS,
            self::CREDITOR_COUNTRY_PT,
            self::CREDITOR_COUNTRY_PW,
            self::CREDITOR_COUNTRY_PY,
            self::CREDITOR_COUNTRY_QA,
            self::CREDITOR_COUNTRY_RE,
            self::CREDITOR_COUNTRY_RO,
            self::CREDITOR_COUNTRY_RS,
            self::CREDITOR_COUNTRY_RU,
            self::CREDITOR_COUNTRY_RW,
            self::CREDITOR_COUNTRY_SA,
            self::CREDITOR_COUNTRY_SB,
            self::CREDITOR_COUNTRY_SC,
            self::CREDITOR_COUNTRY_SD,
            self::CREDITOR_COUNTRY_SE,
            self::CREDITOR_COUNTRY_SF,
            self::CREDITOR_COUNTRY_SG,
            self::CREDITOR_COUNTRY_SH,
            self::CREDITOR_COUNTRY_SI,
            self::CREDITOR_COUNTRY_SJ,
            self::CREDITOR_COUNTRY_SK,
            self::CREDITOR_COUNTRY_SL,
            self::CREDITOR_COUNTRY_SM,
            self::CREDITOR_COUNTRY_SN,
            self::CREDITOR_COUNTRY_SO,
            self::CREDITOR_COUNTRY_SR,
            self::CREDITOR_COUNTRY_SS,
            self::CREDITOR_COUNTRY_ST,
            self::CREDITOR_COUNTRY_SU,
            self::CREDITOR_COUNTRY_SV,
            self::CREDITOR_COUNTRY_SX,
            self::CREDITOR_COUNTRY_SY,
            self::CREDITOR_COUNTRY_SZ,
            self::CREDITOR_COUNTRY_TA,
            self::CREDITOR_COUNTRY_TC,
            self::CREDITOR_COUNTRY_TD,
            self::CREDITOR_COUNTRY_TF,
            self::CREDITOR_COUNTRY_TG,
            self::CREDITOR_COUNTRY_TH,
            self::CREDITOR_COUNTRY_TJ,
            self::CREDITOR_COUNTRY_TK,
            self::CREDITOR_COUNTRY_TL,
            self::CREDITOR_COUNTRY_TM,
            self::CREDITOR_COUNTRY_TN,
            self::CREDITOR_COUNTRY_TO,
            self::CREDITOR_COUNTRY_TP,
            self::CREDITOR_COUNTRY_TR,
            self::CREDITOR_COUNTRY_TT,
            self::CREDITOR_COUNTRY_TV,
            self::CREDITOR_COUNTRY_TW,
            self::CREDITOR_COUNTRY_TZ,
            self::CREDITOR_COUNTRY_UA,
            self::CREDITOR_COUNTRY_UG,
            self::CREDITOR_COUNTRY_UK,
            self::CREDITOR_COUNTRY_UM,
            self::CREDITOR_COUNTRY_US,
            self::CREDITOR_COUNTRY_UY,
            self::CREDITOR_COUNTRY_UZ,
            self::CREDITOR_COUNTRY_VA,
            self::CREDITOR_COUNTRY_VC,
            self::CREDITOR_COUNTRY_VE,
            self::CREDITOR_COUNTRY_VG,
            self::CREDITOR_COUNTRY_VI,
            self::CREDITOR_COUNTRY_VN,
            self::CREDITOR_COUNTRY_VU,
            self::CREDITOR_COUNTRY_WF,
            self::CREDITOR_COUNTRY_WS,
            self::CREDITOR_COUNTRY_XK,
            self::CREDITOR_COUNTRY_YE,
            self::CREDITOR_COUNTRY_YT,
            self::CREDITOR_COUNTRY_YU,
            self::CREDITOR_COUNTRY_ZA,
            self::CREDITOR_COUNTRY_ZM,
            self::CREDITOR_COUNTRY_ZR,
            self::CREDITOR_COUNTRY_ZW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_handle'] = isset($data['customer_handle']) ? $data['customer_handle'] : null;
        $this->container['creditor_country'] = isset($data['creditor_country']) ? $data['creditor_country'] : null;
        $this->container['debtor_iban'] = isset($data['debtor_iban']) ? $data['debtor_iban'] : null;
        $this->container['debtor_name'] = isset($data['debtor_name']) ? $data['debtor_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['creditor_country'] === null) {
            $invalidProperties[] = "'creditor_country' can't be null";
        }
        $allowedValues = $this->getCreditorCountryAllowableValues();
        if (!is_null($this->container['creditor_country']) && !in_array($this->container['creditor_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'creditor_country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['debtor_iban'] === null) {
            $invalidProperties[] = "'debtor_iban' can't be null";
        }
        if ($this->container['debtor_name'] === null) {
            $invalidProperties[] = "'debtor_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Optional reference given to the created payment method. Max length 64 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Frisbii\lib/Model\CreateCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Frisbii\lib/Model\CreateCustomer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_handle
     *
     * @return string
     */
    public function getCustomerHandle()
    {
        return $this->container['customer_handle'];
    }

    /**
     * Sets customer_handle
     *
     * @param string $customer_handle Customer reference to an existing customer. Either this argument or `customer` must be provided.
     *
     * @return $this
     */
    public function setCustomerHandle($customer_handle)
    {
        $this->container['customer_handle'] = $customer_handle;

        return $this;
    }

    /**
     * Gets creditor_country
     *
     * @return string
     */
    public function getCreditorCountry()
    {
        return $this->container['creditor_country'];
    }

    /**
     * Sets creditor_country
     *
     * @param string $creditor_country Mandatory country of creditor, in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setCreditorCountry($creditor_country)
    {
        $allowedValues = $this->getCreditorCountryAllowableValues();
        if (!in_array($creditor_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'creditor_country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['creditor_country'] = $creditor_country;

        return $this;
    }

    /**
     * Gets debtor_iban
     *
     * @return string
     */
    public function getDebtorIban()
    {
        return $this->container['debtor_iban'];
    }

    /**
     * Sets debtor_iban
     *
     * @param string $debtor_iban Mandatory debtor IBAN
     *
     * @return $this
     */
    public function setDebtorIban($debtor_iban)
    {
        $this->container['debtor_iban'] = $debtor_iban;

        return $this;
    }

    /**
     * Gets debtor_name
     *
     * @return string
     */
    public function getDebtorName()
    {
        return $this->container['debtor_name'];
    }

    /**
     * Sets debtor_name
     *
     * @param string $debtor_name Mandatory name of debtor (account holder name)
     *
     * @return $this
     */
    public function setDebtorName($debtor_name)
    {
        $this->container['debtor_name'] = $debtor_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
