<?php
/**
 * ChargeParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * ChargeParameters Class Doc Comment
 *
 * @category Class
 * @description Extra optional parameters that may be added for specific payment methods.
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargeParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargeParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mps_ttl' => 'string',
        'offline_agreement_handle' => 'string',
        'offline_payment_instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mps_ttl' => null,
        'offline_agreement_handle' => null,
        'offline_payment_instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mps_ttl' => 'mps_ttl',
        'offline_agreement_handle' => 'offline_agreement_handle',
        'offline_payment_instructions' => 'offline_payment_instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mps_ttl' => 'setMpsTtl',
        'offline_agreement_handle' => 'setOfflineAgreementHandle',
        'offline_payment_instructions' => 'setOfflinePaymentInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mps_ttl' => 'getMpsTtl',
        'offline_agreement_handle' => 'getOfflineAgreementHandle',
        'offline_payment_instructions' => 'getOfflinePaymentInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mps_ttl'] = isset($data['mps_ttl']) ? $data['mps_ttl'] : null;
        $this->container['offline_agreement_handle'] = isset($data['offline_agreement_handle']) ? $data['offline_agreement_handle'] : null;
        $this->container['offline_payment_instructions'] = isset($data['offline_payment_instructions']) ? $data['offline_payment_instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mps_ttl
     *
     * @return string
     */
    public function getMpsTtl()
    {
        return $this->container['mps_ttl'];
    }

    /**
     * Sets mps_ttl
     *
     * @param string $mps_ttl Optional override of default MPS payment expiration. The period is defined as an ISO-8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations
     *
     * @return $this
     */
    public function setMpsTtl($mps_ttl)
    {
        $this->container['mps_ttl'] = $mps_ttl;

        return $this;
    }

    /**
     * Gets offline_agreement_handle
     *
     * @return string
     */
    public function getOfflineAgreementHandle()
    {
        return $this->container['offline_agreement_handle'];
    }

    /**
     * Sets offline_agreement_handle
     *
     * @param string $offline_agreement_handle Required offline agreement handle, if source = 'offline'.
     *
     * @return $this
     */
    public function setOfflineAgreementHandle($offline_agreement_handle)
    {
        $this->container['offline_agreement_handle'] = $offline_agreement_handle;

        return $this;
    }

    /**
     * Gets offline_payment_instructions
     *
     * @return string
     */
    public function getOfflinePaymentInstructions()
    {
        return $this->container['offline_payment_instructions'];
    }

    /**
     * Sets offline_payment_instructions
     *
     * @param string $offline_payment_instructions Optional override of payment instructions of the default instructions from the agreement, mustache tags available: {{invoice.handle}}, {{invoice.number}}, {{customer.handle}}, {{customer.email}}, {{accounting_invoice.accounting_number}}
     *
     * @return $this
     */
    public function setOfflinePaymentInstructions($offline_payment_instructions)
    {
        $this->container['offline_payment_instructions'] = $offline_payment_instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
