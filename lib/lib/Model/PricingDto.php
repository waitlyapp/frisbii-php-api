<?php
/**
 * PricingDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\lib/Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * PricingDto Class Doc Comment
 *
 * @category Class
 * @description Pricing for this metered billing product.
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PricingDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PricingDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat' => 'float',
        'currency' => 'string',
        'unit_label' => 'string',
        'included_units' => 'int',
        'minimum_fee' => 'string',
        'amount_incl_vat' => 'bool',
        'tax_policy' => 'string',
        'pricing_model' => 'string',
        'unit_ranges' => '\Frisbii\lib/Model\UnitRangeDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat' => 'float',
        'currency' => null,
        'unit_label' => null,
        'included_units' => 'int64',
        'minimum_fee' => null,
        'amount_incl_vat' => null,
        'tax_policy' => null,
        'pricing_model' => null,
        'unit_ranges' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat' => 'vat',
        'currency' => 'currency',
        'unit_label' => 'unit_label',
        'included_units' => 'included_units',
        'minimum_fee' => 'minimum_fee',
        'amount_incl_vat' => 'amount_incl_vat',
        'tax_policy' => 'tax_policy',
        'pricing_model' => 'pricing_model',
        'unit_ranges' => 'unit_ranges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat' => 'setVat',
        'currency' => 'setCurrency',
        'unit_label' => 'setUnitLabel',
        'included_units' => 'setIncludedUnits',
        'minimum_fee' => 'setMinimumFee',
        'amount_incl_vat' => 'setAmountInclVat',
        'tax_policy' => 'setTaxPolicy',
        'pricing_model' => 'setPricingModel',
        'unit_ranges' => 'setUnitRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat' => 'getVat',
        'currency' => 'getCurrency',
        'unit_label' => 'getUnitLabel',
        'included_units' => 'getIncludedUnits',
        'minimum_fee' => 'getMinimumFee',
        'amount_incl_vat' => 'getAmountInclVat',
        'tax_policy' => 'getTaxPolicy',
        'pricing_model' => 'getPricingModel',
        'unit_ranges' => 'getUnitRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRICING_MODEL_PER_UNIT = 'per_unit';
    const PRICING_MODEL_PER_TIER = 'per_tier';
    const PRICING_MODEL_PER_UNIT_STEP = 'per_unit_step';
    const PRICING_MODEL_PER_TIER_STEP = 'per_tier_step';
    const PRICING_MODEL_PERCENTAGE = 'percentage';
    const PRICING_MODEL_PERCENTAGE_STEP = 'percentage_step';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPricingModelAllowableValues()
    {
        return [
            self::PRICING_MODEL_PER_UNIT,
            self::PRICING_MODEL_PER_TIER,
            self::PRICING_MODEL_PER_UNIT_STEP,
            self::PRICING_MODEL_PER_TIER_STEP,
            self::PRICING_MODEL_PERCENTAGE,
            self::PRICING_MODEL_PERCENTAGE_STEP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['unit_label'] = isset($data['unit_label']) ? $data['unit_label'] : null;
        $this->container['included_units'] = isset($data['included_units']) ? $data['included_units'] : null;
        $this->container['minimum_fee'] = isset($data['minimum_fee']) ? $data['minimum_fee'] : null;
        $this->container['amount_incl_vat'] = isset($data['amount_incl_vat']) ? $data['amount_incl_vat'] : null;
        $this->container['tax_policy'] = isset($data['tax_policy']) ? $data['tax_policy'] : null;
        $this->container['pricing_model'] = isset($data['pricing_model']) ? $data['pricing_model'] : null;
        $this->container['unit_ranges'] = isset($data['unit_ranges']) ? $data['unit_ranges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pricing_model'] === null) {
            $invalidProperties[] = "'pricing_model' can't be null";
        }
        $allowedValues = $this->getPricingModelAllowableValues();
        if (!is_null($this->container['pricing_model']) && !in_array($this->container['pricing_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pricing_model', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unit_ranges'] === null) {
            $invalidProperties[] = "'unit_ranges' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat VAT percentage for the product. Defaults to the account's VAT
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency for the pricing plan in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unit_label
     *
     * @return string
     */
    public function getUnitLabel()
    {
        return $this->container['unit_label'];
    }

    /**
     * Sets unit_label
     *
     * @param string $unit_label Label for the unit of the product. Defaults to 'unit'.
     *
     * @return $this
     */
    public function setUnitLabel($unit_label)
    {
        $this->container['unit_label'] = $unit_label;

        return $this;
    }

    /**
     * Gets included_units
     *
     * @return int
     */
    public function getIncludedUnits()
    {
        return $this->container['included_units'];
    }

    /**
     * Sets included_units
     *
     * @param int $included_units Included units for free. Defaults to 0.
     *
     * @return $this
     */
    public function setIncludedUnits($included_units)
    {
        $this->container['included_units'] = $included_units;

        return $this;
    }

    /**
     * Gets minimum_fee
     *
     * @return string
     */
    public function getMinimumFee()
    {
        return $this->container['minimum_fee'];
    }

    /**
     * Sets minimum_fee
     *
     * @param string $minimum_fee Minimum fee for the product. Defaults to 0.
     *
     * @return $this
     */
    public function setMinimumFee($minimum_fee)
    {
        $this->container['minimum_fee'] = $minimum_fee;

        return $this;
    }

    /**
     * Gets amount_incl_vat
     *
     * @return bool
     */
    public function getAmountInclVat()
    {
        return $this->container['amount_incl_vat'];
    }

    /**
     * Sets amount_incl_vat
     *
     * @param bool $amount_incl_vat Whether the amount is including VAT. Defaults to true.
     *
     * @return $this
     */
    public function setAmountInclVat($amount_incl_vat)
    {
        $this->container['amount_incl_vat'] = $amount_incl_vat;

        return $this;
    }

    /**
     * Gets tax_policy
     *
     * @return string
     */
    public function getTaxPolicy()
    {
        return $this->container['tax_policy'];
    }

    /**
     * Sets tax_policy
     *
     * @param string $tax_policy Tax policy handle for the product.
     *
     * @return $this
     */
    public function setTaxPolicy($tax_policy)
    {
        $this->container['tax_policy'] = $tax_policy;

        return $this;
    }

    /**
     * Gets pricing_model
     *
     * @return string
     */
    public function getPricingModel()
    {
        return $this->container['pricing_model'];
    }

    /**
     * Sets pricing_model
     *
     * @param string $pricing_model Pricing model for the product.
     *
     * @return $this
     */
    public function setPricingModel($pricing_model)
    {
        $allowedValues = $this->getPricingModelAllowableValues();
        if (!in_array($pricing_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pricing_model', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pricing_model'] = $pricing_model;

        return $this;
    }

    /**
     * Gets unit_ranges
     *
     * @return \Frisbii\lib/Model\UnitRangeDto[]
     */
    public function getUnitRanges()
    {
        return $this->container['unit_ranges'];
    }

    /**
     * Sets unit_ranges
     *
     * @param \Frisbii\lib/Model\UnitRangeDto[] $unit_ranges Unit ranges for this product
     *
     * @return $this
     */
    public function setUnitRanges($unit_ranges)
    {
        $this->container['unit_ranges'] = $unit_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
