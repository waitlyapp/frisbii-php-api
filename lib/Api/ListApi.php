<?php
/**
 * ListApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frisbii\ApiException;
use Frisbii\Configuration;
use Frisbii\HeaderSelector;
use Frisbii\ObjectSerializer;

/**
 * ListApi Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAddOnList' => [
            'application/json',
        ],
        'getAuditLogEvents' => [
            'application/json',
        ],
        'getChargeList' => [
            'application/json',
        ],
        'getCouponList' => [
            'application/json',
        ],
        'getCustomerList' => [
            'application/json',
        ],
        'getDiscountList' => [
            'application/json',
        ],
        'getDisputeList' => [
            'application/json',
        ],
        'getEntitlementList' => [
            'application/json',
        ],
        'getInvoiceCreditNoteList' => [
            'application/json',
        ],
        'getInvoiceList' => [
            'application/json',
        ],
        'getMeteredBillingProductList' => [
            'application/json',
        ],
        'getMeteredUsageRecordList' => [
            'application/json',
        ],
        'getPaymentMethodList' => [
            'application/json',
        ],
        'getPayoutList' => [
            'application/json',
        ],
        'getPlanList' => [
            'application/json',
        ],
        'getSubscriptionList' => [
            'application/json',
        ],
        'getTaxPolicyList' => [
            'application/json',
        ],
        'getTransactionList' => [
            'application/json',
        ],
        'getWebhookList' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAddOnList
     *
     * Get list of add-ons
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $state state (optional, default to 'active')
     * @param  string $type type (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $amount amount (optional)
     * @param  string $amountInclVat amountInclVat (optional)
     * @param  string $allPlans allPlans (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddOnList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\AddOnList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getAddOnList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amountInclVat = null, $allPlans = null, $currency = null, string $contentType = self::contentTypes['getAddOnList'][0])
    {
        list($response) = $this->getAddOnListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $name, $description, $amount, $amountInclVat, $allPlans, $currency, $contentType);
        return $response;
    }

    /**
     * Operation getAddOnListWithHttpInfo
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional, default to 'active')
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $allPlans (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddOnList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\AddOnList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddOnListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amountInclVat = null, $allPlans = null, $currency = null, string $contentType = self::contentTypes['getAddOnList'][0])
    {
        $request = $this->getAddOnListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $name, $description, $amount, $amountInclVat, $allPlans, $currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\AddOnList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\AddOnList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\AddOnList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\AddOnList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\AddOnList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddOnListAsync
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional, default to 'active')
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $allPlans (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddOnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddOnListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amountInclVat = null, $allPlans = null, $currency = null, string $contentType = self::contentTypes['getAddOnList'][0])
    {
        return $this->getAddOnListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $name, $description, $amount, $amountInclVat, $allPlans, $currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddOnListAsyncWithHttpInfo
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional, default to 'active')
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $allPlans (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddOnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddOnListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amountInclVat = null, $allPlans = null, $currency = null, string $contentType = self::contentTypes['getAddOnList'][0])
    {
        $returnType = '\Frisbii\Model\AddOnList';
        $request = $this->getAddOnListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $name, $description, $amount, $amountInclVat, $allPlans, $currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddOnList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional, default to 'active')
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $allPlans (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddOnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAddOnListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amountInclVat = null, $allPlans = null, $currency = null, string $contentType = self::contentTypes['getAddOnList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getAddOnList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getAddOnList, must be bigger than or equal to 10.');
        }
        











        

        $resourcePath = '/v1/list/add_on';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amountInclVat,
            'amount_incl_vat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allPlans,
            'all_plans', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuditLogEvents
     *
     * Get list of audit log events
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $userId userId (optional)
     * @param  string $endpointName endpointName (optional)
     * @param  string $operation operation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogEvents'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\AuditLogEventListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getAuditLogEvents($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $userId = null, $endpointName = null, $operation = null, string $contentType = self::contentTypes['getAuditLogEvents'][0])
    {
        list($response) = $this->getAuditLogEventsWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $userId, $endpointName, $operation, $contentType);
        return $response;
    }

    /**
     * Operation getAuditLogEventsWithHttpInfo
     *
     * Get list of audit log events
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $userId (optional)
     * @param  string $endpointName (optional)
     * @param  string $operation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogEvents'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\AuditLogEventListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuditLogEventsWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $userId = null, $endpointName = null, $operation = null, string $contentType = self::contentTypes['getAuditLogEvents'][0])
    {
        $request = $this->getAuditLogEventsRequest($from, $to, $interval, $size, $nextPageToken, $range, $userId, $endpointName, $operation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\AuditLogEventListDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\AuditLogEventListDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\AuditLogEventListDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\AuditLogEventListDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\AuditLogEventListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuditLogEventsAsync
     *
     * Get list of audit log events
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $userId (optional)
     * @param  string $endpointName (optional)
     * @param  string $operation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuditLogEventsAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $userId = null, $endpointName = null, $operation = null, string $contentType = self::contentTypes['getAuditLogEvents'][0])
    {
        return $this->getAuditLogEventsAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $userId, $endpointName, $operation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuditLogEventsAsyncWithHttpInfo
     *
     * Get list of audit log events
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $userId (optional)
     * @param  string $endpointName (optional)
     * @param  string $operation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuditLogEventsAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $userId = null, $endpointName = null, $operation = null, string $contentType = self::contentTypes['getAuditLogEvents'][0])
    {
        $returnType = '\Frisbii\Model\AuditLogEventListDto';
        $request = $this->getAuditLogEventsRequest($from, $to, $interval, $size, $nextPageToken, $range, $userId, $endpointName, $operation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuditLogEvents'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $userId (optional)
     * @param  string $endpointName (optional)
     * @param  string $operation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuditLogEventsRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $userId = null, $endpointName = null, $operation = null, string $contentType = self::contentTypes['getAuditLogEvents'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getAuditLogEvents, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getAuditLogEvents, must be bigger than or equal to 10.');
        }
        






        $resourcePath = '/v1/list/audit_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $userId,
            'user_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpointName,
            'endpoint_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $operation,
            'operation', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChargeList
     *
     * Get list of charges
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $handleContains handleContains (optional)
     * @param  string $accountingNumber accountingNumber (optional)
     * @param  string $accountingNumberPrefix accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains accountingNumberContains (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $excludeState excludeState (optional)
     * @param  string $customer customer (optional)
     * @param  string $amount amount (optional)
     * @param  string $refundedAmount refundedAmount (optional)
     * @param  string $authorizedAmount authorizedAmount (optional)
     * @param  string[] $currency currency (optional)
     * @param  bool $partialSettled partialSettled (optional)
     * @param  string $settledAmount settledAmount (optional)
     * @param  string $debtorId debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChargeList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\ChargeList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getChargeList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, string $contentType = self::contentTypes['getChargeList'][0])
    {
        list($response) = $this->getChargeListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $contentType);
        return $response;
    }

    /**
     * Operation getChargeListWithHttpInfo
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChargeList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\ChargeList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChargeListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, string $contentType = self::contentTypes['getChargeList'][0])
    {
        $request = $this->getChargeListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\ChargeList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ChargeList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ChargeList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\ChargeList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ChargeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChargeListAsync
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChargeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, string $contentType = self::contentTypes['getChargeList'][0])
    {
        return $this->getChargeListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChargeListAsyncWithHttpInfo
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChargeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, string $contentType = self::contentTypes['getChargeList'][0])
    {
        $returnType = '\Frisbii\Model\ChargeList';
        $request = $this->getChargeListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChargeList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChargeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChargeListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, string $contentType = self::contentTypes['getChargeList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getChargeList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getChargeList, must be bigger than or equal to 10.');
        }
        








        
        




        




        $resourcePath = '/v1/list/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handleContains,
            'handle_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumber,
            'accounting_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberPrefix,
            'accounting_number_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberContains,
            'accounting_number_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeState,
            'exclude_state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refundedAmount,
            'refunded_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorizedAmount,
            'authorized_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partialSettled,
            'partial_settled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $settledAmount,
            'settled_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $debtorId,
            'debtor_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponList
     *
     * Get list of coupons
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string[] $state state (optional)
     * @param  string $type type (optional)
     * @param  string[] $expireReason expireReason (optional)
     * @param  string $discountHandle discountHandle (optional)
     * @param  string[] $discountCurrency discountCurrency (optional)
     * @param  string $discountPercentage discountPercentage (optional)
     * @param  string $eligibleCurrency eligibleCurrency (optional)
     * @param  string $code code (optional)
     * @param  string $name name (optional)
     * @param  string $allPlans allPlans (optional)
     * @param  string $maxRedemptions maxRedemptions (optional)
     * @param  string $redemptions redemptions (optional)
     * @param  string $validUntil validUntil (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\CouponList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getCouponList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $type = null, $expireReason = null, $discountHandle = null, $discountCurrency = null, $discountPercentage = null, $eligibleCurrency = null, $code = null, $name = null, $allPlans = null, $maxRedemptions = null, $redemptions = null, $validUntil = null, string $contentType = self::contentTypes['getCouponList'][0])
    {
        list($response) = $this->getCouponListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $expireReason, $discountHandle, $discountCurrency, $discountPercentage, $eligibleCurrency, $code, $name, $allPlans, $maxRedemptions, $redemptions, $validUntil, $contentType);
        return $response;
    }

    /**
     * Operation getCouponListWithHttpInfo
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $discountHandle (optional)
     * @param  string[] $discountCurrency (optional)
     * @param  string $discountPercentage (optional)
     * @param  string $eligibleCurrency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $allPlans (optional)
     * @param  string $maxRedemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $validUntil (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\CouponList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $type = null, $expireReason = null, $discountHandle = null, $discountCurrency = null, $discountPercentage = null, $eligibleCurrency = null, $code = null, $name = null, $allPlans = null, $maxRedemptions = null, $redemptions = null, $validUntil = null, string $contentType = self::contentTypes['getCouponList'][0])
    {
        $request = $this->getCouponListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $expireReason, $discountHandle, $discountCurrency, $discountPercentage, $eligibleCurrency, $code, $name, $allPlans, $maxRedemptions, $redemptions, $validUntil, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\CouponList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\CouponList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\CouponList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\CouponList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\CouponList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponListAsync
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $discountHandle (optional)
     * @param  string[] $discountCurrency (optional)
     * @param  string $discountPercentage (optional)
     * @param  string $eligibleCurrency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $allPlans (optional)
     * @param  string $maxRedemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $validUntil (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $type = null, $expireReason = null, $discountHandle = null, $discountCurrency = null, $discountPercentage = null, $eligibleCurrency = null, $code = null, $name = null, $allPlans = null, $maxRedemptions = null, $redemptions = null, $validUntil = null, string $contentType = self::contentTypes['getCouponList'][0])
    {
        return $this->getCouponListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $expireReason, $discountHandle, $discountCurrency, $discountPercentage, $eligibleCurrency, $code, $name, $allPlans, $maxRedemptions, $redemptions, $validUntil, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponListAsyncWithHttpInfo
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $discountHandle (optional)
     * @param  string[] $discountCurrency (optional)
     * @param  string $discountPercentage (optional)
     * @param  string $eligibleCurrency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $allPlans (optional)
     * @param  string $maxRedemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $validUntil (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $type = null, $expireReason = null, $discountHandle = null, $discountCurrency = null, $discountPercentage = null, $eligibleCurrency = null, $code = null, $name = null, $allPlans = null, $maxRedemptions = null, $redemptions = null, $validUntil = null, string $contentType = self::contentTypes['getCouponList'][0])
    {
        $returnType = '\Frisbii\Model\CouponList';
        $request = $this->getCouponListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $type, $expireReason, $discountHandle, $discountCurrency, $discountPercentage, $eligibleCurrency, $code, $name, $allPlans, $maxRedemptions, $redemptions, $validUntil, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $discountHandle (optional)
     * @param  string[] $discountCurrency (optional)
     * @param  string $discountPercentage (optional)
     * @param  string $eligibleCurrency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $allPlans (optional)
     * @param  string $maxRedemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $validUntil (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $type = null, $expireReason = null, $discountHandle = null, $discountCurrency = null, $discountPercentage = null, $eligibleCurrency = null, $code = null, $name = null, $allPlans = null, $maxRedemptions = null, $redemptions = null, $validUntil = null, string $contentType = self::contentTypes['getCouponList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCouponList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCouponList, must be bigger than or equal to 10.');
        }
        




        

        

        









        $resourcePath = '/v1/list/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expireReason,
            'expire_reason', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $discountHandle,
            'discount_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $discountCurrency,
            'discount_currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $discountPercentage,
            'discount_percentage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eligibleCurrency,
            'eligible_currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allPlans,
            'all_plans', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maxRedemptions,
            'max_redemptions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $redemptions,
            'redemptions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validUntil,
            'valid_until', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerList
     *
     * Get list of customers
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $handleContains handleContains (optional)
     * @param  string $name name (optional)
     * @param  string $email email (optional)
     * @param  string $emailPrefix emailPrefix (optional)
     * @param  string $firstName firstName (optional)
     * @param  string $lastName lastName (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $postalCode postalCode (optional)
     * @param  string $city city (optional)
     * @param  string $country country (optional)
     * @param  string $phone phone (optional)
     * @param  string $company company (optional)
     * @param  string $vat vat (optional)
     * @param  string $debtorId debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\CustomerList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getCustomerList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $name = null, $email = null, $emailPrefix = null, $firstName = null, $lastName = null, $address = null, $address2 = null, $postalCode = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtorId = null, string $contentType = self::contentTypes['getCustomerList'][0])
    {
        list($response) = $this->getCustomerListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $name, $email, $emailPrefix, $firstName, $lastName, $address, $address2, $postalCode, $city, $country, $phone, $company, $vat, $debtorId, $contentType);
        return $response;
    }

    /**
     * Operation getCustomerListWithHttpInfo
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $emailPrefix (optional)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postalCode (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\CustomerList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $name = null, $email = null, $emailPrefix = null, $firstName = null, $lastName = null, $address = null, $address2 = null, $postalCode = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtorId = null, string $contentType = self::contentTypes['getCustomerList'][0])
    {
        $request = $this->getCustomerListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $name, $email, $emailPrefix, $firstName, $lastName, $address, $address2, $postalCode, $city, $country, $phone, $company, $vat, $debtorId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\CustomerList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\CustomerList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\CustomerList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\CustomerList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\CustomerList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerListAsync
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $emailPrefix (optional)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postalCode (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $name = null, $email = null, $emailPrefix = null, $firstName = null, $lastName = null, $address = null, $address2 = null, $postalCode = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtorId = null, string $contentType = self::contentTypes['getCustomerList'][0])
    {
        return $this->getCustomerListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $name, $email, $emailPrefix, $firstName, $lastName, $address, $address2, $postalCode, $city, $country, $phone, $company, $vat, $debtorId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerListAsyncWithHttpInfo
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $emailPrefix (optional)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postalCode (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $name = null, $email = null, $emailPrefix = null, $firstName = null, $lastName = null, $address = null, $address2 = null, $postalCode = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtorId = null, string $contentType = self::contentTypes['getCustomerList'][0])
    {
        $returnType = '\Frisbii\Model\CustomerList';
        $request = $this->getCustomerListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $name, $email, $emailPrefix, $firstName, $lastName, $address, $address2, $postalCode, $city, $country, $phone, $company, $vat, $debtorId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $emailPrefix (optional)
     * @param  string $firstName (optional)
     * @param  string $lastName (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postalCode (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $name = null, $email = null, $emailPrefix = null, $firstName = null, $lastName = null, $address = null, $address2 = null, $postalCode = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtorId = null, string $contentType = self::contentTypes['getCustomerList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCustomerList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getCustomerList, must be bigger than or equal to 10.');
        }
        




















        $resourcePath = '/v1/list/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handleContains,
            'handle_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emailPrefix,
            'email_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstName,
            'first_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastName,
            'last_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address2,
            'address2', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postalCode,
            'postal_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city,
            'city', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone,
            'phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $company,
            'company', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vat,
            'vat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $debtorId,
            'debtor_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscountList
     *
     * Get list of discounts
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $state state (optional)
     * @param  string[] $applyTo applyTo (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $amount amount (optional)
     * @param  string $percentage percentage (optional)
     * @param  string $fixedCount fixedCount (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDiscountList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\DiscountList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getDiscountList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $applyTo = null, $name = null, $description = null, $amount = null, $percentage = null, $fixedCount = null, $currency = null, string $contentType = self::contentTypes['getDiscountList'][0])
    {
        list($response) = $this->getDiscountListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $applyTo, $name, $description, $amount, $percentage, $fixedCount, $currency, $contentType);
        return $response;
    }

    /**
     * Operation getDiscountListWithHttpInfo
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional)
     * @param  string[] $applyTo (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixedCount (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDiscountList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\DiscountList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscountListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $applyTo = null, $name = null, $description = null, $amount = null, $percentage = null, $fixedCount = null, $currency = null, string $contentType = self::contentTypes['getDiscountList'][0])
    {
        $request = $this->getDiscountListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $applyTo, $name, $description, $amount, $percentage, $fixedCount, $currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\DiscountList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\DiscountList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\DiscountList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\DiscountList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\DiscountList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscountListAsync
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional)
     * @param  string[] $applyTo (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixedCount (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDiscountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscountListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $applyTo = null, $name = null, $description = null, $amount = null, $percentage = null, $fixedCount = null, $currency = null, string $contentType = self::contentTypes['getDiscountList'][0])
    {
        return $this->getDiscountListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $applyTo, $name, $description, $amount, $percentage, $fixedCount, $currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscountListAsyncWithHttpInfo
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional)
     * @param  string[] $applyTo (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixedCount (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDiscountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscountListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $applyTo = null, $name = null, $description = null, $amount = null, $percentage = null, $fixedCount = null, $currency = null, string $contentType = self::contentTypes['getDiscountList'][0])
    {
        $returnType = '\Frisbii\Model\DiscountList';
        $request = $this->getDiscountListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $state, $applyTo, $name, $description, $amount, $percentage, $fixedCount, $currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscountList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $state (optional)
     * @param  string[] $applyTo (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixedCount (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDiscountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDiscountListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $state = null, $applyTo = null, $name = null, $description = null, $amount = null, $percentage = null, $fixedCount = null, $currency = null, string $contentType = self::contentTypes['getDiscountList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getDiscountList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getDiscountList, must be bigger than or equal to 10.');
        }
        





        





        

        $resourcePath = '/v1/list/discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $applyTo,
            'apply_to', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $percentage,
            'percentage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixedCount,
            'fixed_count', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDisputeList
     *
     * Get list of disputes
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $id Disputes id (optional)
     * @param  string $invoice Disputes for invoices by invoice handle (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $outcome outcome (optional)
     * @param  string[] $reason reason (optional)
     * @param  string $waitingFor waitingFor (optional)
     * @param  string $amount amount (optional)
     * @param  string $outcomeAmount outcomeAmount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\DisputeList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getDisputeList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $invoice = null, $state = null, $outcome = null, $reason = null, $waitingFor = null, $amount = null, $outcomeAmount = null, string $contentType = self::contentTypes['getDisputeList'][0])
    {
        list($response) = $this->getDisputeListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $id, $invoice, $state, $outcome, $reason, $waitingFor, $amount, $outcomeAmount, $contentType);
        return $response;
    }

    /**
     * Operation getDisputeListWithHttpInfo
     *
     * Get list of disputes
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id Disputes id (optional)
     * @param  string $invoice Disputes for invoices by invoice handle (optional)
     * @param  string[] $state (optional)
     * @param  string[] $outcome (optional)
     * @param  string[] $reason (optional)
     * @param  string $waitingFor (optional)
     * @param  string $amount (optional)
     * @param  string $outcomeAmount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\DisputeList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDisputeListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $invoice = null, $state = null, $outcome = null, $reason = null, $waitingFor = null, $amount = null, $outcomeAmount = null, string $contentType = self::contentTypes['getDisputeList'][0])
    {
        $request = $this->getDisputeListRequest($from, $to, $interval, $size, $nextPageToken, $range, $id, $invoice, $state, $outcome, $reason, $waitingFor, $amount, $outcomeAmount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\DisputeList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\DisputeList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\DisputeList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\DisputeList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\DisputeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDisputeListAsync
     *
     * Get list of disputes
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id Disputes id (optional)
     * @param  string $invoice Disputes for invoices by invoice handle (optional)
     * @param  string[] $state (optional)
     * @param  string[] $outcome (optional)
     * @param  string[] $reason (optional)
     * @param  string $waitingFor (optional)
     * @param  string $amount (optional)
     * @param  string $outcomeAmount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisputeListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $invoice = null, $state = null, $outcome = null, $reason = null, $waitingFor = null, $amount = null, $outcomeAmount = null, string $contentType = self::contentTypes['getDisputeList'][0])
    {
        return $this->getDisputeListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $id, $invoice, $state, $outcome, $reason, $waitingFor, $amount, $outcomeAmount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDisputeListAsyncWithHttpInfo
     *
     * Get list of disputes
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id Disputes id (optional)
     * @param  string $invoice Disputes for invoices by invoice handle (optional)
     * @param  string[] $state (optional)
     * @param  string[] $outcome (optional)
     * @param  string[] $reason (optional)
     * @param  string $waitingFor (optional)
     * @param  string $amount (optional)
     * @param  string $outcomeAmount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisputeListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $invoice = null, $state = null, $outcome = null, $reason = null, $waitingFor = null, $amount = null, $outcomeAmount = null, string $contentType = self::contentTypes['getDisputeList'][0])
    {
        $returnType = '\Frisbii\Model\DisputeList';
        $request = $this->getDisputeListRequest($from, $to, $interval, $size, $nextPageToken, $range, $id, $invoice, $state, $outcome, $reason, $waitingFor, $amount, $outcomeAmount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDisputeList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id Disputes id (optional)
     * @param  string $invoice Disputes for invoices by invoice handle (optional)
     * @param  string[] $state (optional)
     * @param  string[] $outcome (optional)
     * @param  string[] $reason (optional)
     * @param  string $waitingFor (optional)
     * @param  string $amount (optional)
     * @param  string $outcomeAmount (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDisputeList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDisputeListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $invoice = null, $state = null, $outcome = null, $reason = null, $waitingFor = null, $amount = null, $outcomeAmount = null, string $contentType = self::contentTypes['getDisputeList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getDisputeList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getDisputeList, must be bigger than or equal to 10.');
        }
        




        
        
        




        $resourcePath = '/v1/list/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice,
            'invoice', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $outcome,
            'outcome', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reason,
            'reason', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $waitingFor,
            'waiting_for', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $outcomeAmount,
            'outcome_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntitlementList
     *
     * Get list of entitlements
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitlementList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\EntitlementListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getEntitlementList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $name = null, $description = null, string $contentType = self::contentTypes['getEntitlementList'][0])
    {
        list($response) = $this->getEntitlementListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $name, $description, $contentType);
        return $response;
    }

    /**
     * Operation getEntitlementListWithHttpInfo
     *
     * Get list of entitlements
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitlementList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\EntitlementListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitlementListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $name = null, $description = null, string $contentType = self::contentTypes['getEntitlementList'][0])
    {
        $request = $this->getEntitlementListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $name, $description, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\EntitlementListDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\EntitlementListDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\EntitlementListDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\EntitlementListDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\EntitlementListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitlementListAsync
     *
     * Get list of entitlements
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitlementList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitlementListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $name = null, $description = null, string $contentType = self::contentTypes['getEntitlementList'][0])
    {
        return $this->getEntitlementListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $name, $description, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitlementListAsyncWithHttpInfo
     *
     * Get list of entitlements
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitlementList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitlementListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $name = null, $description = null, string $contentType = self::contentTypes['getEntitlementList'][0])
    {
        $returnType = '\Frisbii\Model\EntitlementListDto';
        $request = $this->getEntitlementListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $name, $description, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitlementList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntitlementList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEntitlementListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $name = null, $description = null, string $contentType = self::contentTypes['getEntitlementList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getEntitlementList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getEntitlementList, must be bigger than or equal to 10.');
        }
        






        $resourcePath = '/v1/list/entitlement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceCreditNoteList
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $accountingNumber Credit note exact accounting number (optional)
     * @param  string $accountingNumberPrefix Credit note accounting number prefix (optional)
     * @param  string $accountingNumberContains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtorId debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceCreditNoteList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\InvoiceCreditNoteListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getInvoiceCreditNoteList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtorId = null, string $contentType = self::contentTypes['getInvoiceCreditNoteList'][0])
    {
        list($response) = $this->getInvoiceCreditNoteListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $amount, $customer, $currency, $subscription, $invoice, $debtorId, $contentType);
        return $response;
    }

    /**
     * Operation getInvoiceCreditNoteListWithHttpInfo
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $accountingNumber Credit note exact accounting number (optional)
     * @param  string $accountingNumberPrefix Credit note accounting number prefix (optional)
     * @param  string $accountingNumberContains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceCreditNoteList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\InvoiceCreditNoteListDto|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceCreditNoteListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtorId = null, string $contentType = self::contentTypes['getInvoiceCreditNoteList'][0])
    {
        $request = $this->getInvoiceCreditNoteListRequest($from, $to, $interval, $size, $nextPageToken, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $amount, $customer, $currency, $subscription, $invoice, $debtorId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\InvoiceCreditNoteListDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\InvoiceCreditNoteListDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\InvoiceCreditNoteListDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\InvoiceCreditNoteListDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\InvoiceCreditNoteListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceCreditNoteListAsync
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $accountingNumber Credit note exact accounting number (optional)
     * @param  string $accountingNumberPrefix Credit note accounting number prefix (optional)
     * @param  string $accountingNumberContains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceCreditNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceCreditNoteListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtorId = null, string $contentType = self::contentTypes['getInvoiceCreditNoteList'][0])
    {
        return $this->getInvoiceCreditNoteListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $amount, $customer, $currency, $subscription, $invoice, $debtorId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceCreditNoteListAsyncWithHttpInfo
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $accountingNumber Credit note exact accounting number (optional)
     * @param  string $accountingNumberPrefix Credit note accounting number prefix (optional)
     * @param  string $accountingNumberContains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceCreditNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceCreditNoteListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtorId = null, string $contentType = self::contentTypes['getInvoiceCreditNoteList'][0])
    {
        $returnType = '\Frisbii\Model\InvoiceCreditNoteListDto';
        $request = $this->getInvoiceCreditNoteListRequest($from, $to, $interval, $size, $nextPageToken, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $amount, $customer, $currency, $subscription, $invoice, $debtorId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceCreditNoteList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $accountingNumber Credit note exact accounting number (optional)
     * @param  string $accountingNumberPrefix Credit note accounting number prefix (optional)
     * @param  string $accountingNumberContains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtorId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceCreditNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceCreditNoteListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtorId = null, string $contentType = self::contentTypes['getInvoiceCreditNoteList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceCreditNoteList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceCreditNoteList, must be bigger than or equal to 10.');
        }
        






        




        $resourcePath = '/v1/list/credit_note';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumber,
            'accounting_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberPrefix,
            'accounting_number_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberContains,
            'accounting_number_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscription,
            'subscription', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice,
            'invoice', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $debtorId,
            'debtor_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceList
     *
     * Get list of invoices
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $handleContains handleContains (optional)
     * @param  string $accountingNumber accountingNumber (optional)
     * @param  string $accountingNumberPrefix accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains accountingNumberContains (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $excludeState excludeState (optional)
     * @param  string $customer customer (optional)
     * @param  string $amount amount (optional)
     * @param  string $refundedAmount refundedAmount (optional)
     * @param  string $authorizedAmount authorizedAmount (optional)
     * @param  string[] $currency currency (optional)
     * @param  bool $partialSettled partialSettled (optional)
     * @param  string $settledAmount settledAmount (optional)
     * @param  string $debtorId debtorId (optional)
     * @param  string[] $type type (optional)
     * @param  string $subscription subscription (optional)
     * @param  string $plan plan (optional)
     * @param  string $dunningStart dunningStart (optional)
     * @param  string $dunningSuccess dunningSuccess (optional)
     * @param  int $number number (optional)
     * @param  string $due due (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\InvoiceList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getInvoiceList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, $type = null, $subscription = null, $plan = null, $dunningStart = null, $dunningSuccess = null, $number = null, $due = null, string $contentType = self::contentTypes['getInvoiceList'][0])
    {
        list($response) = $this->getInvoiceListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $type, $subscription, $plan, $dunningStart, $dunningSuccess, $number, $due, $contentType);
        return $response;
    }

    /**
     * Operation getInvoiceListWithHttpInfo
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunningStart (optional)
     * @param  string $dunningSuccess (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\InvoiceList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, $type = null, $subscription = null, $plan = null, $dunningStart = null, $dunningSuccess = null, $number = null, $due = null, string $contentType = self::contentTypes['getInvoiceList'][0])
    {
        $request = $this->getInvoiceListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $type, $subscription, $plan, $dunningStart, $dunningSuccess, $number, $due, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\InvoiceList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\InvoiceList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\InvoiceList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\InvoiceList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\InvoiceList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceListAsync
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunningStart (optional)
     * @param  string $dunningSuccess (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, $type = null, $subscription = null, $plan = null, $dunningStart = null, $dunningSuccess = null, $number = null, $due = null, string $contentType = self::contentTypes['getInvoiceList'][0])
    {
        return $this->getInvoiceListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $type, $subscription, $plan, $dunningStart, $dunningSuccess, $number, $due, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceListAsyncWithHttpInfo
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunningStart (optional)
     * @param  string $dunningSuccess (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, $type = null, $subscription = null, $plan = null, $dunningStart = null, $dunningSuccess = null, $number = null, $due = null, string $contentType = self::contentTypes['getInvoiceList'][0])
    {
        $returnType = '\Frisbii\Model\InvoiceList';
        $request = $this->getInvoiceListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $accountingNumber, $accountingNumberPrefix, $accountingNumberContains, $state, $excludeState, $customer, $amount, $refundedAmount, $authorizedAmount, $currency, $partialSettled, $settledAmount, $debtorId, $type, $subscription, $plan, $dunningStart, $dunningSuccess, $number, $due, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $accountingNumber (optional)
     * @param  string $accountingNumberPrefix (optional)
     * @param  string $accountingNumberContains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $excludeState (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $authorizedAmount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partialSettled (optional)
     * @param  string $settledAmount (optional)
     * @param  string $debtorId (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunningStart (optional)
     * @param  string $dunningSuccess (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $accountingNumber = null, $accountingNumberPrefix = null, $accountingNumberContains = null, $state = null, $excludeState = null, $customer = null, $amount = null, $refundedAmount = null, $authorizedAmount = null, $currency = null, $partialSettled = null, $settledAmount = null, $debtorId = null, $type = null, $subscription = null, $plan = null, $dunningStart = null, $dunningSuccess = null, $number = null, $due = null, string $contentType = self::contentTypes['getInvoiceList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getInvoiceList, must be bigger than or equal to 10.');
        }
        








        
        




        



        




        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling ListApi.getInvoiceList, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/list/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handleContains,
            'handle_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumber,
            'accounting_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberPrefix,
            'accounting_number_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingNumberContains,
            'accounting_number_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludeState,
            'exclude_state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refundedAmount,
            'refunded_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorizedAmount,
            'authorized_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partialSettled,
            'partial_settled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $settledAmount,
            'settled_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $debtorId,
            'debtor_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscription,
            'subscription', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plan,
            'plan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dunningStart,
            'dunning_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dunningSuccess,
            'dunning_success', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $due,
            'due', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMeteredBillingProductList
     *
     * Get list of metered billing products
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $name name (optional)
     * @param  string $state state (optional)
     * @param  string $currency currency (optional)
     * @param  string $pricingModel pricingModel (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredBillingProductList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\MeteredBillingProductList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getMeteredBillingProductList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $handle = null, $handlePrefix = null, $name = null, $state = null, $currency = null, $pricingModel = null, string $contentType = self::contentTypes['getMeteredBillingProductList'][0])
    {
        list($response) = $this->getMeteredBillingProductListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $handle, $handlePrefix, $name, $state, $currency, $pricingModel, $contentType);
        return $response;
    }

    /**
     * Operation getMeteredBillingProductListWithHttpInfo
     *
     * Get list of metered billing products
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $name (optional)
     * @param  string $state (optional)
     * @param  string $currency (optional)
     * @param  string $pricingModel (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredBillingProductList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\MeteredBillingProductList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMeteredBillingProductListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $handle = null, $handlePrefix = null, $name = null, $state = null, $currency = null, $pricingModel = null, string $contentType = self::contentTypes['getMeteredBillingProductList'][0])
    {
        $request = $this->getMeteredBillingProductListRequest($from, $to, $interval, $size, $nextPageToken, $handle, $handlePrefix, $name, $state, $currency, $pricingModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\MeteredBillingProductList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\MeteredBillingProductList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\MeteredBillingProductList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\MeteredBillingProductList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\MeteredBillingProductList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMeteredBillingProductListAsync
     *
     * Get list of metered billing products
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $name (optional)
     * @param  string $state (optional)
     * @param  string $currency (optional)
     * @param  string $pricingModel (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredBillingProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeteredBillingProductListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $handle = null, $handlePrefix = null, $name = null, $state = null, $currency = null, $pricingModel = null, string $contentType = self::contentTypes['getMeteredBillingProductList'][0])
    {
        return $this->getMeteredBillingProductListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $handle, $handlePrefix, $name, $state, $currency, $pricingModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMeteredBillingProductListAsyncWithHttpInfo
     *
     * Get list of metered billing products
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $name (optional)
     * @param  string $state (optional)
     * @param  string $currency (optional)
     * @param  string $pricingModel (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredBillingProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeteredBillingProductListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $handle = null, $handlePrefix = null, $name = null, $state = null, $currency = null, $pricingModel = null, string $contentType = self::contentTypes['getMeteredBillingProductList'][0])
    {
        $returnType = '\Frisbii\Model\MeteredBillingProductList';
        $request = $this->getMeteredBillingProductListRequest($from, $to, $interval, $size, $nextPageToken, $handle, $handlePrefix, $name, $state, $currency, $pricingModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMeteredBillingProductList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $name (optional)
     * @param  string $state (optional)
     * @param  string $currency (optional)
     * @param  string $pricingModel (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredBillingProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMeteredBillingProductListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $handle = null, $handlePrefix = null, $name = null, $state = null, $currency = null, $pricingModel = null, string $contentType = self::contentTypes['getMeteredBillingProductList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getMeteredBillingProductList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getMeteredBillingProductList, must be bigger than or equal to 10.');
        }
        








        $resourcePath = '/v1/list/metered_billing_product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pricingModel,
            'pricing_model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMeteredUsageRecordList
     *
     * Get list of metered usage records
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $subscriptionHandle subscriptionHandle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredUsageRecordList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\SubscriptionMeteredUsageRecordList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getMeteredUsageRecordList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $subscriptionHandle = null, string $contentType = self::contentTypes['getMeteredUsageRecordList'][0])
    {
        list($response) = $this->getMeteredUsageRecordListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $subscriptionHandle, $contentType);
        return $response;
    }

    /**
     * Operation getMeteredUsageRecordListWithHttpInfo
     *
     * Get list of metered usage records
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $subscriptionHandle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredUsageRecordList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\SubscriptionMeteredUsageRecordList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMeteredUsageRecordListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $subscriptionHandle = null, string $contentType = self::contentTypes['getMeteredUsageRecordList'][0])
    {
        $request = $this->getMeteredUsageRecordListRequest($from, $to, $interval, $size, $nextPageToken, $subscriptionHandle, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\SubscriptionMeteredUsageRecordList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\SubscriptionMeteredUsageRecordList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\SubscriptionMeteredUsageRecordList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\SubscriptionMeteredUsageRecordList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\SubscriptionMeteredUsageRecordList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMeteredUsageRecordListAsync
     *
     * Get list of metered usage records
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $subscriptionHandle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredUsageRecordList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeteredUsageRecordListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $subscriptionHandle = null, string $contentType = self::contentTypes['getMeteredUsageRecordList'][0])
    {
        return $this->getMeteredUsageRecordListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $subscriptionHandle, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMeteredUsageRecordListAsyncWithHttpInfo
     *
     * Get list of metered usage records
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $subscriptionHandle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredUsageRecordList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeteredUsageRecordListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $subscriptionHandle = null, string $contentType = self::contentTypes['getMeteredUsageRecordList'][0])
    {
        $returnType = '\Frisbii\Model\SubscriptionMeteredUsageRecordList';
        $request = $this->getMeteredUsageRecordListRequest($from, $to, $interval, $size, $nextPageToken, $subscriptionHandle, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMeteredUsageRecordList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $subscriptionHandle (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMeteredUsageRecordList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMeteredUsageRecordListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $subscriptionHandle = null, string $contentType = self::contentTypes['getMeteredUsageRecordList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getMeteredUsageRecordList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getMeteredUsageRecordList, must be bigger than or equal to 10.');
        }
        



        $resourcePath = '/v1/list/metered_usage_record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscriptionHandle,
            'subscription_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodList
     *
     * Get list of payment methods
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $id id (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $paymentType paymentType (optional)
     * @param  string $customer customer (optional)
     * @param  string $subscription subscription (optional)
     * @param  string $reference reference (optional)
     * @param  string $failed failed (optional)
     * @param  string[] $cardType cardType (optional)
     * @param  string[] $transactionCardType transactionCardType (optional)
     * @param  string $cardPrefix cardPrefix (optional)
     * @param  string $cardPostfix cardPostfix (optional)
     * @param  string $cardFingerprint cardFingerprint (optional)
     * @param  string[] $cardCountry cardCountry (optional)
     * @param  string $cardGateway cardGateway (optional)
     * @param  string $cardAgreement cardAgreement (optional)
     * @param  string $offlineAgreementHandle offlineAgreementHandle (optional)
     * @param  string $mpsExternalId mpsExternalId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\PaymentMethodList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getPaymentMethodList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $state = null, $paymentType = null, $customer = null, $subscription = null, $reference = null, $failed = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $cardAgreement = null, $offlineAgreementHandle = null, $mpsExternalId = null, string $contentType = self::contentTypes['getPaymentMethodList'][0])
    {
        list($response) = $this->getPaymentMethodListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $id, $state, $paymentType, $customer, $subscription, $reference, $failed, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $cardAgreement, $offlineAgreementHandle, $mpsExternalId, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentMethodListWithHttpInfo
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $cardAgreement (optional)
     * @param  string $offlineAgreementHandle (optional)
     * @param  string $mpsExternalId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\PaymentMethodList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $state = null, $paymentType = null, $customer = null, $subscription = null, $reference = null, $failed = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $cardAgreement = null, $offlineAgreementHandle = null, $mpsExternalId = null, string $contentType = self::contentTypes['getPaymentMethodList'][0])
    {
        $request = $this->getPaymentMethodListRequest($from, $to, $interval, $size, $nextPageToken, $range, $id, $state, $paymentType, $customer, $subscription, $reference, $failed, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $cardAgreement, $offlineAgreementHandle, $mpsExternalId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\PaymentMethodList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\PaymentMethodList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\PaymentMethodList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\PaymentMethodList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\PaymentMethodList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodListAsync
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $cardAgreement (optional)
     * @param  string $offlineAgreementHandle (optional)
     * @param  string $mpsExternalId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $state = null, $paymentType = null, $customer = null, $subscription = null, $reference = null, $failed = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $cardAgreement = null, $offlineAgreementHandle = null, $mpsExternalId = null, string $contentType = self::contentTypes['getPaymentMethodList'][0])
    {
        return $this->getPaymentMethodListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $id, $state, $paymentType, $customer, $subscription, $reference, $failed, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $cardAgreement, $offlineAgreementHandle, $mpsExternalId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodListAsyncWithHttpInfo
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $cardAgreement (optional)
     * @param  string $offlineAgreementHandle (optional)
     * @param  string $mpsExternalId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $state = null, $paymentType = null, $customer = null, $subscription = null, $reference = null, $failed = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $cardAgreement = null, $offlineAgreementHandle = null, $mpsExternalId = null, string $contentType = self::contentTypes['getPaymentMethodList'][0])
    {
        $returnType = '\Frisbii\Model\PaymentMethodList';
        $request = $this->getPaymentMethodListRequest($from, $to, $interval, $size, $nextPageToken, $range, $id, $state, $paymentType, $customer, $subscription, $reference, $failed, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $cardAgreement, $offlineAgreementHandle, $mpsExternalId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $cardAgreement (optional)
     * @param  string $offlineAgreementHandle (optional)
     * @param  string $mpsExternalId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentMethodListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $id = null, $state = null, $paymentType = null, $customer = null, $subscription = null, $reference = null, $failed = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $cardAgreement = null, $offlineAgreementHandle = null, $mpsExternalId = null, string $contentType = self::contentTypes['getPaymentMethodList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPaymentMethodList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPaymentMethodList, must be bigger than or equal to 10.');
        }
        



        
        




        
        



        





        $resourcePath = '/v1/list/payment_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentType,
            'payment_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscription,
            'subscription', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference,
            'reference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $failed,
            'failed', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardType,
            'card_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionCardType,
            'transaction_card_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPrefix,
            'card_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPostfix,
            'card_postfix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardFingerprint,
            'card_fingerprint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardCountry,
            'card_country', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardGateway,
            'card_gateway', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardAgreement,
            'card_agreement', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offlineAgreementHandle,
            'offline_agreement_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mpsExternalId,
            'mps_external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutList
     *
     * Get list of payouts
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $handleContains handleContains (optional)
     * @param  string $customer customer (optional)
     * @param  string[] $state state (optional)
     * @param  string $amount amount (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $card card (optional)
     * @param  string $cardType cardType (optional)
     * @param  string $cardPrefix cardPrefix (optional)
     * @param  string $cardPostfix cardPostfix (optional)
     * @param  string $cardFingerprint cardFingerprint (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\PayoutList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getPayoutList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $cardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, string $contentType = self::contentTypes['getPayoutList'][0])
    {
        list($response) = $this->getPayoutListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $state, $amount, $currency, $card, $cardType, $cardPrefix, $cardPostfix, $cardFingerprint, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutListWithHttpInfo
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $cardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\PayoutList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $cardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, string $contentType = self::contentTypes['getPayoutList'][0])
    {
        $request = $this->getPayoutListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $state, $amount, $currency, $card, $cardType, $cardPrefix, $cardPostfix, $cardFingerprint, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\PayoutList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\PayoutList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\PayoutList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\PayoutList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\PayoutList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutListAsync
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $cardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $cardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, string $contentType = self::contentTypes['getPayoutList'][0])
    {
        return $this->getPayoutListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $state, $amount, $currency, $card, $cardType, $cardPrefix, $cardPostfix, $cardFingerprint, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutListAsyncWithHttpInfo
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $cardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $cardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, string $contentType = self::contentTypes['getPayoutList'][0])
    {
        $returnType = '\Frisbii\Model\PayoutList';
        $request = $this->getPayoutListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $state, $amount, $currency, $card, $cardType, $cardPrefix, $cardPostfix, $cardFingerprint, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $cardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $cardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, string $contentType = self::contentTypes['getPayoutList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPayoutList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPayoutList, must be bigger than or equal to 10.');
        }
        






        

        






        $resourcePath = '/v1/list/payout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handleContains,
            'handle_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $card,
            'card', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardType,
            'card_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPrefix,
            'card_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPostfix,
            'card_postfix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardFingerprint,
            'card_fingerprint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlanList
     *
     * Get list of plans
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string[] $handles handles (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $scheduleType scheduleType (optional)
     * @param  string[] $partialPeriodHandling partialPeriodHandling (optional)
     * @param  string[] $setupFeeHandling setupFeeHandling (optional)
     * @param  string[] $fixedLifeTimeUnit fixedLifeTimeUnit (optional)
     * @param  string[] $trialIntervalUnit trialIntervalUnit (optional)
     * @param  string $dunningPlanHandle dunningPlanHandle (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $setupFeeText setupFeeText (optional)
     * @param  string $amount amount (optional)
     * @param  string $quantity quantity (optional)
     * @param  string $fixedCount fixedCount (optional)
     * @param  string $fixedLifeTimeLength fixedLifeTimeLength (optional)
     * @param  string $trialIntervalLength trialIntervalLength (optional)
     * @param  string $intervalLength intervalLength (optional)
     * @param  string $scheduleFixedDay scheduleFixedDay (optional)
     * @param  string $renewalReminderEmailDays renewalReminderEmailDays (optional)
     * @param  string $trialReminderEmailDays trialReminderEmailDays (optional)
     * @param  string $baseMonth baseMonth (optional)
     * @param  string $noticePeriods noticePeriods (optional)
     * @param  string $minimumProratedAmount minimumProratedAmount (optional)
     * @param  string $fixationPeriods fixationPeriods (optional)
     * @param  string $setupFee setupFee (optional)
     * @param  string $amountInclVat amountInclVat (optional)
     * @param  string $noticePeriodsAfterCurrent noticePeriodsAfterCurrent (optional)
     * @param  string $fixationPeriodsFull fixationPeriodsFull (optional)
     * @param  string $includeZeroAmount includeZeroAmount (optional)
     * @param  string $partialProrationDays partialProrationDays (optional)
     * @param  string $fixedTrialDays fixedTrialDays (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlanList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\PlanList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getPlanList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handles = null, $state = null, $scheduleType = null, $partialPeriodHandling = null, $setupFeeHandling = null, $fixedLifeTimeUnit = null, $trialIntervalUnit = null, $dunningPlanHandle = null, $name = null, $description = null, $setupFeeText = null, $amount = null, $quantity = null, $fixedCount = null, $fixedLifeTimeLength = null, $trialIntervalLength = null, $intervalLength = null, $scheduleFixedDay = null, $renewalReminderEmailDays = null, $trialReminderEmailDays = null, $baseMonth = null, $noticePeriods = null, $minimumProratedAmount = null, $fixationPeriods = null, $setupFee = null, $amountInclVat = null, $noticePeriodsAfterCurrent = null, $fixationPeriodsFull = null, $includeZeroAmount = null, $partialProrationDays = null, $fixedTrialDays = null, $currency = null, string $contentType = self::contentTypes['getPlanList'][0])
    {
        list($response) = $this->getPlanListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handles, $state, $scheduleType, $partialPeriodHandling, $setupFeeHandling, $fixedLifeTimeUnit, $trialIntervalUnit, $dunningPlanHandle, $name, $description, $setupFeeText, $amount, $quantity, $fixedCount, $fixedLifeTimeLength, $trialIntervalLength, $intervalLength, $scheduleFixedDay, $renewalReminderEmailDays, $trialReminderEmailDays, $baseMonth, $noticePeriods, $minimumProratedAmount, $fixationPeriods, $setupFee, $amountInclVat, $noticePeriodsAfterCurrent, $fixationPeriodsFull, $includeZeroAmount, $partialProrationDays, $fixedTrialDays, $currency, $contentType);
        return $response;
    }

    /**
     * Operation getPlanListWithHttpInfo
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $scheduleType (optional)
     * @param  string[] $partialPeriodHandling (optional)
     * @param  string[] $setupFeeHandling (optional)
     * @param  string[] $fixedLifeTimeUnit (optional)
     * @param  string[] $trialIntervalUnit (optional)
     * @param  string $dunningPlanHandle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setupFeeText (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixedCount (optional)
     * @param  string $fixedLifeTimeLength (optional)
     * @param  string $trialIntervalLength (optional)
     * @param  string $intervalLength (optional)
     * @param  string $scheduleFixedDay (optional)
     * @param  string $renewalReminderEmailDays (optional)
     * @param  string $trialReminderEmailDays (optional)
     * @param  string $baseMonth (optional)
     * @param  string $noticePeriods (optional)
     * @param  string $minimumProratedAmount (optional)
     * @param  string $fixationPeriods (optional)
     * @param  string $setupFee (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $noticePeriodsAfterCurrent (optional)
     * @param  string $fixationPeriodsFull (optional)
     * @param  string $includeZeroAmount (optional)
     * @param  string $partialProrationDays (optional)
     * @param  string $fixedTrialDays (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlanList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\PlanList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlanListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handles = null, $state = null, $scheduleType = null, $partialPeriodHandling = null, $setupFeeHandling = null, $fixedLifeTimeUnit = null, $trialIntervalUnit = null, $dunningPlanHandle = null, $name = null, $description = null, $setupFeeText = null, $amount = null, $quantity = null, $fixedCount = null, $fixedLifeTimeLength = null, $trialIntervalLength = null, $intervalLength = null, $scheduleFixedDay = null, $renewalReminderEmailDays = null, $trialReminderEmailDays = null, $baseMonth = null, $noticePeriods = null, $minimumProratedAmount = null, $fixationPeriods = null, $setupFee = null, $amountInclVat = null, $noticePeriodsAfterCurrent = null, $fixationPeriodsFull = null, $includeZeroAmount = null, $partialProrationDays = null, $fixedTrialDays = null, $currency = null, string $contentType = self::contentTypes['getPlanList'][0])
    {
        $request = $this->getPlanListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handles, $state, $scheduleType, $partialPeriodHandling, $setupFeeHandling, $fixedLifeTimeUnit, $trialIntervalUnit, $dunningPlanHandle, $name, $description, $setupFeeText, $amount, $quantity, $fixedCount, $fixedLifeTimeLength, $trialIntervalLength, $intervalLength, $scheduleFixedDay, $renewalReminderEmailDays, $trialReminderEmailDays, $baseMonth, $noticePeriods, $minimumProratedAmount, $fixationPeriods, $setupFee, $amountInclVat, $noticePeriodsAfterCurrent, $fixationPeriodsFull, $includeZeroAmount, $partialProrationDays, $fixedTrialDays, $currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\PlanList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\PlanList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\PlanList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\PlanList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\PlanList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlanListAsync
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $scheduleType (optional)
     * @param  string[] $partialPeriodHandling (optional)
     * @param  string[] $setupFeeHandling (optional)
     * @param  string[] $fixedLifeTimeUnit (optional)
     * @param  string[] $trialIntervalUnit (optional)
     * @param  string $dunningPlanHandle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setupFeeText (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixedCount (optional)
     * @param  string $fixedLifeTimeLength (optional)
     * @param  string $trialIntervalLength (optional)
     * @param  string $intervalLength (optional)
     * @param  string $scheduleFixedDay (optional)
     * @param  string $renewalReminderEmailDays (optional)
     * @param  string $trialReminderEmailDays (optional)
     * @param  string $baseMonth (optional)
     * @param  string $noticePeriods (optional)
     * @param  string $minimumProratedAmount (optional)
     * @param  string $fixationPeriods (optional)
     * @param  string $setupFee (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $noticePeriodsAfterCurrent (optional)
     * @param  string $fixationPeriodsFull (optional)
     * @param  string $includeZeroAmount (optional)
     * @param  string $partialProrationDays (optional)
     * @param  string $fixedTrialDays (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlanList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handles = null, $state = null, $scheduleType = null, $partialPeriodHandling = null, $setupFeeHandling = null, $fixedLifeTimeUnit = null, $trialIntervalUnit = null, $dunningPlanHandle = null, $name = null, $description = null, $setupFeeText = null, $amount = null, $quantity = null, $fixedCount = null, $fixedLifeTimeLength = null, $trialIntervalLength = null, $intervalLength = null, $scheduleFixedDay = null, $renewalReminderEmailDays = null, $trialReminderEmailDays = null, $baseMonth = null, $noticePeriods = null, $minimumProratedAmount = null, $fixationPeriods = null, $setupFee = null, $amountInclVat = null, $noticePeriodsAfterCurrent = null, $fixationPeriodsFull = null, $includeZeroAmount = null, $partialProrationDays = null, $fixedTrialDays = null, $currency = null, string $contentType = self::contentTypes['getPlanList'][0])
    {
        return $this->getPlanListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handles, $state, $scheduleType, $partialPeriodHandling, $setupFeeHandling, $fixedLifeTimeUnit, $trialIntervalUnit, $dunningPlanHandle, $name, $description, $setupFeeText, $amount, $quantity, $fixedCount, $fixedLifeTimeLength, $trialIntervalLength, $intervalLength, $scheduleFixedDay, $renewalReminderEmailDays, $trialReminderEmailDays, $baseMonth, $noticePeriods, $minimumProratedAmount, $fixationPeriods, $setupFee, $amountInclVat, $noticePeriodsAfterCurrent, $fixationPeriodsFull, $includeZeroAmount, $partialProrationDays, $fixedTrialDays, $currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlanListAsyncWithHttpInfo
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $scheduleType (optional)
     * @param  string[] $partialPeriodHandling (optional)
     * @param  string[] $setupFeeHandling (optional)
     * @param  string[] $fixedLifeTimeUnit (optional)
     * @param  string[] $trialIntervalUnit (optional)
     * @param  string $dunningPlanHandle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setupFeeText (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixedCount (optional)
     * @param  string $fixedLifeTimeLength (optional)
     * @param  string $trialIntervalLength (optional)
     * @param  string $intervalLength (optional)
     * @param  string $scheduleFixedDay (optional)
     * @param  string $renewalReminderEmailDays (optional)
     * @param  string $trialReminderEmailDays (optional)
     * @param  string $baseMonth (optional)
     * @param  string $noticePeriods (optional)
     * @param  string $minimumProratedAmount (optional)
     * @param  string $fixationPeriods (optional)
     * @param  string $setupFee (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $noticePeriodsAfterCurrent (optional)
     * @param  string $fixationPeriodsFull (optional)
     * @param  string $includeZeroAmount (optional)
     * @param  string $partialProrationDays (optional)
     * @param  string $fixedTrialDays (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlanList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handles = null, $state = null, $scheduleType = null, $partialPeriodHandling = null, $setupFeeHandling = null, $fixedLifeTimeUnit = null, $trialIntervalUnit = null, $dunningPlanHandle = null, $name = null, $description = null, $setupFeeText = null, $amount = null, $quantity = null, $fixedCount = null, $fixedLifeTimeLength = null, $trialIntervalLength = null, $intervalLength = null, $scheduleFixedDay = null, $renewalReminderEmailDays = null, $trialReminderEmailDays = null, $baseMonth = null, $noticePeriods = null, $minimumProratedAmount = null, $fixationPeriods = null, $setupFee = null, $amountInclVat = null, $noticePeriodsAfterCurrent = null, $fixationPeriodsFull = null, $includeZeroAmount = null, $partialProrationDays = null, $fixedTrialDays = null, $currency = null, string $contentType = self::contentTypes['getPlanList'][0])
    {
        $returnType = '\Frisbii\Model\PlanList';
        $request = $this->getPlanListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handles, $state, $scheduleType, $partialPeriodHandling, $setupFeeHandling, $fixedLifeTimeUnit, $trialIntervalUnit, $dunningPlanHandle, $name, $description, $setupFeeText, $amount, $quantity, $fixedCount, $fixedLifeTimeLength, $trialIntervalLength, $intervalLength, $scheduleFixedDay, $renewalReminderEmailDays, $trialReminderEmailDays, $baseMonth, $noticePeriods, $minimumProratedAmount, $fixationPeriods, $setupFee, $amountInclVat, $noticePeriodsAfterCurrent, $fixationPeriodsFull, $includeZeroAmount, $partialProrationDays, $fixedTrialDays, $currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlanList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $scheduleType (optional)
     * @param  string[] $partialPeriodHandling (optional)
     * @param  string[] $setupFeeHandling (optional)
     * @param  string[] $fixedLifeTimeUnit (optional)
     * @param  string[] $trialIntervalUnit (optional)
     * @param  string $dunningPlanHandle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setupFeeText (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixedCount (optional)
     * @param  string $fixedLifeTimeLength (optional)
     * @param  string $trialIntervalLength (optional)
     * @param  string $intervalLength (optional)
     * @param  string $scheduleFixedDay (optional)
     * @param  string $renewalReminderEmailDays (optional)
     * @param  string $trialReminderEmailDays (optional)
     * @param  string $baseMonth (optional)
     * @param  string $noticePeriods (optional)
     * @param  string $minimumProratedAmount (optional)
     * @param  string $fixationPeriods (optional)
     * @param  string $setupFee (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $noticePeriodsAfterCurrent (optional)
     * @param  string $fixationPeriodsFull (optional)
     * @param  string $includeZeroAmount (optional)
     * @param  string $partialProrationDays (optional)
     * @param  string $fixedTrialDays (optional)
     * @param  string[] $currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlanList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlanListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handles = null, $state = null, $scheduleType = null, $partialPeriodHandling = null, $setupFeeHandling = null, $fixedLifeTimeUnit = null, $trialIntervalUnit = null, $dunningPlanHandle = null, $name = null, $description = null, $setupFeeText = null, $amount = null, $quantity = null, $fixedCount = null, $fixedLifeTimeLength = null, $trialIntervalLength = null, $intervalLength = null, $scheduleFixedDay = null, $renewalReminderEmailDays = null, $trialReminderEmailDays = null, $baseMonth = null, $noticePeriods = null, $minimumProratedAmount = null, $fixationPeriods = null, $setupFee = null, $amountInclVat = null, $noticePeriodsAfterCurrent = null, $fixationPeriodsFull = null, $includeZeroAmount = null, $partialProrationDays = null, $fixedTrialDays = null, $currency = null, string $contentType = self::contentTypes['getPlanList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPlanList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getPlanList, must be bigger than or equal to 10.');
        }
        




        
        
        
        
        
        
        
























        

        $resourcePath = '/v1/list/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handles,
            'handles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduleType,
            'schedule_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partialPeriodHandling,
            'partial_period_handling', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $setupFeeHandling,
            'setup_fee_handling', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixedLifeTimeUnit,
            'fixed_life_time_unit', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trialIntervalUnit,
            'trial_interval_unit', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dunningPlanHandle,
            'dunning_plan_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $setupFeeText,
            'setup_fee_text', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'quantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixedCount,
            'fixed_count', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixedLifeTimeLength,
            'fixed_life_time_length', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trialIntervalLength,
            'trial_interval_length', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $intervalLength,
            'interval_length', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduleFixedDay,
            'schedule_fixed_day', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $renewalReminderEmailDays,
            'renewal_reminder_email_days', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trialReminderEmailDays,
            'trial_reminder_email_days', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $baseMonth,
            'base_month', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $noticePeriods,
            'notice_periods', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $minimumProratedAmount,
            'minimum_prorated_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixationPeriods,
            'fixation_periods', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $setupFee,
            'setup_fee', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amountInclVat,
            'amount_incl_vat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $noticePeriodsAfterCurrent,
            'notice_periods_after_current', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixationPeriodsFull,
            'fixation_periods_full', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeZeroAmount,
            'include_zero_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partialProrationDays,
            'partial_proration_days', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fixedTrialDays,
            'fixed_trial_days', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionList
     *
     * Get list of subscriptions
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $handle handle (optional)
     * @param  string $handlePrefix handlePrefix (optional)
     * @param  string $handleContains handleContains (optional)
     * @param  string $customer customer (optional)
     * @param  string $plan plan (optional)
     * @param  string[] $state state (optional)
     * @param  string $amount amount (optional)
     * @param  string $quantity quantity (optional)
     * @param  string $activated activated (optional)
     * @param  string $cancelledDate cancelledDate (optional)
     * @param  string $reactivated reactivated (optional)
     * @param  string $created created (optional)
     * @param  string $renewing renewing (optional)
     * @param  int $planVersion planVersion (optional)
     * @param  string $amountInclVat amountInclVat (optional)
     * @param  string $startDate startDate (optional)
     * @param  string $endDate endDate (optional)
     * @param  string $graceDuration graceDuration (optional)
     * @param  string $currentPeriodStart currentPeriodStart (optional)
     * @param  string $nextPeriodStart nextPeriodStart (optional)
     * @param  string $firstPeriodStart firstPeriodStart (optional)
     * @param  string $lastPeriodStart lastPeriodStart (optional)
     * @param  string $trialStart trialStart (optional)
     * @param  string $trialEnd trialEnd (optional)
     * @param  string $inTrial inTrial (optional)
     * @param  string $hasStarted hasStarted (optional)
     * @param  string $renewalCount renewalCount (optional)
     * @param  string $expiredDate expiredDate (optional)
     * @param  string[] $expireReason expireReason (optional)
     * @param  string $onHoldDate onHoldDate (optional)
     * @param  string[] $onHoldReason onHoldReason (optional)
     * @param  string $paymentMethodAdded paymentMethodAdded (optional)
     * @param  string $reminderEmailSent reminderEmailSent (optional)
     * @param  string $failedInvoices failedInvoices (optional)
     * @param  string $failedAmount failedAmount (optional)
     * @param  string $cancelledInvoices cancelledInvoices (optional)
     * @param  string $cancelledAmount cancelledAmount (optional)
     * @param  string $pendingInvoices pendingInvoices (optional)
     * @param  string $pendingAmount pendingAmount (optional)
     * @param  string $dunningInvoices dunningInvoices (optional)
     * @param  string $dunningAmount dunningAmount (optional)
     * @param  string $settledInvoices settledInvoices (optional)
     * @param  string $settledAmount settledAmount (optional)
     * @param  string $refundedAmount refundedAmount (optional)
     * @param  string $pendingAdditionalCosts pendingAdditionalCosts (optional)
     * @param  string $pendingAdditionalCostAmount pendingAdditionalCostAmount (optional)
     * @param  string $transferredAdditionalCosts transferredAdditionalCosts (optional)
     * @param  string $transferredAdditionalCostAmount transferredAdditionalCostAmount (optional)
     * @param  string $pendingCredits pendingCredits (optional)
     * @param  string $pendingCreditAmount pendingCreditAmount (optional)
     * @param  string $transferredCredits transferredCredits (optional)
     * @param  string $transferredCreditAmount transferredCreditAmount (optional)
     * @param  string $subscriptionAddOnHandle subscriptionAddOnHandle (optional)
     * @param  string $addOnHandle addOnHandle (optional)
     * @param  string $subscriptionDiscountHandle subscriptionDiscountHandle (optional)
     * @param  string $discountHandle discountHandle (optional)
     * @param  string $couponHandle couponHandle (optional)
     * @param  string $paymentMethod paymentMethod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\SubscriptionList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getSubscriptionList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelledDate = null, $reactivated = null, $created = null, $renewing = null, $planVersion = null, $amountInclVat = null, $startDate = null, $endDate = null, $graceDuration = null, $currentPeriodStart = null, $nextPeriodStart = null, $firstPeriodStart = null, $lastPeriodStart = null, $trialStart = null, $trialEnd = null, $inTrial = null, $hasStarted = null, $renewalCount = null, $expiredDate = null, $expireReason = null, $onHoldDate = null, $onHoldReason = null, $paymentMethodAdded = null, $reminderEmailSent = null, $failedInvoices = null, $failedAmount = null, $cancelledInvoices = null, $cancelledAmount = null, $pendingInvoices = null, $pendingAmount = null, $dunningInvoices = null, $dunningAmount = null, $settledInvoices = null, $settledAmount = null, $refundedAmount = null, $pendingAdditionalCosts = null, $pendingAdditionalCostAmount = null, $transferredAdditionalCosts = null, $transferredAdditionalCostAmount = null, $pendingCredits = null, $pendingCreditAmount = null, $transferredCredits = null, $transferredCreditAmount = null, $subscriptionAddOnHandle = null, $addOnHandle = null, $subscriptionDiscountHandle = null, $discountHandle = null, $couponHandle = null, $paymentMethod = null, string $contentType = self::contentTypes['getSubscriptionList'][0])
    {
        list($response) = $this->getSubscriptionListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelledDate, $reactivated, $created, $renewing, $planVersion, $amountInclVat, $startDate, $endDate, $graceDuration, $currentPeriodStart, $nextPeriodStart, $firstPeriodStart, $lastPeriodStart, $trialStart, $trialEnd, $inTrial, $hasStarted, $renewalCount, $expiredDate, $expireReason, $onHoldDate, $onHoldReason, $paymentMethodAdded, $reminderEmailSent, $failedInvoices, $failedAmount, $cancelledInvoices, $cancelledAmount, $pendingInvoices, $pendingAmount, $dunningInvoices, $dunningAmount, $settledInvoices, $settledAmount, $refundedAmount, $pendingAdditionalCosts, $pendingAdditionalCostAmount, $transferredAdditionalCosts, $transferredAdditionalCostAmount, $pendingCredits, $pendingCreditAmount, $transferredCredits, $transferredCreditAmount, $subscriptionAddOnHandle, $addOnHandle, $subscriptionDiscountHandle, $discountHandle, $couponHandle, $paymentMethod, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriptionListWithHttpInfo
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelledDate (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $planVersion (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $startDate (optional)
     * @param  string $endDate (optional)
     * @param  string $graceDuration (optional)
     * @param  string $currentPeriodStart (optional)
     * @param  string $nextPeriodStart (optional)
     * @param  string $firstPeriodStart (optional)
     * @param  string $lastPeriodStart (optional)
     * @param  string $trialStart (optional)
     * @param  string $trialEnd (optional)
     * @param  string $inTrial (optional)
     * @param  string $hasStarted (optional)
     * @param  string $renewalCount (optional)
     * @param  string $expiredDate (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $onHoldDate (optional)
     * @param  string[] $onHoldReason (optional)
     * @param  string $paymentMethodAdded (optional)
     * @param  string $reminderEmailSent (optional)
     * @param  string $failedInvoices (optional)
     * @param  string $failedAmount (optional)
     * @param  string $cancelledInvoices (optional)
     * @param  string $cancelledAmount (optional)
     * @param  string $pendingInvoices (optional)
     * @param  string $pendingAmount (optional)
     * @param  string $dunningInvoices (optional)
     * @param  string $dunningAmount (optional)
     * @param  string $settledInvoices (optional)
     * @param  string $settledAmount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $pendingAdditionalCosts (optional)
     * @param  string $pendingAdditionalCostAmount (optional)
     * @param  string $transferredAdditionalCosts (optional)
     * @param  string $transferredAdditionalCostAmount (optional)
     * @param  string $pendingCredits (optional)
     * @param  string $pendingCreditAmount (optional)
     * @param  string $transferredCredits (optional)
     * @param  string $transferredCreditAmount (optional)
     * @param  string $subscriptionAddOnHandle (optional)
     * @param  string $addOnHandle (optional)
     * @param  string $subscriptionDiscountHandle (optional)
     * @param  string $discountHandle (optional)
     * @param  string $couponHandle (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\SubscriptionList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelledDate = null, $reactivated = null, $created = null, $renewing = null, $planVersion = null, $amountInclVat = null, $startDate = null, $endDate = null, $graceDuration = null, $currentPeriodStart = null, $nextPeriodStart = null, $firstPeriodStart = null, $lastPeriodStart = null, $trialStart = null, $trialEnd = null, $inTrial = null, $hasStarted = null, $renewalCount = null, $expiredDate = null, $expireReason = null, $onHoldDate = null, $onHoldReason = null, $paymentMethodAdded = null, $reminderEmailSent = null, $failedInvoices = null, $failedAmount = null, $cancelledInvoices = null, $cancelledAmount = null, $pendingInvoices = null, $pendingAmount = null, $dunningInvoices = null, $dunningAmount = null, $settledInvoices = null, $settledAmount = null, $refundedAmount = null, $pendingAdditionalCosts = null, $pendingAdditionalCostAmount = null, $transferredAdditionalCosts = null, $transferredAdditionalCostAmount = null, $pendingCredits = null, $pendingCreditAmount = null, $transferredCredits = null, $transferredCreditAmount = null, $subscriptionAddOnHandle = null, $addOnHandle = null, $subscriptionDiscountHandle = null, $discountHandle = null, $couponHandle = null, $paymentMethod = null, string $contentType = self::contentTypes['getSubscriptionList'][0])
    {
        $request = $this->getSubscriptionListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelledDate, $reactivated, $created, $renewing, $planVersion, $amountInclVat, $startDate, $endDate, $graceDuration, $currentPeriodStart, $nextPeriodStart, $firstPeriodStart, $lastPeriodStart, $trialStart, $trialEnd, $inTrial, $hasStarted, $renewalCount, $expiredDate, $expireReason, $onHoldDate, $onHoldReason, $paymentMethodAdded, $reminderEmailSent, $failedInvoices, $failedAmount, $cancelledInvoices, $cancelledAmount, $pendingInvoices, $pendingAmount, $dunningInvoices, $dunningAmount, $settledInvoices, $settledAmount, $refundedAmount, $pendingAdditionalCosts, $pendingAdditionalCostAmount, $transferredAdditionalCosts, $transferredAdditionalCostAmount, $pendingCredits, $pendingCreditAmount, $transferredCredits, $transferredCreditAmount, $subscriptionAddOnHandle, $addOnHandle, $subscriptionDiscountHandle, $discountHandle, $couponHandle, $paymentMethod, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\SubscriptionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\SubscriptionList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\SubscriptionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\SubscriptionList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\SubscriptionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionListAsync
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelledDate (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $planVersion (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $startDate (optional)
     * @param  string $endDate (optional)
     * @param  string $graceDuration (optional)
     * @param  string $currentPeriodStart (optional)
     * @param  string $nextPeriodStart (optional)
     * @param  string $firstPeriodStart (optional)
     * @param  string $lastPeriodStart (optional)
     * @param  string $trialStart (optional)
     * @param  string $trialEnd (optional)
     * @param  string $inTrial (optional)
     * @param  string $hasStarted (optional)
     * @param  string $renewalCount (optional)
     * @param  string $expiredDate (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $onHoldDate (optional)
     * @param  string[] $onHoldReason (optional)
     * @param  string $paymentMethodAdded (optional)
     * @param  string $reminderEmailSent (optional)
     * @param  string $failedInvoices (optional)
     * @param  string $failedAmount (optional)
     * @param  string $cancelledInvoices (optional)
     * @param  string $cancelledAmount (optional)
     * @param  string $pendingInvoices (optional)
     * @param  string $pendingAmount (optional)
     * @param  string $dunningInvoices (optional)
     * @param  string $dunningAmount (optional)
     * @param  string $settledInvoices (optional)
     * @param  string $settledAmount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $pendingAdditionalCosts (optional)
     * @param  string $pendingAdditionalCostAmount (optional)
     * @param  string $transferredAdditionalCosts (optional)
     * @param  string $transferredAdditionalCostAmount (optional)
     * @param  string $pendingCredits (optional)
     * @param  string $pendingCreditAmount (optional)
     * @param  string $transferredCredits (optional)
     * @param  string $transferredCreditAmount (optional)
     * @param  string $subscriptionAddOnHandle (optional)
     * @param  string $addOnHandle (optional)
     * @param  string $subscriptionDiscountHandle (optional)
     * @param  string $discountHandle (optional)
     * @param  string $couponHandle (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelledDate = null, $reactivated = null, $created = null, $renewing = null, $planVersion = null, $amountInclVat = null, $startDate = null, $endDate = null, $graceDuration = null, $currentPeriodStart = null, $nextPeriodStart = null, $firstPeriodStart = null, $lastPeriodStart = null, $trialStart = null, $trialEnd = null, $inTrial = null, $hasStarted = null, $renewalCount = null, $expiredDate = null, $expireReason = null, $onHoldDate = null, $onHoldReason = null, $paymentMethodAdded = null, $reminderEmailSent = null, $failedInvoices = null, $failedAmount = null, $cancelledInvoices = null, $cancelledAmount = null, $pendingInvoices = null, $pendingAmount = null, $dunningInvoices = null, $dunningAmount = null, $settledInvoices = null, $settledAmount = null, $refundedAmount = null, $pendingAdditionalCosts = null, $pendingAdditionalCostAmount = null, $transferredAdditionalCosts = null, $transferredAdditionalCostAmount = null, $pendingCredits = null, $pendingCreditAmount = null, $transferredCredits = null, $transferredCreditAmount = null, $subscriptionAddOnHandle = null, $addOnHandle = null, $subscriptionDiscountHandle = null, $discountHandle = null, $couponHandle = null, $paymentMethod = null, string $contentType = self::contentTypes['getSubscriptionList'][0])
    {
        return $this->getSubscriptionListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelledDate, $reactivated, $created, $renewing, $planVersion, $amountInclVat, $startDate, $endDate, $graceDuration, $currentPeriodStart, $nextPeriodStart, $firstPeriodStart, $lastPeriodStart, $trialStart, $trialEnd, $inTrial, $hasStarted, $renewalCount, $expiredDate, $expireReason, $onHoldDate, $onHoldReason, $paymentMethodAdded, $reminderEmailSent, $failedInvoices, $failedAmount, $cancelledInvoices, $cancelledAmount, $pendingInvoices, $pendingAmount, $dunningInvoices, $dunningAmount, $settledInvoices, $settledAmount, $refundedAmount, $pendingAdditionalCosts, $pendingAdditionalCostAmount, $transferredAdditionalCosts, $transferredAdditionalCostAmount, $pendingCredits, $pendingCreditAmount, $transferredCredits, $transferredCreditAmount, $subscriptionAddOnHandle, $addOnHandle, $subscriptionDiscountHandle, $discountHandle, $couponHandle, $paymentMethod, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionListAsyncWithHttpInfo
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelledDate (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $planVersion (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $startDate (optional)
     * @param  string $endDate (optional)
     * @param  string $graceDuration (optional)
     * @param  string $currentPeriodStart (optional)
     * @param  string $nextPeriodStart (optional)
     * @param  string $firstPeriodStart (optional)
     * @param  string $lastPeriodStart (optional)
     * @param  string $trialStart (optional)
     * @param  string $trialEnd (optional)
     * @param  string $inTrial (optional)
     * @param  string $hasStarted (optional)
     * @param  string $renewalCount (optional)
     * @param  string $expiredDate (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $onHoldDate (optional)
     * @param  string[] $onHoldReason (optional)
     * @param  string $paymentMethodAdded (optional)
     * @param  string $reminderEmailSent (optional)
     * @param  string $failedInvoices (optional)
     * @param  string $failedAmount (optional)
     * @param  string $cancelledInvoices (optional)
     * @param  string $cancelledAmount (optional)
     * @param  string $pendingInvoices (optional)
     * @param  string $pendingAmount (optional)
     * @param  string $dunningInvoices (optional)
     * @param  string $dunningAmount (optional)
     * @param  string $settledInvoices (optional)
     * @param  string $settledAmount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $pendingAdditionalCosts (optional)
     * @param  string $pendingAdditionalCostAmount (optional)
     * @param  string $transferredAdditionalCosts (optional)
     * @param  string $transferredAdditionalCostAmount (optional)
     * @param  string $pendingCredits (optional)
     * @param  string $pendingCreditAmount (optional)
     * @param  string $transferredCredits (optional)
     * @param  string $transferredCreditAmount (optional)
     * @param  string $subscriptionAddOnHandle (optional)
     * @param  string $addOnHandle (optional)
     * @param  string $subscriptionDiscountHandle (optional)
     * @param  string $discountHandle (optional)
     * @param  string $couponHandle (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelledDate = null, $reactivated = null, $created = null, $renewing = null, $planVersion = null, $amountInclVat = null, $startDate = null, $endDate = null, $graceDuration = null, $currentPeriodStart = null, $nextPeriodStart = null, $firstPeriodStart = null, $lastPeriodStart = null, $trialStart = null, $trialEnd = null, $inTrial = null, $hasStarted = null, $renewalCount = null, $expiredDate = null, $expireReason = null, $onHoldDate = null, $onHoldReason = null, $paymentMethodAdded = null, $reminderEmailSent = null, $failedInvoices = null, $failedAmount = null, $cancelledInvoices = null, $cancelledAmount = null, $pendingInvoices = null, $pendingAmount = null, $dunningInvoices = null, $dunningAmount = null, $settledInvoices = null, $settledAmount = null, $refundedAmount = null, $pendingAdditionalCosts = null, $pendingAdditionalCostAmount = null, $transferredAdditionalCosts = null, $transferredAdditionalCostAmount = null, $pendingCredits = null, $pendingCreditAmount = null, $transferredCredits = null, $transferredCreditAmount = null, $subscriptionAddOnHandle = null, $addOnHandle = null, $subscriptionDiscountHandle = null, $discountHandle = null, $couponHandle = null, $paymentMethod = null, string $contentType = self::contentTypes['getSubscriptionList'][0])
    {
        $returnType = '\Frisbii\Model\SubscriptionList';
        $request = $this->getSubscriptionListRequest($from, $to, $interval, $size, $nextPageToken, $range, $handle, $handlePrefix, $handleContains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelledDate, $reactivated, $created, $renewing, $planVersion, $amountInclVat, $startDate, $endDate, $graceDuration, $currentPeriodStart, $nextPeriodStart, $firstPeriodStart, $lastPeriodStart, $trialStart, $trialEnd, $inTrial, $hasStarted, $renewalCount, $expiredDate, $expireReason, $onHoldDate, $onHoldReason, $paymentMethodAdded, $reminderEmailSent, $failedInvoices, $failedAmount, $cancelledInvoices, $cancelledAmount, $pendingInvoices, $pendingAmount, $dunningInvoices, $dunningAmount, $settledInvoices, $settledAmount, $refundedAmount, $pendingAdditionalCosts, $pendingAdditionalCostAmount, $transferredAdditionalCosts, $transferredAdditionalCostAmount, $pendingCredits, $pendingCreditAmount, $transferredCredits, $transferredCreditAmount, $subscriptionAddOnHandle, $addOnHandle, $subscriptionDiscountHandle, $discountHandle, $couponHandle, $paymentMethod, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $handle (optional)
     * @param  string $handlePrefix (optional)
     * @param  string $handleContains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelledDate (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $planVersion (optional)
     * @param  string $amountInclVat (optional)
     * @param  string $startDate (optional)
     * @param  string $endDate (optional)
     * @param  string $graceDuration (optional)
     * @param  string $currentPeriodStart (optional)
     * @param  string $nextPeriodStart (optional)
     * @param  string $firstPeriodStart (optional)
     * @param  string $lastPeriodStart (optional)
     * @param  string $trialStart (optional)
     * @param  string $trialEnd (optional)
     * @param  string $inTrial (optional)
     * @param  string $hasStarted (optional)
     * @param  string $renewalCount (optional)
     * @param  string $expiredDate (optional)
     * @param  string[] $expireReason (optional)
     * @param  string $onHoldDate (optional)
     * @param  string[] $onHoldReason (optional)
     * @param  string $paymentMethodAdded (optional)
     * @param  string $reminderEmailSent (optional)
     * @param  string $failedInvoices (optional)
     * @param  string $failedAmount (optional)
     * @param  string $cancelledInvoices (optional)
     * @param  string $cancelledAmount (optional)
     * @param  string $pendingInvoices (optional)
     * @param  string $pendingAmount (optional)
     * @param  string $dunningInvoices (optional)
     * @param  string $dunningAmount (optional)
     * @param  string $settledInvoices (optional)
     * @param  string $settledAmount (optional)
     * @param  string $refundedAmount (optional)
     * @param  string $pendingAdditionalCosts (optional)
     * @param  string $pendingAdditionalCostAmount (optional)
     * @param  string $transferredAdditionalCosts (optional)
     * @param  string $transferredAdditionalCostAmount (optional)
     * @param  string $pendingCredits (optional)
     * @param  string $pendingCreditAmount (optional)
     * @param  string $transferredCredits (optional)
     * @param  string $transferredCreditAmount (optional)
     * @param  string $subscriptionAddOnHandle (optional)
     * @param  string $addOnHandle (optional)
     * @param  string $subscriptionDiscountHandle (optional)
     * @param  string $discountHandle (optional)
     * @param  string $couponHandle (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriptionListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $handle = null, $handlePrefix = null, $handleContains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelledDate = null, $reactivated = null, $created = null, $renewing = null, $planVersion = null, $amountInclVat = null, $startDate = null, $endDate = null, $graceDuration = null, $currentPeriodStart = null, $nextPeriodStart = null, $firstPeriodStart = null, $lastPeriodStart = null, $trialStart = null, $trialEnd = null, $inTrial = null, $hasStarted = null, $renewalCount = null, $expiredDate = null, $expireReason = null, $onHoldDate = null, $onHoldReason = null, $paymentMethodAdded = null, $reminderEmailSent = null, $failedInvoices = null, $failedAmount = null, $cancelledInvoices = null, $cancelledAmount = null, $pendingInvoices = null, $pendingAmount = null, $dunningInvoices = null, $dunningAmount = null, $settledInvoices = null, $settledAmount = null, $refundedAmount = null, $pendingAdditionalCosts = null, $pendingAdditionalCostAmount = null, $transferredAdditionalCosts = null, $transferredAdditionalCostAmount = null, $pendingCredits = null, $pendingCreditAmount = null, $transferredCredits = null, $transferredCreditAmount = null, $subscriptionAddOnHandle = null, $addOnHandle = null, $subscriptionDiscountHandle = null, $discountHandle = null, $couponHandle = null, $paymentMethod = null, string $contentType = self::contentTypes['getSubscriptionList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getSubscriptionList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getSubscriptionList, must be bigger than or equal to 10.');
        }
        







        






















        

        




























        $resourcePath = '/v1/list/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handle,
            'handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handlePrefix,
            'handle_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $handleContains,
            'handle_contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer,
            'customer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plan,
            'plan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'quantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $activated,
            'activated', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancelledDate,
            'cancelled_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reactivated,
            'reactivated', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created,
            'created', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $renewing,
            'renewing', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $planVersion,
            'plan_version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amountInclVat,
            'amount_incl_vat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $graceDuration,
            'grace_duration', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currentPeriodStart,
            'current_period_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPeriodStart,
            'next_period_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firstPeriodStart,
            'first_period_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastPeriodStart,
            'last_period_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trialStart,
            'trial_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $trialEnd,
            'trial_end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inTrial,
            'in_trial', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hasStarted,
            'has_started', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $renewalCount,
            'renewal_count', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expiredDate,
            'expired_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expireReason,
            'expire_reason', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onHoldDate,
            'on_hold_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onHoldReason,
            'on_hold_reason', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentMethodAdded,
            'payment_method_added', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reminderEmailSent,
            'reminder_email_sent', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $failedInvoices,
            'failed_invoices', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $failedAmount,
            'failed_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancelledInvoices,
            'cancelled_invoices', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancelledAmount,
            'cancelled_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingInvoices,
            'pending_invoices', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingAmount,
            'pending_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dunningInvoices,
            'dunning_invoices', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dunningAmount,
            'dunning_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $settledInvoices,
            'settled_invoices', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $settledAmount,
            'settled_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refundedAmount,
            'refunded_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingAdditionalCosts,
            'pending_additional_costs', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingAdditionalCostAmount,
            'pending_additional_cost_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transferredAdditionalCosts,
            'transferred_additional_costs', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transferredAdditionalCostAmount,
            'transferred_additional_cost_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingCredits,
            'pending_credits', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pendingCreditAmount,
            'pending_credit_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transferredCredits,
            'transferred_credits', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transferredCreditAmount,
            'transferred_credit_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscriptionAddOnHandle,
            'subscription_add_on_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $addOnHandle,
            'add_on_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscriptionDiscountHandle,
            'subscription_discount_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $discountHandle,
            'discount_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $couponHandle,
            'coupon_handle', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentMethod,
            'payment_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaxPolicyList
     *
     * Get list of tax policies
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaxPolicyList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\TaxPolicyList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getTaxPolicyList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, string $contentType = self::contentTypes['getTaxPolicyList'][0])
    {
        list($response) = $this->getTaxPolicyListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $contentType);
        return $response;
    }

    /**
     * Operation getTaxPolicyListWithHttpInfo
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaxPolicyList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\TaxPolicyList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaxPolicyListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, string $contentType = self::contentTypes['getTaxPolicyList'][0])
    {
        $request = $this->getTaxPolicyListRequest($from, $to, $interval, $size, $nextPageToken, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\TaxPolicyList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\TaxPolicyList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\TaxPolicyList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\TaxPolicyList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\TaxPolicyList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaxPolicyListAsync
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaxPolicyList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaxPolicyListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, string $contentType = self::contentTypes['getTaxPolicyList'][0])
    {
        return $this->getTaxPolicyListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaxPolicyListAsyncWithHttpInfo
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaxPolicyList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaxPolicyListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, string $contentType = self::contentTypes['getTaxPolicyList'][0])
    {
        $returnType = '\Frisbii\Model\TaxPolicyList';
        $request = $this->getTaxPolicyListRequest($from, $to, $interval, $size, $nextPageToken, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaxPolicyList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaxPolicyList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTaxPolicyListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, string $contentType = self::contentTypes['getTaxPolicyList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTaxPolicyList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTaxPolicyList, must be bigger than or equal to 10.');
        }
        


        $resourcePath = '/v1/list/tax_policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionList
     *
     * Get list of transactions
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string[] $type type (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $paymentType paymentType (optional)
     * @param  string $invoice invoice (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $amount amount (optional)
     * @param  string[] $cardType cardType (optional)
     * @param  string[] $transactionCardType transactionCardType (optional)
     * @param  string $cardPrefix cardPrefix (optional)
     * @param  string $cardPostfix cardPostfix (optional)
     * @param  string $cardFingerprint cardFingerprint (optional)
     * @param  string[] $cardCountry cardCountry (optional)
     * @param  string $cardGateway cardGateway (optional)
     * @param  string $paymentMethod paymentMethod (optional)
     * @param  string $cardAcquirerCode cardAcquirerCode (optional)
     * @param  string $cardErrorState cardErrorState (optional)
     * @param  string $cardError cardError (optional)
     * @param  string $paymentContext paymentContext (optional)
     * @param  string $cardAcquirerReference cardAcquirerReference (optional)
     * @param  string $frictionless frictionless (optional)
     * @param  string $accountingInvoice accountingInvoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\TransactionList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getTransactionList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $type = null, $state = null, $paymentType = null, $invoice = null, $currency = null, $amount = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $paymentMethod = null, $cardAcquirerCode = null, $cardErrorState = null, $cardError = null, $paymentContext = null, $cardAcquirerReference = null, $frictionless = null, $accountingInvoice = null, string $contentType = self::contentTypes['getTransactionList'][0])
    {
        list($response) = $this->getTransactionListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $type, $state, $paymentType, $invoice, $currency, $amount, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $paymentMethod, $cardAcquirerCode, $cardErrorState, $cardError, $paymentContext, $cardAcquirerReference, $frictionless, $accountingInvoice, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionListWithHttpInfo
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $cardAcquirerCode (optional)
     * @param  string $cardErrorState (optional)
     * @param  string $cardError (optional)
     * @param  string $paymentContext (optional)
     * @param  string $cardAcquirerReference (optional)
     * @param  string $frictionless (optional)
     * @param  string $accountingInvoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\TransactionList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $type = null, $state = null, $paymentType = null, $invoice = null, $currency = null, $amount = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $paymentMethod = null, $cardAcquirerCode = null, $cardErrorState = null, $cardError = null, $paymentContext = null, $cardAcquirerReference = null, $frictionless = null, $accountingInvoice = null, string $contentType = self::contentTypes['getTransactionList'][0])
    {
        $request = $this->getTransactionListRequest($from, $to, $interval, $size, $nextPageToken, $range, $type, $state, $paymentType, $invoice, $currency, $amount, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $paymentMethod, $cardAcquirerCode, $cardErrorState, $cardError, $paymentContext, $cardAcquirerReference, $frictionless, $accountingInvoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\TransactionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\TransactionList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\TransactionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\TransactionList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\TransactionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionListAsync
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $cardAcquirerCode (optional)
     * @param  string $cardErrorState (optional)
     * @param  string $cardError (optional)
     * @param  string $paymentContext (optional)
     * @param  string $cardAcquirerReference (optional)
     * @param  string $frictionless (optional)
     * @param  string $accountingInvoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $type = null, $state = null, $paymentType = null, $invoice = null, $currency = null, $amount = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $paymentMethod = null, $cardAcquirerCode = null, $cardErrorState = null, $cardError = null, $paymentContext = null, $cardAcquirerReference = null, $frictionless = null, $accountingInvoice = null, string $contentType = self::contentTypes['getTransactionList'][0])
    {
        return $this->getTransactionListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $type, $state, $paymentType, $invoice, $currency, $amount, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $paymentMethod, $cardAcquirerCode, $cardErrorState, $cardError, $paymentContext, $cardAcquirerReference, $frictionless, $accountingInvoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionListAsyncWithHttpInfo
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $cardAcquirerCode (optional)
     * @param  string $cardErrorState (optional)
     * @param  string $cardError (optional)
     * @param  string $paymentContext (optional)
     * @param  string $cardAcquirerReference (optional)
     * @param  string $frictionless (optional)
     * @param  string $accountingInvoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $type = null, $state = null, $paymentType = null, $invoice = null, $currency = null, $amount = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $paymentMethod = null, $cardAcquirerCode = null, $cardErrorState = null, $cardError = null, $paymentContext = null, $cardAcquirerReference = null, $frictionless = null, $accountingInvoice = null, string $contentType = self::contentTypes['getTransactionList'][0])
    {
        $returnType = '\Frisbii\Model\TransactionList';
        $request = $this->getTransactionListRequest($from, $to, $interval, $size, $nextPageToken, $range, $type, $state, $paymentType, $invoice, $currency, $amount, $cardType, $transactionCardType, $cardPrefix, $cardPostfix, $cardFingerprint, $cardCountry, $cardGateway, $paymentMethod, $cardAcquirerCode, $cardErrorState, $cardError, $paymentContext, $cardAcquirerReference, $frictionless, $accountingInvoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $paymentType (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $cardType (optional)
     * @param  string[] $transactionCardType (optional)
     * @param  string $cardPrefix (optional)
     * @param  string $cardPostfix (optional)
     * @param  string $cardFingerprint (optional)
     * @param  string[] $cardCountry (optional)
     * @param  string $cardGateway (optional)
     * @param  string $paymentMethod (optional)
     * @param  string $cardAcquirerCode (optional)
     * @param  string $cardErrorState (optional)
     * @param  string $cardError (optional)
     * @param  string $paymentContext (optional)
     * @param  string $cardAcquirerReference (optional)
     * @param  string $frictionless (optional)
     * @param  string $accountingInvoice (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $type = null, $state = null, $paymentType = null, $invoice = null, $currency = null, $amount = null, $cardType = null, $transactionCardType = null, $cardPrefix = null, $cardPostfix = null, $cardFingerprint = null, $cardCountry = null, $cardGateway = null, $paymentMethod = null, $cardAcquirerCode = null, $cardErrorState = null, $cardError = null, $paymentContext = null, $cardAcquirerReference = null, $frictionless = null, $accountingInvoice = null, string $contentType = self::contentTypes['getTransactionList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTransactionList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getTransactionList, must be bigger than or equal to 10.');
        }
        


        
        
        

        

        
        



        










        $resourcePath = '/v1/list/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentType,
            'payment_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice,
            'invoice', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardType,
            'card_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transactionCardType,
            'transaction_card_type', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPrefix,
            'card_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardPostfix,
            'card_postfix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardFingerprint,
            'card_fingerprint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardCountry,
            'card_country', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardGateway,
            'card_gateway', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentMethod,
            'payment_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardAcquirerCode,
            'card_acquirer_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardErrorState,
            'card_error_state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardError,
            'card_error', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentContext,
            'payment_context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cardAcquirerReference,
            'card_acquirer_reference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $frictionless,
            'frictionless', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountingInvoice,
            'accounting_invoice', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookList
     *
     * Get list of webhooks
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $nextPageToken nextPageToken (optional)
     * @param  string $range range (optional, default to 'created')
     * @param  string $state state (optional)
     * @param  string $event event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Frisbii\Model\WebhookList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse
     */
    public function getWebhookList($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $state = null, $event = null, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        list($response) = $this->getWebhookListWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $state, $event, $contentType);
        return $response;
    }

    /**
     * Operation getWebhookListWithHttpInfo
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $state (optional)
     * @param  string $event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \Frisbii\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Frisbii\Model\WebhookList|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse|\Frisbii\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookListWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $state = null, $event = null, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        $request = $this->getWebhookListRequest($from, $to, $interval, $size, $nextPageToken, $range, $state, $event, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Frisbii\Model\WebhookList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\WebhookList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\WebhookList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Frisbii\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Frisbii\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Frisbii\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Frisbii\Model\WebhookList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\WebhookList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frisbii\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookListAsync
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $state (optional)
     * @param  string $event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsync($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $state = null, $event = null, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        return $this->getWebhookListAsyncWithHttpInfo($from, $to, $interval, $size, $nextPageToken, $range, $state, $event, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookListAsyncWithHttpInfo
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $state (optional)
     * @param  string $event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $state = null, $event = null, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        $returnType = '\Frisbii\Model\WebhookList';
        $request = $this->getWebhookListRequest($from, $to, $interval, $size, $nextPageToken, $range, $state, $event, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $nextPageToken (optional)
     * @param  string $range (optional, default to 'created')
     * @param  string $state (optional)
     * @param  string $event (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebhookListRequest($from = null, $to = null, $interval = null, $size = 20, $nextPageToken = null, $range = 'created', $state = null, $event = null, string $contentType = self::contentTypes['getWebhookList'][0])
    {




        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getWebhookList, must be smaller than or equal to 100.');
        }
        if ($size !== null && $size < 10) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ListApi.getWebhookList, must be bigger than or equal to 10.');
        }
        





        $resourcePath = '/v1/list/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $interval,
            'interval', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextPageToken,
            'next_page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event,
            'event', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
