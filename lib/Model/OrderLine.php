<?php
/**
 * OrderLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * OrderLine Class Doc Comment
 *
 * @category Class
 * @description Order lines for invoice sorted by descending timestamp
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ordertext' => 'string',
        'amount' => 'int',
        'vat' => 'float',
        'quantity' => 'int',
        'origin' => 'string',
        'timestamp' => '\DateTime',
        'amountVat' => 'int',
        'amountExVat' => 'int',
        'unitAmount' => 'int',
        'unitAmountVat' => 'int',
        'unitAmountExVat' => 'int',
        'amountDefinedInclVat' => 'bool',
        'discountedAmount' => 'int',
        'appliedTaxRule' => 'string',
        'originHandle' => 'string',
        'periodFrom' => '\DateTime',
        'periodTo' => '\DateTime',
        'discountPercentage' => 'int',
        'discountedOrderLine' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ordertext' => null,
        'amount' => 'int32',
        'vat' => 'float',
        'quantity' => 'int32',
        'origin' => null,
        'timestamp' => 'date-time',
        'amountVat' => 'int32',
        'amountExVat' => 'int32',
        'unitAmount' => 'int32',
        'unitAmountVat' => 'int32',
        'unitAmountExVat' => 'int32',
        'amountDefinedInclVat' => null,
        'discountedAmount' => 'int32',
        'appliedTaxRule' => null,
        'originHandle' => null,
        'periodFrom' => 'date-time',
        'periodTo' => 'date-time',
        'discountPercentage' => 'int32',
        'discountedOrderLine' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'ordertext' => false,
        'amount' => false,
        'vat' => false,
        'quantity' => false,
        'origin' => false,
        'timestamp' => false,
        'amountVat' => false,
        'amountExVat' => false,
        'unitAmount' => false,
        'unitAmountVat' => false,
        'unitAmountExVat' => false,
        'amountDefinedInclVat' => false,
        'discountedAmount' => false,
        'appliedTaxRule' => false,
        'originHandle' => false,
        'periodFrom' => false,
        'periodTo' => false,
        'discountPercentage' => false,
        'discountedOrderLine' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ordertext' => 'ordertext',
        'amount' => 'amount',
        'vat' => 'vat',
        'quantity' => 'quantity',
        'origin' => 'origin',
        'timestamp' => 'timestamp',
        'amountVat' => 'amount_vat',
        'amountExVat' => 'amount_ex_vat',
        'unitAmount' => 'unit_amount',
        'unitAmountVat' => 'unit_amount_vat',
        'unitAmountExVat' => 'unit_amount_ex_vat',
        'amountDefinedInclVat' => 'amount_defined_incl_vat',
        'discountedAmount' => 'discounted_amount',
        'appliedTaxRule' => 'applied_tax_rule',
        'originHandle' => 'origin_handle',
        'periodFrom' => 'period_from',
        'periodTo' => 'period_to',
        'discountPercentage' => 'discount_percentage',
        'discountedOrderLine' => 'discounted_order_line'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ordertext' => 'setOrdertext',
        'amount' => 'setAmount',
        'vat' => 'setVat',
        'quantity' => 'setQuantity',
        'origin' => 'setOrigin',
        'timestamp' => 'setTimestamp',
        'amountVat' => 'setAmountVat',
        'amountExVat' => 'setAmountExVat',
        'unitAmount' => 'setUnitAmount',
        'unitAmountVat' => 'setUnitAmountVat',
        'unitAmountExVat' => 'setUnitAmountExVat',
        'amountDefinedInclVat' => 'setAmountDefinedInclVat',
        'discountedAmount' => 'setDiscountedAmount',
        'appliedTaxRule' => 'setAppliedTaxRule',
        'originHandle' => 'setOriginHandle',
        'periodFrom' => 'setPeriodFrom',
        'periodTo' => 'setPeriodTo',
        'discountPercentage' => 'setDiscountPercentage',
        'discountedOrderLine' => 'setDiscountedOrderLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ordertext' => 'getOrdertext',
        'amount' => 'getAmount',
        'vat' => 'getVat',
        'quantity' => 'getQuantity',
        'origin' => 'getOrigin',
        'timestamp' => 'getTimestamp',
        'amountVat' => 'getAmountVat',
        'amountExVat' => 'getAmountExVat',
        'unitAmount' => 'getUnitAmount',
        'unitAmountVat' => 'getUnitAmountVat',
        'unitAmountExVat' => 'getUnitAmountExVat',
        'amountDefinedInclVat' => 'getAmountDefinedInclVat',
        'discountedAmount' => 'getDiscountedAmount',
        'appliedTaxRule' => 'getAppliedTaxRule',
        'originHandle' => 'getOriginHandle',
        'periodFrom' => 'getPeriodFrom',
        'periodTo' => 'getPeriodTo',
        'discountPercentage' => 'getDiscountPercentage',
        'discountedOrderLine' => 'getDiscountedOrderLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORIGIN_PLAN = 'plan';
    public const ORIGIN_ADD_ON = 'add_on';
    public const ORIGIN_ONDEMAND = 'ondemand';
    public const ORIGIN_ADDITIONAL_COST = 'additional_cost';
    public const ORIGIN_CREDIT = 'credit';
    public const ORIGIN_DISCOUNT = 'discount';
    public const ORIGIN_SETUP_FEE = 'setup_fee';
    public const ORIGIN_SURCHARGE_FEE = 'surcharge_fee';
    public const ORIGIN_METERED_BILLING_PRODUCT = 'metered_billing_product';
    public const ORIGIN_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const APPLIED_TAX_RULE_REVERSE_CHARGE = 'reverse_charge';
    public const APPLIED_TAX_RULE_INTRA_COMMUNITY_DIGITAL_SERVICE = 'intra_community_digital_service';
    public const APPLIED_TAX_RULE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginAllowableValues()
    {
        return [
            self::ORIGIN_PLAN,
            self::ORIGIN_ADD_ON,
            self::ORIGIN_ONDEMAND,
            self::ORIGIN_ADDITIONAL_COST,
            self::ORIGIN_CREDIT,
            self::ORIGIN_DISCOUNT,
            self::ORIGIN_SETUP_FEE,
            self::ORIGIN_SURCHARGE_FEE,
            self::ORIGIN_METERED_BILLING_PRODUCT,
            self::ORIGIN_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppliedTaxRuleAllowableValues()
    {
        return [
            self::APPLIED_TAX_RULE_REVERSE_CHARGE,
            self::APPLIED_TAX_RULE_INTRA_COMMUNITY_DIGITAL_SERVICE,
            self::APPLIED_TAX_RULE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ordertext', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('amountVat', $data ?? [], null);
        $this->setIfExists('amountExVat', $data ?? [], null);
        $this->setIfExists('unitAmount', $data ?? [], null);
        $this->setIfExists('unitAmountVat', $data ?? [], null);
        $this->setIfExists('unitAmountExVat', $data ?? [], null);
        $this->setIfExists('amountDefinedInclVat', $data ?? [], null);
        $this->setIfExists('discountedAmount', $data ?? [], null);
        $this->setIfExists('appliedTaxRule', $data ?? [], null);
        $this->setIfExists('originHandle', $data ?? [], null);
        $this->setIfExists('periodFrom', $data ?? [], null);
        $this->setIfExists('periodTo', $data ?? [], null);
        $this->setIfExists('discountPercentage', $data ?? [], null);
        $this->setIfExists('discountedOrderLine', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ordertext'] === null) {
            $invalidProperties[] = "'ordertext' can't be null";
        }
        if ((mb_strlen($this->container['ordertext']) < 1)) {
            $invalidProperties[] = "invalid value for 'ordertext', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        $allowedValues = $this->getOriginAllowableValues();
        if (!is_null($this->container['origin']) && !in_array($this->container['origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin', must be one of '%s'",
                $this->container['origin'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['amountVat'] === null) {
            $invalidProperties[] = "'amountVat' can't be null";
        }
        if ($this->container['amountExVat'] === null) {
            $invalidProperties[] = "'amountExVat' can't be null";
        }
        if ($this->container['unitAmount'] === null) {
            $invalidProperties[] = "'unitAmount' can't be null";
        }
        if ($this->container['unitAmountVat'] === null) {
            $invalidProperties[] = "'unitAmountVat' can't be null";
        }
        if ($this->container['unitAmountExVat'] === null) {
            $invalidProperties[] = "'unitAmountExVat' can't be null";
        }
        if ($this->container['amountDefinedInclVat'] === null) {
            $invalidProperties[] = "'amountDefinedInclVat' can't be null";
        }
        $allowedValues = $this->getAppliedTaxRuleAllowableValues();
        if (!is_null($this->container['appliedTaxRule']) && !in_array($this->container['appliedTaxRule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'appliedTaxRule', must be one of '%s'",
                $this->container['appliedTaxRule'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Per account unique order line id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ordertext
     *
     * @return string
     */
    public function getOrdertext()
    {
        return $this->container['ordertext'];
    }

    /**
     * Sets ordertext
     *
     * @param string $ordertext Order line text
     *
     * @return self
     */
    public function setOrdertext($ordertext)
    {
        if (is_null($ordertext)) {
            throw new \InvalidArgumentException('non-nullable ordertext cannot be null');
        }

        if ((mb_strlen($ordertext) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ordertext when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['ordertext'] = $ordertext;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Order line total amount including vat
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat Order line vat percent
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Order line quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderLine., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Order line origin, one of the following: `plan`, `add_on`, `ondemand`, `additional_cost`, `credit`, `discount`, `setup_fee`, `surcharge_fee`, `metered_billing_product`
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $allowedValues = $this->getOriginAllowableValues();
        if (!in_array($origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin', must be one of '%s'",
                    $origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp Timestamp from order line origin, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets amountVat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amountVat'];
    }

    /**
     * Sets amountVat
     *
     * @param int $amountVat Order line total vat amount
     *
     * @return self
     */
    public function setAmountVat($amountVat)
    {
        if (is_null($amountVat)) {
            throw new \InvalidArgumentException('non-nullable amountVat cannot be null');
        }
        $this->container['amountVat'] = $amountVat;

        return $this;
    }

    /**
     * Gets amountExVat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amountExVat'];
    }

    /**
     * Sets amountExVat
     *
     * @param int $amountExVat Order line total amount without vat
     *
     * @return self
     */
    public function setAmountExVat($amountExVat)
    {
        if (is_null($amountExVat)) {
            throw new \InvalidArgumentException('non-nullable amountExVat cannot be null');
        }
        $this->container['amountExVat'] = $amountExVat;

        return $this;
    }

    /**
     * Gets unitAmount
     *
     * @return int
     */
    public function getUnitAmount()
    {
        return $this->container['unitAmount'];
    }

    /**
     * Sets unitAmount
     *
     * @param int $unitAmount Order line unit amount including vat
     *
     * @return self
     */
    public function setUnitAmount($unitAmount)
    {
        if (is_null($unitAmount)) {
            throw new \InvalidArgumentException('non-nullable unitAmount cannot be null');
        }
        $this->container['unitAmount'] = $unitAmount;

        return $this;
    }

    /**
     * Gets unitAmountVat
     *
     * @return int
     */
    public function getUnitAmountVat()
    {
        return $this->container['unitAmountVat'];
    }

    /**
     * Sets unitAmountVat
     *
     * @param int $unitAmountVat Order line unit vat amount
     *
     * @return self
     */
    public function setUnitAmountVat($unitAmountVat)
    {
        if (is_null($unitAmountVat)) {
            throw new \InvalidArgumentException('non-nullable unitAmountVat cannot be null');
        }
        $this->container['unitAmountVat'] = $unitAmountVat;

        return $this;
    }

    /**
     * Gets unitAmountExVat
     *
     * @return int
     */
    public function getUnitAmountExVat()
    {
        return $this->container['unitAmountExVat'];
    }

    /**
     * Sets unitAmountExVat
     *
     * @param int $unitAmountExVat Order line unit amount without vat
     *
     * @return self
     */
    public function setUnitAmountExVat($unitAmountExVat)
    {
        if (is_null($unitAmountExVat)) {
            throw new \InvalidArgumentException('non-nullable unitAmountExVat cannot be null');
        }
        $this->container['unitAmountExVat'] = $unitAmountExVat;

        return $this;
    }

    /**
     * Gets amountDefinedInclVat
     *
     * @return bool
     */
    public function getAmountDefinedInclVat()
    {
        return $this->container['amountDefinedInclVat'];
    }

    /**
     * Sets amountDefinedInclVat
     *
     * @param bool $amountDefinedInclVat Whether the amount was defined including VAT. E.g. plan amount defined including VAT.
     *
     * @return self
     */
    public function setAmountDefinedInclVat($amountDefinedInclVat)
    {
        if (is_null($amountDefinedInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountDefinedInclVat cannot be null');
        }
        $this->container['amountDefinedInclVat'] = $amountDefinedInclVat;

        return $this;
    }

    /**
     * Gets discountedAmount
     *
     * @return int|null
     */
    public function getDiscountedAmount()
    {
        return $this->container['discountedAmount'];
    }

    /**
     * Sets discountedAmount
     *
     * @param int|null $discountedAmount Order line amount after potential discount has been deducted
     *
     * @return self
     */
    public function setDiscountedAmount($discountedAmount)
    {
        if (is_null($discountedAmount)) {
            throw new \InvalidArgumentException('non-nullable discountedAmount cannot be null');
        }
        $this->container['discountedAmount'] = $discountedAmount;

        return $this;
    }

    /**
     * Gets appliedTaxRule
     *
     * @return string|null
     */
    public function getAppliedTaxRule()
    {
        return $this->container['appliedTaxRule'];
    }

    /**
     * Sets appliedTaxRule
     *
     * @param string|null $appliedTaxRule Tax rule applied for order line indicates who is liable to account for the VAT.
     *
     * @return self
     */
    public function setAppliedTaxRule($appliedTaxRule)
    {
        if (is_null($appliedTaxRule)) {
            throw new \InvalidArgumentException('non-nullable appliedTaxRule cannot be null');
        }
        $allowedValues = $this->getAppliedTaxRuleAllowableValues();
        if (!in_array($appliedTaxRule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'appliedTaxRule', must be one of '%s'",
                    $appliedTaxRule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['appliedTaxRule'] = $appliedTaxRule;

        return $this;
    }

    /**
     * Gets originHandle
     *
     * @return string|null
     */
    public function getOriginHandle()
    {
        return $this->container['originHandle'];
    }

    /**
     * Sets originHandle
     *
     * @param string|null $originHandle Handle for additional cost, credit, plan or subscription discount in the case one of those are the origin
     *
     * @return self
     */
    public function setOriginHandle($originHandle)
    {
        if (is_null($originHandle)) {
            throw new \InvalidArgumentException('non-nullable originHandle cannot be null');
        }
        $this->container['originHandle'] = $originHandle;

        return $this;
    }

    /**
     * Gets periodFrom
     *
     * @return \DateTime|null
     */
    public function getPeriodFrom()
    {
        return $this->container['periodFrom'];
    }

    /**
     * Sets periodFrom
     *
     * @param \DateTime|null $periodFrom The start of billing period if the order line is a plan order line for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodFrom($periodFrom)
    {
        if (is_null($periodFrom)) {
            throw new \InvalidArgumentException('non-nullable periodFrom cannot be null');
        }
        $this->container['periodFrom'] = $periodFrom;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return \DateTime|null
     */
    public function getPeriodTo()
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param \DateTime|null $periodTo The end of billing period if the order line is a plan order line for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodTo($periodTo)
    {
        if (is_null($periodTo)) {
            throw new \InvalidArgumentException('non-nullable periodTo cannot be null');
        }
        $this->container['periodTo'] = $periodTo;

        return $this;
    }

    /**
     * Gets discountPercentage
     *
     * @return int|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discountPercentage'];
    }

    /**
     * Sets discountPercentage
     *
     * @param int|null $discountPercentage The discount percentage for discount order lines that has a percentage discount
     *
     * @return self
     */
    public function setDiscountPercentage($discountPercentage)
    {
        if (is_null($discountPercentage)) {
            throw new \InvalidArgumentException('non-nullable discountPercentage cannot be null');
        }
        $this->container['discountPercentage'] = $discountPercentage;

        return $this;
    }

    /**
     * Gets discountedOrderLine
     *
     * @return string|null
     */
    public function getDiscountedOrderLine()
    {
        return $this->container['discountedOrderLine'];
    }

    /**
     * Sets discountedOrderLine
     *
     * @param string|null $discountedOrderLine For discount order lines a reference to the order line for which the order line is a discount
     *
     * @return self
     */
    public function setDiscountedOrderLine($discountedOrderLine)
    {
        if (is_null($discountedOrderLine)) {
            throw new \InvalidArgumentException('non-nullable discountedOrderLine cannot be null');
        }
        $this->container['discountedOrderLine'] = $discountedOrderLine;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


