<?php
/**
 * VippsMerchantOnboarding
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * VippsMerchantOnboarding Class Doc Comment
 *
 * @category Class
 * @description Merchant onboarding data. Either this argument must be provided or &#x60;merchantSerialNumber&#x60;
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VippsMerchantOnboarding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VippsMerchantOnboarding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organizationNumber' => 'string',
        'name' => 'string',
        'mccCode' => 'string',
        'logo' => 'string',
        'addressLine1' => 'string',
        'city' => 'string',
        'postCode' => 'string',
        'country' => 'string',
        'companyName' => 'string',
        'companyEmail' => 'string',
        'email' => 'string',
        'website' => 'string',
        'addressLine2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'organizationNumber' => null,
        'name' => null,
        'mccCode' => null,
        'logo' => null,
        'addressLine1' => null,
        'city' => null,
        'postCode' => null,
        'country' => null,
        'companyName' => null,
        'companyEmail' => 'email',
        'email' => 'email',
        'website' => null,
        'addressLine2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'organizationNumber' => false,
        'name' => false,
        'mccCode' => false,
        'logo' => false,
        'addressLine1' => false,
        'city' => false,
        'postCode' => false,
        'country' => false,
        'companyName' => false,
        'companyEmail' => false,
        'email' => false,
        'website' => false,
        'addressLine2' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organizationNumber' => 'organizationNumber',
        'name' => 'name',
        'mccCode' => 'mccCode',
        'logo' => 'logo',
        'addressLine1' => 'addressLine1',
        'city' => 'city',
        'postCode' => 'postCode',
        'country' => 'country',
        'companyName' => 'companyName',
        'companyEmail' => 'companyEmail',
        'email' => 'email',
        'website' => 'website',
        'addressLine2' => 'addressLine2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organizationNumber' => 'setOrganizationNumber',
        'name' => 'setName',
        'mccCode' => 'setMccCode',
        'logo' => 'setLogo',
        'addressLine1' => 'setAddressLine1',
        'city' => 'setCity',
        'postCode' => 'setPostCode',
        'country' => 'setCountry',
        'companyName' => 'setCompanyName',
        'companyEmail' => 'setCompanyEmail',
        'email' => 'setEmail',
        'website' => 'setWebsite',
        'addressLine2' => 'setAddressLine2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organizationNumber' => 'getOrganizationNumber',
        'name' => 'getName',
        'mccCode' => 'getMccCode',
        'logo' => 'getLogo',
        'addressLine1' => 'getAddressLine1',
        'city' => 'getCity',
        'postCode' => 'getPostCode',
        'country' => 'getCountry',
        'companyName' => 'getCompanyName',
        'companyEmail' => 'getCompanyEmail',
        'email' => 'getEmail',
        'website' => 'getWebsite',
        'addressLine2' => 'getAddressLine2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('organizationNumber', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('mccCode', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('postCode', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('companyEmail', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organizationNumber'] === null) {
            $invalidProperties[] = "'organizationNumber' can't be null";
        }
        if ((mb_strlen($this->container['organizationNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'organizationNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mccCode'] === null) {
            $invalidProperties[] = "'mccCode' can't be null";
        }
        if (!preg_match("/^\\d{4}$/", $this->container['mccCode'])) {
            $invalidProperties[] = "invalid value for 'mccCode', must be conform to the pattern /^\\d{4}$/.";
        }

        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ((mb_strlen($this->container['logo']) < 1)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['addressLine1'] === null) {
            $invalidProperties[] = "'addressLine1' can't be null";
        }
        if ((mb_strlen($this->container['addressLine1']) < 1)) {
            $invalidProperties[] = "invalid value for 'addressLine1', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postCode'] === null) {
            $invalidProperties[] = "'postCode' can't be null";
        }
        if ((mb_strlen($this->container['postCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'postCode', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[A-Za-z0-9 ]+$/", $this->container['postCode'])) {
            $invalidProperties[] = "invalid value for 'postCode', must be conform to the pattern /^[A-Za-z0-9 ]+$/.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['companyName'] === null) {
            $invalidProperties[] = "'companyName' can't be null";
        }
        if ((mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['companyEmail'] === null) {
            $invalidProperties[] = "'companyEmail' can't be null";
        }
        if ((mb_strlen($this->container['companyEmail']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyEmail', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organizationNumber
     *
     * @return string
     */
    public function getOrganizationNumber()
    {
        return $this->container['organizationNumber'];
    }

    /**
     * Sets organizationNumber
     *
     * @param string $organizationNumber Organization number of the merchant, in the correct format for the organization's country. For Norway: The orgno must be 9 digits without spaces, the merchant must be active in Brønnøysundregistrene and the orgno must be for the main entity (\"hovedenhet\"), not a sub entity (\"underenhet\"). For other countries: The orgno, address, etc is validated as much as practically possible.
     *
     * @return self
     */
    public function setOrganizationNumber($organizationNumber)
    {
        if (is_null($organizationNumber)) {
            throw new \InvalidArgumentException('non-nullable organizationNumber cannot be null');
        }

        if ((mb_strlen($organizationNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $organizationNumber when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['organizationNumber'] = $organizationNumber;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The merchant's name. This name will be displayed in the Vipps app. This may be different from the legal name in companyName.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mccCode
     *
     * @return string
     */
    public function getMccCode()
    {
        return $this->container['mccCode'];
    }

    /**
     * Sets mccCode
     *
     * @param string $mccCode Four-digit number listed in ISO 18245 for retail financial services, used to classify a business by the types of goods or services it provides.
     *
     * @return self
     */
    public function setMccCode($mccCode)
    {
        if (is_null($mccCode)) {
            throw new \InvalidArgumentException('non-nullable mccCode cannot be null');
        }

        if ((!preg_match("/^\\d{4}$/", ObjectSerializer::toString($mccCode)))) {
            throw new \InvalidArgumentException("invalid value for \$mccCode when calling VippsMerchantOnboarding., must conform to the pattern /^\\d{4}$/.");
        }

        $this->container['mccCode'] = $mccCode;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Merchant logo url. The logo will be displayed in the Vipps app, both when paying and on receipts. The logo must be in PNG (Portable Network Graphics) format. Square images are recommended. The longest side can not be more than 1000 pixels. The minimum size is 100 x 100 pixels.
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }

        if ((mb_strlen($logo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string $addressLine1 Address Line 1
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            throw new \InvalidArgumentException('non-nullable addressLine1 cannot be null');
        }

        if ((mb_strlen($addressLine1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addressLine1 when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postCode
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['postCode'];
    }

    /**
     * Sets postCode
     *
     * @param string $postCode Postcode
     *
     * @return self
     */
    public function setPostCode($postCode)
    {
        if (is_null($postCode)) {
            throw new \InvalidArgumentException('non-nullable postCode cannot be null');
        }

        if ((mb_strlen($postCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $postCode when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9 ]+$/", ObjectSerializer::toString($postCode)))) {
            throw new \InvalidArgumentException("invalid value for \$postCode when calling VippsMerchantOnboarding., must conform to the pattern /^[A-Za-z0-9 ]+$/.");
        }

        $this->container['postCode'] = $postCode;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Two letter country code based on ISO 3166
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName The legal name of the organization. This may be different from name, which is displayed in the Vipps app.
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (is_null($companyName)) {
            throw new \InvalidArgumentException('non-nullable companyName cannot be null');
        }

        if ((mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets companyEmail
     *
     * @return string
     */
    public function getCompanyEmail()
    {
        return $this->container['companyEmail'];
    }

    /**
     * Sets companyEmail
     *
     * @param string $companyEmail The merchant's email address
     *
     * @return self
     */
    public function setCompanyEmail($companyEmail)
    {
        if (is_null($companyEmail)) {
            throw new \InvalidArgumentException('non-nullable companyEmail cannot be null');
        }

        if ((mb_strlen($companyEmail) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyEmail when calling VippsMerchantOnboarding., must be bigger than or equal to 1.');
        }

        $this->container['companyEmail'] = $companyEmail;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Contact email for the merchant. Can be same as companyEmail
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website The URL for the merchant's website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 Address Line 2
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            throw new \InvalidArgumentException('non-nullable addressLine2 cannot be null');
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


