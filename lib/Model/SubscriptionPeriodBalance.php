<?php
/**
 * SubscriptionPeriodBalance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * SubscriptionPeriodBalance Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubscriptionPeriodBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubscriptionPeriodBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'invoice' => '\Frisbii\Model\Invoice',
        'paid' => 'int',
        'consumed' => 'int',
        'remaining' => 'int',
        'creditable' => 'int',
        'periodAmount' => 'int',
        'onlineRefundable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => 'date-time',
        'invoice' => null,
        'paid' => 'int32',
        'consumed' => 'int32',
        'remaining' => 'int32',
        'creditable' => 'int32',
        'periodAmount' => 'int32',
        'onlineRefundable' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date' => false,
        'invoice' => false,
        'paid' => false,
        'consumed' => false,
        'remaining' => false,
        'creditable' => false,
        'periodAmount' => false,
        'onlineRefundable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'invoice' => 'invoice',
        'paid' => 'paid',
        'consumed' => 'consumed',
        'remaining' => 'remaining',
        'creditable' => 'creditable',
        'periodAmount' => 'period_amount',
        'onlineRefundable' => 'online_refundable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'invoice' => 'setInvoice',
        'paid' => 'setPaid',
        'consumed' => 'setConsumed',
        'remaining' => 'setRemaining',
        'creditable' => 'setCreditable',
        'periodAmount' => 'setPeriodAmount',
        'onlineRefundable' => 'setOnlineRefundable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'invoice' => 'getInvoice',
        'paid' => 'getPaid',
        'consumed' => 'getConsumed',
        'remaining' => 'getRemaining',
        'creditable' => 'getCreditable',
        'periodAmount' => 'getPeriodAmount',
        'onlineRefundable' => 'getOnlineRefundable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('consumed', $data ?? [], null);
        $this->setIfExists('remaining', $data ?? [], null);
        $this->setIfExists('creditable', $data ?? [], null);
        $this->setIfExists('periodAmount', $data ?? [], null);
        $this->setIfExists('onlineRefundable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date in period for this period balance
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Frisbii\Model\Invoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Frisbii\Model\Invoice|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return int|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param int|null $paid The plan amount paid and settled for this period
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets consumed
     *
     * @return int|null
     */
    public function getConsumed()
    {
        return $this->container['consumed'];
    }

    /**
     * Sets consumed
     *
     * @param int|null $consumed The partial plan amount consumed up to date for this period
     *
     * @return self
     */
    public function setConsumed($consumed)
    {
        if (is_null($consumed)) {
            throw new \InvalidArgumentException('non-nullable consumed cannot be null');
        }
        $this->container['consumed'] = $consumed;

        return $this;
    }

    /**
     * Gets remaining
     *
     * @return int|null
     */
    public function getRemaining()
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     *
     * @param int|null $remaining The partial plan amount remaining for this period. This amount can be refunded in the case the subscription is expired or put on hold and the amount has been paid.
     *
     * @return self
     */
    public function setRemaining($remaining)
    {
        if (is_null($remaining)) {
            throw new \InvalidArgumentException('non-nullable remaining cannot be null');
        }
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets creditable
     *
     * @return int|null
     */
    public function getCreditable()
    {
        return $this->container['creditable'];
    }

    /**
     * Sets creditable
     *
     * @param int|null $creditable The amount that can be credited for the period invoice
     *
     * @return self
     */
    public function setCreditable($creditable)
    {
        if (is_null($creditable)) {
            throw new \InvalidArgumentException('non-nullable creditable cannot be null');
        }
        $this->container['creditable'] = $creditable;

        return $this;
    }

    /**
     * Gets periodAmount
     *
     * @return int|null
     */
    public function getPeriodAmount()
    {
        return $this->container['periodAmount'];
    }

    /**
     * Sets periodAmount
     *
     * @param int|null $periodAmount Full period amount for period
     *
     * @return self
     */
    public function setPeriodAmount($periodAmount)
    {
        if (is_null($periodAmount)) {
            throw new \InvalidArgumentException('non-nullable periodAmount cannot be null');
        }
        $this->container['periodAmount'] = $periodAmount;

        return $this;
    }

    /**
     * Gets onlineRefundable
     *
     * @return int|null
     */
    public function getOnlineRefundable()
    {
        return $this->container['onlineRefundable'];
    }

    /**
     * Sets onlineRefundable
     *
     * @param int|null $onlineRefundable The amount that can be online refunded on the subscription
     *
     * @return self
     */
    public function setOnlineRefundable($onlineRefundable)
    {
        if (is_null($onlineRefundable)) {
            throw new \InvalidArgumentException('non-nullable onlineRefundable cannot be null');
        }
        $this->container['onlineRefundable'] = $onlineRefundable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


