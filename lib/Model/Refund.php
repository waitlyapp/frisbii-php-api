<?php
/**
 * Refund
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Refund Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Refund implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Refund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'state' => 'string',
        'invoice' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'transaction' => 'string',
        'type' => 'string',
        'created' => '\DateTime',
        'error' => 'string',
        'creditNoteId' => 'string',
        'refTransaction' => 'string',
        'errorState' => 'string',
        'acquirerMessage' => 'string',
        'accountingNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'invoice' => null,
        'amount' => 'int32',
        'currency' => null,
        'transaction' => null,
        'type' => null,
        'created' => 'date-time',
        'error' => null,
        'creditNoteId' => null,
        'refTransaction' => null,
        'errorState' => null,
        'acquirerMessage' => null,
        'accountingNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'state' => false,
        'invoice' => false,
        'amount' => false,
        'currency' => false,
        'transaction' => false,
        'type' => false,
        'created' => false,
        'error' => false,
        'creditNoteId' => false,
        'refTransaction' => false,
        'errorState' => false,
        'acquirerMessage' => false,
        'accountingNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'invoice' => 'invoice',
        'amount' => 'amount',
        'currency' => 'currency',
        'transaction' => 'transaction',
        'type' => 'type',
        'created' => 'created',
        'error' => 'error',
        'creditNoteId' => 'credit_note_id',
        'refTransaction' => 'ref_transaction',
        'errorState' => 'error_state',
        'acquirerMessage' => 'acquirer_message',
        'accountingNumber' => 'accounting_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'invoice' => 'setInvoice',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'transaction' => 'setTransaction',
        'type' => 'setType',
        'created' => 'setCreated',
        'error' => 'setError',
        'creditNoteId' => 'setCreditNoteId',
        'refTransaction' => 'setRefTransaction',
        'errorState' => 'setErrorState',
        'acquirerMessage' => 'setAcquirerMessage',
        'accountingNumber' => 'setAccountingNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'invoice' => 'getInvoice',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'transaction' => 'getTransaction',
        'type' => 'getType',
        'created' => 'getCreated',
        'error' => 'getError',
        'creditNoteId' => 'getCreditNoteId',
        'refTransaction' => 'getRefTransaction',
        'errorState' => 'getErrorState',
        'acquirerMessage' => 'getAcquirerMessage',
        'accountingNumber' => 'getAccountingNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_REFUNDED = 'refunded';
    public const STATE_FAILED = 'failed';
    public const STATE_PROCESSING = 'processing';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_CARD = 'card';
    public const TYPE_MPO = 'mpo';
    public const TYPE_MOBILEPAY = 'mobilepay';
    public const TYPE_VIPPS = 'vipps';
    public const TYPE_VIPPS_EPAYMENT = 'vipps_epayment';
    public const TYPE_VIPPS_RECURRING = 'vipps_recurring';
    public const TYPE_SWISH = 'swish';
    public const TYPE_VIABILL = 'viabill';
    public const TYPE_ANYDAY = 'anyday';
    public const TYPE_MANUAL = 'manual';
    public const TYPE_APPLEPAY = 'applepay';
    public const TYPE_GOOGLEPAY = 'googlepay';
    public const TYPE_PAYPAL = 'paypal';
    public const TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    public const TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    public const TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    public const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    public const TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    public const TYPE_RESURS = 'resurs';
    public const TYPE_IDEAL = 'ideal';
    public const TYPE_P24 = 'p24';
    public const TYPE_BANCOMATPAY = 'bancomatpay';
    public const TYPE_BLIK = 'blik';
    public const TYPE_GIROPAY = 'giropay';
    public const TYPE_SEPA = 'sepa';
    public const TYPE_VERKKOPANKKI = 'verkkopankki';
    public const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    public const TYPE_EMV_TOKEN = 'emv_token';
    public const TYPE_BCMC = 'bcmc';
    public const TYPE_PP_BLIK_OC = 'pp_blik_oc';
    public const TYPE_TRUSTLY = 'trustly';
    public const TYPE_EPS = 'eps';
    public const TYPE_ESTONIA_BANKS = 'estonia_banks';
    public const TYPE_LATVIA_BANKS = 'latvia_banks';
    public const TYPE_LITHUANIA_BANKS = 'lithuania_banks';
    public const TYPE_MB_WAY = 'mb_way';
    public const TYPE_MULTIBANCO = 'multibanco';
    public const TYPE_MYBANK = 'mybank';
    public const TYPE_PAYCONIQ = 'payconiq';
    public const TYPE_PAYSAFECARD = 'paysafecard';
    public const TYPE_PAYSERA = 'paysera';
    public const TYPE_POSTFINANCE = 'postfinance';
    public const TYPE_SATISPAY = 'satispay';
    public const TYPE_TWINT = 'twint';
    public const TYPE_WECHATPAY = 'wechatpay';
    public const TYPE_SANTANDER = 'santander';
    public const TYPE_OFFLINE_CASH = 'offline_cash';
    public const TYPE_OFFLINE_BANK_TRANSFER = 'offline_bank_transfer';
    public const TYPE_OFFLINE_OTHER = 'offline_other';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const ERROR_STATE_HARD_DECLINED = 'hard_declined';
    public const ERROR_STATE_PROCESSING_ERROR = 'processing_error';
    public const ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_REFUNDED,
            self::STATE_FAILED,
            self::STATE_PROCESSING,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD,
            self::TYPE_MPO,
            self::TYPE_MOBILEPAY,
            self::TYPE_VIPPS,
            self::TYPE_VIPPS_EPAYMENT,
            self::TYPE_VIPPS_RECURRING,
            self::TYPE_SWISH,
            self::TYPE_VIABILL,
            self::TYPE_ANYDAY,
            self::TYPE_MANUAL,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_PAYPAL,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_RESURS,
            self::TYPE_IDEAL,
            self::TYPE_P24,
            self::TYPE_BANCOMATPAY,
            self::TYPE_BLIK,
            self::TYPE_GIROPAY,
            self::TYPE_SEPA,
            self::TYPE_VERKKOPANKKI,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_EMV_TOKEN,
            self::TYPE_BCMC,
            self::TYPE_PP_BLIK_OC,
            self::TYPE_TRUSTLY,
            self::TYPE_EPS,
            self::TYPE_ESTONIA_BANKS,
            self::TYPE_LATVIA_BANKS,
            self::TYPE_LITHUANIA_BANKS,
            self::TYPE_MB_WAY,
            self::TYPE_MULTIBANCO,
            self::TYPE_MYBANK,
            self::TYPE_PAYCONIQ,
            self::TYPE_PAYSAFECARD,
            self::TYPE_PAYSERA,
            self::TYPE_POSTFINANCE,
            self::TYPE_SATISPAY,
            self::TYPE_TWINT,
            self::TYPE_WECHATPAY,
            self::TYPE_SANTANDER,
            self::TYPE_OFFLINE_CASH,
            self::TYPE_OFFLINE_BANK_TRANSFER,
            self::TYPE_OFFLINE_OTHER,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorStateAllowableValues()
    {
        return [
            self::ERROR_STATE_HARD_DECLINED,
            self::ERROR_STATE_PROCESSING_ERROR,
            self::ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('creditNoteId', $data ?? [], null);
        $this->setIfExists('refTransaction', $data ?? [], null);
        $this->setIfExists('errorState', $data ?? [], null);
        $this->setIfExists('acquirerMessage', $data ?? [], null);
        $this->setIfExists('accountingNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ((mb_strlen($this->container['invoice']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['transaction'] === null) {
            $invalidProperties[] = "'transaction' can't be null";
        }
        if ((mb_strlen($this->container['transaction']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($this->container['errorState']) && !in_array($this->container['errorState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'errorState', must be one of '%s'",
                $this->container['errorState'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Refund id assigned by Frisbii
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The refund state either `refunded`, `failed` or `processing`. The processing state can only be returned for asynchronous payment method (not card).
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Refund., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Invoice/charge handle
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }

        if ((mb_strlen($invoice) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice when calling Refund., must be bigger than or equal to 1.');
        }

        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Refunded amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Refund., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency for the account in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string $transaction Transaction id assigned by Frisbii
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }

        if ((mb_strlen($transaction) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction when calling Refund., must be bigger than or equal to 1.');
        }

        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of refund, either `card`, `mpo`, `mobilepay`, `vipps`, `vipps_epayment`, `vipps_recurring`, `swish`, `viabill`, `anyday`, `manual`, `applepay`, `googlepay`, `paypal`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`, `resurs`, `mobilepay_subscriptions`, `emv_token`, `bancomatpay`, `bcmc`, `blik`, `pp_blik_oc`, `giropay`, `ideal`, `p24`, `sepa`, `trustly`, `eps`, `estonia_banks`, `latvia_banks`, `lithuania_banks`, `mb_way`, `multibanco`, `mybank`, `payconiq`, `paysafecard`, `paysera`, `postfinance`, `satispay`, `twint`, `wechatpay`, `santander`,  or `verkkopankki`, `offline_cash`, `offline_bank_transfer`, `offline_other`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created When the refund was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error Frisbii error code if failed. See [transaction errors](https://docs.frisbii.com/reference/transaction_errors).
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets creditNoteId
     *
     * @return string|null
     */
    public function getCreditNoteId()
    {
        return $this->container['creditNoteId'];
    }

    /**
     * Sets creditNoteId
     *
     * @param string|null $creditNoteId Credit note id for successful refund
     *
     * @return self
     */
    public function setCreditNoteId($creditNoteId)
    {
        if (is_null($creditNoteId)) {
            throw new \InvalidArgumentException('non-nullable creditNoteId cannot be null');
        }
        $this->container['creditNoteId'] = $creditNoteId;

        return $this;
    }

    /**
     * Gets refTransaction
     *
     * @return string|null
     */
    public function getRefTransaction()
    {
        return $this->container['refTransaction'];
    }

    /**
     * Sets refTransaction
     *
     * @param string|null $refTransaction Id of a possible settled transaction that has been refunded
     *
     * @return self
     */
    public function setRefTransaction($refTransaction)
    {
        if (is_null($refTransaction)) {
            throw new \InvalidArgumentException('non-nullable refTransaction cannot be null');
        }
        $this->container['refTransaction'] = $refTransaction;

        return $this;
    }

    /**
     * Gets errorState
     *
     * @return string|null
     */
    public function getErrorState()
    {
        return $this->container['errorState'];
    }

    /**
     * Sets errorState
     *
     * @param string|null $errorState Frisbii error state if failed: `hard_declined` or `processing_error`. A hard decline indicates a refund decline by acquirer. A processing error indicates an error processing the refund either at Frisbii, the acquirer, or between Frisbii and the acquirer.
     *
     * @return self
     */
    public function setErrorState($errorState)
    {
        if (is_null($errorState)) {
            throw new \InvalidArgumentException('non-nullable errorState cannot be null');
        }
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!in_array($errorState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'errorState', must be one of '%s'",
                    $errorState,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['errorState'] = $errorState;

        return $this;
    }

    /**
     * Gets acquirerMessage
     *
     * @return string|null
     */
    public function getAcquirerMessage()
    {
        return $this->container['acquirerMessage'];
    }

    /**
     * Sets acquirerMessage
     *
     * @param string|null $acquirerMessage Acquirer message in case of error
     *
     * @return self
     */
    public function setAcquirerMessage($acquirerMessage)
    {
        if (is_null($acquirerMessage)) {
            throw new \InvalidArgumentException('non-nullable acquirerMessage cannot be null');
        }
        $this->container['acquirerMessage'] = $acquirerMessage;

        return $this;
    }

    /**
     * Gets accountingNumber
     *
     * @return string|null
     */
    public function getAccountingNumber()
    {
        return $this->container['accountingNumber'];
    }

    /**
     * Sets accountingNumber
     *
     * @param string|null $accountingNumber Invoice accounting number
     *
     * @return self
     */
    public function setAccountingNumber($accountingNumber)
    {
        if (is_null($accountingNumber)) {
            throw new \InvalidArgumentException('non-nullable accountingNumber cannot be null');
        }
        $this->container['accountingNumber'] = $accountingNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


