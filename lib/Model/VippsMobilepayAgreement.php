<?php
/**
 * VippsMobilepayAgreement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * VippsMobilepayAgreement Class Doc Comment
 *
 * @category Class
 * @description Vipps Mobilepay agreement details
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VippsMobilepayAgreement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VippsMobilepayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantSerialNumber' => 'string',
        'currency' => 'string',
        'minimumUserAge' => 'int',
        'vippsConfigurationSettings' => 'array<string,object>',
        'blockedSources' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantSerialNumber' => null,
        'currency' => null,
        'minimumUserAge' => 'int32',
        'vippsConfigurationSettings' => null,
        'blockedSources' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchantSerialNumber' => false,
        'currency' => false,
        'minimumUserAge' => false,
        'vippsConfigurationSettings' => false,
        'blockedSources' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantSerialNumber' => 'merchantSerialNumber',
        'currency' => 'currency',
        'minimumUserAge' => 'minimumUserAge',
        'vippsConfigurationSettings' => 'vippsConfigurationSettings',
        'blockedSources' => 'blocked_sources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantSerialNumber' => 'setMerchantSerialNumber',
        'currency' => 'setCurrency',
        'minimumUserAge' => 'setMinimumUserAge',
        'vippsConfigurationSettings' => 'setVippsConfigurationSettings',
        'blockedSources' => 'setBlockedSources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantSerialNumber' => 'getMerchantSerialNumber',
        'currency' => 'getCurrency',
        'minimumUserAge' => 'getMinimumUserAge',
        'vippsConfigurationSettings' => 'getVippsConfigurationSettings',
        'blockedSources' => 'getBlockedSources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_NOK = 'NOK';
    public const CURRENCY_DKK = 'DKK';
    public const CURRENCY_EUR = 'EUR';
    public const CURRENCY_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const BLOCKED_SOURCES_COMMERCIAL_CARDS = '[commercial_cards]';
    public const BLOCKED_SOURCES_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_NOK,
            self::CURRENCY_DKK,
            self::CURRENCY_EUR,
            self::CURRENCY_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedSourcesAllowableValues()
    {
        return [
            self::BLOCKED_SOURCES_COMMERCIAL_CARDS,
            self::BLOCKED_SOURCES_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchantSerialNumber', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('minimumUserAge', $data ?? [], null);
        $this->setIfExists('vippsConfigurationSettings', $data ?? [], null);
        $this->setIfExists('blockedSources', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantSerialNumber'] === null) {
            $invalidProperties[] = "'merchantSerialNumber' can't be null";
        }
        if ((mb_strlen($this->container['merchantSerialNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'merchantSerialNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['minimumUserAge']) && ($this->container['minimumUserAge'] > 100)) {
            $invalidProperties[] = "invalid value for 'minimumUserAge', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['minimumUserAge']) && ($this->container['minimumUserAge'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimumUserAge', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantSerialNumber
     *
     * @return string
     */
    public function getMerchantSerialNumber()
    {
        return $this->container['merchantSerialNumber'];
    }

    /**
     * Sets merchantSerialNumber
     *
     * @param string $merchantSerialNumber Merchant serial number
     *
     * @return self
     */
    public function setMerchantSerialNumber($merchantSerialNumber)
    {
        if (is_null($merchantSerialNumber)) {
            throw new \InvalidArgumentException('non-nullable merchantSerialNumber cannot be null');
        }

        if ((mb_strlen($merchantSerialNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $merchantSerialNumber when calling VippsMobilepayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['merchantSerialNumber'] = $merchantSerialNumber;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency to use for the agreement
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets minimumUserAge
     *
     * @return int|null
     */
    public function getMinimumUserAge()
    {
        return $this->container['minimumUserAge'];
    }

    /**
     * Sets minimumUserAge
     *
     * @param int|null $minimumUserAge Minimum age that a customer needs to have to successfully complete payments
     *
     * @return self
     */
    public function setMinimumUserAge($minimumUserAge)
    {
        if (is_null($minimumUserAge)) {
            throw new \InvalidArgumentException('non-nullable minimumUserAge cannot be null');
        }

        if (($minimumUserAge > 100)) {
            throw new \InvalidArgumentException('invalid value for $minimumUserAge when calling VippsMobilepayAgreement., must be smaller than or equal to 100.');
        }
        if (($minimumUserAge < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimumUserAge when calling VippsMobilepayAgreement., must be bigger than or equal to 0.');
        }

        $this->container['minimumUserAge'] = $minimumUserAge;

        return $this;
    }

    /**
     * Gets vippsConfigurationSettings
     *
     * @return array<string,object>|null
     */
    public function getVippsConfigurationSettings()
    {
        return $this->container['vippsConfigurationSettings'];
    }

    /**
     * Sets vippsConfigurationSettings
     *
     * @param array<string,object>|null $vippsConfigurationSettings The configuration settings for this merchant agreement in Vipps' system
     *
     * @return self
     */
    public function setVippsConfigurationSettings($vippsConfigurationSettings)
    {
        if (is_null($vippsConfigurationSettings)) {
            throw new \InvalidArgumentException('non-nullable vippsConfigurationSettings cannot be null');
        }
        $this->container['vippsConfigurationSettings'] = $vippsConfigurationSettings;

        return $this;
    }

    /**
     * Gets blockedSources
     *
     * @return string[]|null
     */
    public function getBlockedSources()
    {
        return $this->container['blockedSources'];
    }

    /**
     * Sets blockedSources
     *
     * @param string[]|null $blockedSources Require Vipps ePayment to use blocked sources, does not work for Norwegian users
     *
     * @return self
     */
    public function setBlockedSources($blockedSources)
    {
        if (is_null($blockedSources)) {
            throw new \InvalidArgumentException('non-nullable blockedSources cannot be null');
        }
        $allowedValues = $this->getBlockedSourcesAllowableValues();
        if (array_diff($blockedSources, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'blockedSources', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['blockedSources'] = $blockedSources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


