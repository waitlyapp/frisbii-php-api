<?php
/**
 * CreateRefund
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreateRefund Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateRefund implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateRefund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice' => 'string',
        'key' => 'string',
        'amount' => 'int',
        'vat' => 'float',
        'text' => 'string',
        'amountInclVat' => 'bool',
        'noteLines' => '\Frisbii\Model\CreateCreditNoteLine[]',
        'manualTransfer' => '\Frisbii\Model\ManualRefundTransfer',
        'acquirerReference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoice' => null,
        'key' => null,
        'amount' => 'int32',
        'vat' => 'float',
        'text' => null,
        'amountInclVat' => null,
        'noteLines' => null,
        'manualTransfer' => null,
        'acquirerReference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoice' => false,
        'key' => false,
        'amount' => false,
        'vat' => false,
        'text' => false,
        'amountInclVat' => false,
        'noteLines' => false,
        'manualTransfer' => false,
        'acquirerReference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice' => 'invoice',
        'key' => 'key',
        'amount' => 'amount',
        'vat' => 'vat',
        'text' => 'text',
        'amountInclVat' => 'amount_incl_vat',
        'noteLines' => 'note_lines',
        'manualTransfer' => 'manual_transfer',
        'acquirerReference' => 'acquirer_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice' => 'setInvoice',
        'key' => 'setKey',
        'amount' => 'setAmount',
        'vat' => 'setVat',
        'text' => 'setText',
        'amountInclVat' => 'setAmountInclVat',
        'noteLines' => 'setNoteLines',
        'manualTransfer' => 'setManualTransfer',
        'acquirerReference' => 'setAcquirerReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice' => 'getInvoice',
        'key' => 'getKey',
        'amount' => 'getAmount',
        'vat' => 'getVat',
        'text' => 'getText',
        'amountInclVat' => 'getAmountInclVat',
        'noteLines' => 'getNoteLines',
        'manualTransfer' => 'getManualTransfer',
        'acquirerReference' => 'getAcquirerReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('amountInclVat', $data ?? [], null);
        $this->setIfExists('noteLines', $data ?? [], null);
        $this->setIfExists('manualTransfer', $data ?? [], null);
        $this->setIfExists('acquirerReference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ((mb_strlen($this->container['invoice']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['noteLines']) && (count($this->container['noteLines']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'noteLines', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['noteLines']) && (count($this->container['noteLines']) < 1)) {
            $invalidProperties[] = "invalid value for 'noteLines', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Handle or id for invoice/charge to refund
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }

        if ((mb_strlen($invoice) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice when calling CreateRefund., must be bigger than or equal to 1.');
        }

        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key Optional idempotency key. Only one refund can be performed for the same key. An idempotency key identifies uniquely the request and multiple requests with the same key and invoice will yield the same result. In case of networking errors the same request with same key can safely be retried.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Optional amount in the smallest unit for the account currency. Either `amount` or `note_lines` can be provided, if neither is provided the full refundable amount is refunded.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreateRefund., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat Optional vat for this refund.
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Optional refund text to use on credit note. Used in conjunction with `amount`. Ignored if `note_lines` is provided.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return bool|null
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param bool|null $amountInclVat Whether the amount is including VAT. Default true.
     *
     * @return self
     */
    public function setAmountInclVat($amountInclVat)
    {
        if (is_null($amountInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountInclVat cannot be null');
        }
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets noteLines
     *
     * @return \Frisbii\Model\CreateCreditNoteLine[]|null
     */
    public function getNoteLines()
    {
        return $this->container['noteLines'];
    }

    /**
     * Sets noteLines
     *
     * @param \Frisbii\Model\CreateCreditNoteLine[]|null $noteLines Refund credit note lines to give detailed information for credit note. Alternative to `amount`.
     *
     * @return self
     */
    public function setNoteLines($noteLines)
    {
        if (is_null($noteLines)) {
            throw new \InvalidArgumentException('non-nullable noteLines cannot be null');
        }

        if ((count($noteLines) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $noteLines when calling CreateRefund., number of items must be less than or equal to 2147483647.');
        }
        if ((count($noteLines) < 1)) {
            throw new \InvalidArgumentException('invalid length for $noteLines when calling CreateRefund., number of items must be greater than or equal to 1.');
        }
        $this->container['noteLines'] = $noteLines;

        return $this;
    }

    /**
     * Gets manualTransfer
     *
     * @return \Frisbii\Model\ManualRefundTransfer|null
     */
    public function getManualTransfer()
    {
        return $this->container['manualTransfer'];
    }

    /**
     * Sets manualTransfer
     *
     * @param \Frisbii\Model\ManualRefundTransfer|null $manualTransfer manualTransfer
     *
     * @return self
     */
    public function setManualTransfer($manualTransfer)
    {
        if (is_null($manualTransfer)) {
            throw new \InvalidArgumentException('non-nullable manualTransfer cannot be null');
        }
        $this->container['manualTransfer'] = $manualTransfer;

        return $this;
    }

    /**
     * Gets acquirerReference
     *
     * @return string|null
     */
    public function getAcquirerReference()
    {
        return $this->container['acquirerReference'];
    }

    /**
     * Sets acquirerReference
     *
     * @param string|null $acquirerReference Optional reference for the transaction at the acquirer. Notice the following about this argument: 1. It only works for some acquirers. 2. Acquirers may have rigid rules on the content of the acquirer reference.  Not complying to these rules can result in declined payments. 3. It is already possible to define custom acquirer reference using templating in the Frisbii Administration.  Contact support for help. We highly recommend to only supply this argument if absolutely necessary,  and the templated default acquirer reference is not sufficient. Maximum length is 128,  but most acquirers require a maximum length of 22 characters.  Truncating will be applied if too long for specific acquirer.  Characters must match regex `[\\x20-\\x7F]`
     *
     * @return self
     */
    public function setAcquirerReference($acquirerReference)
    {
        if (is_null($acquirerReference)) {
            throw new \InvalidArgumentException('non-nullable acquirerReference cannot be null');
        }
        $this->container['acquirerReference'] = $acquirerReference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


