<?php
/**
 * CreateSepaEbicsAgreement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreateSepaEbicsAgreement Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSepaEbicsAgreement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSepaEbicsAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'iban' => 'string',
        'bic' => 'string',
        'scope' => 'string',
        'url' => 'string',
        'companyName' => 'string',
        'companyAddress' => 'string',
        'companyPostalCode' => 'string',
        'companyCity' => 'string',
        'companyCountry' => 'string',
        'bankName' => 'string',
        'creditorIdentifier' => 'string',
        'userId' => 'string',
        'customerId' => 'string',
        'hostId' => 'string',
        'doNotUseSimulator' => 'bool',
        'secureSepa' => 'bool',
        'tinkMerchantId' => 'string',
        'sepaBatchBooking' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'iban' => null,
        'bic' => null,
        'scope' => null,
        'url' => null,
        'companyName' => null,
        'companyAddress' => null,
        'companyPostalCode' => null,
        'companyCity' => null,
        'companyCountry' => null,
        'bankName' => null,
        'creditorIdentifier' => null,
        'userId' => null,
        'customerId' => null,
        'hostId' => null,
        'doNotUseSimulator' => null,
        'secureSepa' => null,
        'tinkMerchantId' => null,
        'sepaBatchBooking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'iban' => false,
        'bic' => false,
        'scope' => false,
        'url' => false,
        'companyName' => false,
        'companyAddress' => false,
        'companyPostalCode' => false,
        'companyCity' => false,
        'companyCountry' => false,
        'bankName' => false,
        'creditorIdentifier' => false,
        'userId' => false,
        'customerId' => false,
        'hostId' => false,
        'doNotUseSimulator' => false,
        'secureSepa' => false,
        'tinkMerchantId' => false,
        'sepaBatchBooking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iban' => 'iban',
        'bic' => 'bic',
        'scope' => 'scope',
        'url' => 'url',
        'companyName' => 'company_name',
        'companyAddress' => 'company_address',
        'companyPostalCode' => 'company_postal_code',
        'companyCity' => 'company_city',
        'companyCountry' => 'company_country',
        'bankName' => 'bank_name',
        'creditorIdentifier' => 'creditor_identifier',
        'userId' => 'user_id',
        'customerId' => 'customer_id',
        'hostId' => 'host_id',
        'doNotUseSimulator' => 'do_not_use_simulator',
        'secureSepa' => 'secure_sepa',
        'tinkMerchantId' => 'tink_merchant_id',
        'sepaBatchBooking' => 'sepa_batch_booking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iban' => 'setIban',
        'bic' => 'setBic',
        'scope' => 'setScope',
        'url' => 'setUrl',
        'companyName' => 'setCompanyName',
        'companyAddress' => 'setCompanyAddress',
        'companyPostalCode' => 'setCompanyPostalCode',
        'companyCity' => 'setCompanyCity',
        'companyCountry' => 'setCompanyCountry',
        'bankName' => 'setBankName',
        'creditorIdentifier' => 'setCreditorIdentifier',
        'userId' => 'setUserId',
        'customerId' => 'setCustomerId',
        'hostId' => 'setHostId',
        'doNotUseSimulator' => 'setDoNotUseSimulator',
        'secureSepa' => 'setSecureSepa',
        'tinkMerchantId' => 'setTinkMerchantId',
        'sepaBatchBooking' => 'setSepaBatchBooking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iban' => 'getIban',
        'bic' => 'getBic',
        'scope' => 'getScope',
        'url' => 'getUrl',
        'companyName' => 'getCompanyName',
        'companyAddress' => 'getCompanyAddress',
        'companyPostalCode' => 'getCompanyPostalCode',
        'companyCity' => 'getCompanyCity',
        'companyCountry' => 'getCompanyCountry',
        'bankName' => 'getBankName',
        'creditorIdentifier' => 'getCreditorIdentifier',
        'userId' => 'getUserId',
        'customerId' => 'getCustomerId',
        'hostId' => 'getHostId',
        'doNotUseSimulator' => 'getDoNotUseSimulator',
        'secureSepa' => 'getSecureSepa',
        'tinkMerchantId' => 'getTinkMerchantId',
        'sepaBatchBooking' => 'getSepaBatchBooking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('companyAddress', $data ?? [], null);
        $this->setIfExists('companyPostalCode', $data ?? [], null);
        $this->setIfExists('companyCity', $data ?? [], null);
        $this->setIfExists('companyCountry', $data ?? [], null);
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('creditorIdentifier', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('hostId', $data ?? [], null);
        $this->setIfExists('doNotUseSimulator', $data ?? [], null);
        $this->setIfExists('secureSepa', $data ?? [], null);
        $this->setIfExists('tinkMerchantId', $data ?? [], null);
        $this->setIfExists('sepaBatchBooking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['bic'] === null) {
            $invalidProperties[] = "'bic' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ((mb_strlen($this->container['scope']) < 1)) {
            $invalidProperties[] = "invalid value for 'scope', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ((mb_strlen($this->container['url']) < 1)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['companyName'] === null) {
            $invalidProperties[] = "'companyName' can't be null";
        }
        if ((mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['companyAddress'] === null) {
            $invalidProperties[] = "'companyAddress' can't be null";
        }
        if ($this->container['companyPostalCode'] === null) {
            $invalidProperties[] = "'companyPostalCode' can't be null";
        }
        if ($this->container['companyCity'] === null) {
            $invalidProperties[] = "'companyCity' can't be null";
        }
        if ($this->container['companyCountry'] === null) {
            $invalidProperties[] = "'companyCountry' can't be null";
        }
        if ($this->container['bankName'] === null) {
            $invalidProperties[] = "'bankName' can't be null";
        }
        if ((mb_strlen($this->container['bankName']) < 1)) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['creditorIdentifier'] === null) {
            $invalidProperties[] = "'creditorIdentifier' can't be null";
        }
        if ((mb_strlen($this->container['creditorIdentifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'creditorIdentifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ((mb_strlen($this->container['userId']) < 1)) {
            $invalidProperties[] = "invalid value for 'userId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['customerId'] === null) {
            $invalidProperties[] = "'customerId' can't be null";
        }
        if ((mb_strlen($this->container['customerId']) < 1)) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['hostId'] === null) {
            $invalidProperties[] = "'hostId' can't be null";
        }
        if ((mb_strlen($this->container['hostId']) < 1)) {
            $invalidProperties[] = "invalid value for 'hostId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban Company IBAN
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic Bank Identifier Code
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Defines country specific set of rules according to which a message file is created since EBICS 3.0. Used for sending/fetching data to/from bank.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }

        if ((mb_strlen($scope) < 1)) {
            throw new \InvalidArgumentException('invalid length for $scope when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Value received from bank
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        if ((mb_strlen($url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $url when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName Company name
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (is_null($companyName)) {
            throw new \InvalidArgumentException('non-nullable companyName cannot be null');
        }

        if ((mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets companyAddress
     *
     * @return string
     */
    public function getCompanyAddress()
    {
        return $this->container['companyAddress'];
    }

    /**
     * Sets companyAddress
     *
     * @param string $companyAddress Company name
     *
     * @return self
     */
    public function setCompanyAddress($companyAddress)
    {
        if (is_null($companyAddress)) {
            throw new \InvalidArgumentException('non-nullable companyAddress cannot be null');
        }
        $this->container['companyAddress'] = $companyAddress;

        return $this;
    }

    /**
     * Gets companyPostalCode
     *
     * @return string
     */
    public function getCompanyPostalCode()
    {
        return $this->container['companyPostalCode'];
    }

    /**
     * Sets companyPostalCode
     *
     * @param string $companyPostalCode Company postal code
     *
     * @return self
     */
    public function setCompanyPostalCode($companyPostalCode)
    {
        if (is_null($companyPostalCode)) {
            throw new \InvalidArgumentException('non-nullable companyPostalCode cannot be null');
        }
        $this->container['companyPostalCode'] = $companyPostalCode;

        return $this;
    }

    /**
     * Gets companyCity
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['companyCity'];
    }

    /**
     * Sets companyCity
     *
     * @param string $companyCity Company city
     *
     * @return self
     */
    public function setCompanyCity($companyCity)
    {
        if (is_null($companyCity)) {
            throw new \InvalidArgumentException('non-nullable companyCity cannot be null');
        }
        $this->container['companyCity'] = $companyCity;

        return $this;
    }

    /**
     * Gets companyCountry
     *
     * @return string
     */
    public function getCompanyCountry()
    {
        return $this->container['companyCountry'];
    }

    /**
     * Sets companyCountry
     *
     * @param string $companyCountry Company country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return self
     */
    public function setCompanyCountry($companyCountry)
    {
        if (is_null($companyCountry)) {
            throw new \InvalidArgumentException('non-nullable companyCountry cannot be null');
        }
        $this->container['companyCountry'] = $companyCountry;

        return $this;
    }

    /**
     * Gets bankName
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string $bankName Readable bank name
     *
     * @return self
     */
    public function setBankName($bankName)
    {
        if (is_null($bankName)) {
            throw new \InvalidArgumentException('non-nullable bankName cannot be null');
        }

        if ((mb_strlen($bankName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets creditorIdentifier
     *
     * @return string
     */
    public function getCreditorIdentifier()
    {
        return $this->container['creditorIdentifier'];
    }

    /**
     * Sets creditorIdentifier
     *
     * @param string $creditorIdentifier Creditor identifier
     *
     * @return self
     */
    public function setCreditorIdentifier($creditorIdentifier)
    {
        if (is_null($creditorIdentifier)) {
            throw new \InvalidArgumentException('non-nullable creditorIdentifier cannot be null');
        }

        if ((mb_strlen($creditorIdentifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $creditorIdentifier when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['creditorIdentifier'] = $creditorIdentifier;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId Value received from bank
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }

        if ((mb_strlen($userId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $userId when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string $customerId Value received from bank
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }

        if ((mb_strlen($customerId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets hostId
     *
     * @return string
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     *
     * @param string $hostId Value received from bank
     *
     * @return self
     */
    public function setHostId($hostId)
    {
        if (is_null($hostId)) {
            throw new \InvalidArgumentException('non-nullable hostId cannot be null');
        }

        if ((mb_strlen($hostId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hostId when calling CreateSepaEbicsAgreement., must be bigger than or equal to 1.');
        }

        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets doNotUseSimulator
     *
     * @return bool|null
     */
    public function getDoNotUseSimulator()
    {
        return $this->container['doNotUseSimulator'];
    }

    /**
     * Sets doNotUseSimulator
     *
     * @param bool|null $doNotUseSimulator For test agreements, should simulator not be used
     *
     * @return self
     */
    public function setDoNotUseSimulator($doNotUseSimulator)
    {
        if (is_null($doNotUseSimulator)) {
            throw new \InvalidArgumentException('non-nullable doNotUseSimulator cannot be null');
        }
        $this->container['doNotUseSimulator'] = $doNotUseSimulator;

        return $this;
    }

    /**
     * Gets secureSepa
     *
     * @return bool|null
     */
    public function getSecureSepa()
    {
        return $this->container['secureSepa'];
    }

    /**
     * Sets secureSepa
     *
     * @param bool|null $secureSepa Optional account validation for SEPA account
     *
     * @return self
     */
    public function setSecureSepa($secureSepa)
    {
        if (is_null($secureSepa)) {
            throw new \InvalidArgumentException('non-nullable secureSepa cannot be null');
        }
        $this->container['secureSepa'] = $secureSepa;

        return $this;
    }

    /**
     * Gets tinkMerchantId
     *
     * @return string|null
     */
    public function getTinkMerchantId()
    {
        return $this->container['tinkMerchantId'];
    }

    /**
     * Sets tinkMerchantId
     *
     * @param string|null $tinkMerchantId Optional custom merchant id for secure SEPA
     *
     * @return self
     */
    public function setTinkMerchantId($tinkMerchantId)
    {
        if (is_null($tinkMerchantId)) {
            throw new \InvalidArgumentException('non-nullable tinkMerchantId cannot be null');
        }
        $this->container['tinkMerchantId'] = $tinkMerchantId;

        return $this;
    }

    /**
     * Gets sepaBatchBooking
     *
     * @return bool|null
     */
    public function getSepaBatchBooking()
    {
        return $this->container['sepaBatchBooking'];
    }

    /**
     * Sets sepaBatchBooking
     *
     * @param bool|null $sepaBatchBooking Indicator of transactions should be reported individually or in bulk on bank statement
     *
     * @return self
     */
    public function setSepaBatchBooking($sepaBatchBooking)
    {
        if (is_null($sepaBatchBooking)) {
            throw new \InvalidArgumentException('non-nullable sepaBatchBooking cannot be null');
        }
        $this->container['sepaBatchBooking'] = $sepaBatchBooking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


