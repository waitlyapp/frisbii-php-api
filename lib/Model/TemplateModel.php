<?php
/**
 * TemplateModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * TemplateModel Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mps' => 'array<string,object>',
        'subscriptionChanged' => 'array<string,object>',
        'planChanged' => 'array<string,object>',
        'webhookAlert' => 'array<string,object>',
        'compensation' => 'array<string,object>',
        'test' => 'bool',
        'dunning' => 'array<string,object>',
        'userAccount' => 'array<string,object>',
        'plan' => 'array<string,object>',
        'invoice' => 'array<string,object>',
        'refund' => 'array<string,object>',
        'subscription' => 'array<string,object>',
        'user' => 'array<string,object>',
        'card' => 'array<string,object>',
        'customer' => 'array<string,object>',
        'account' => 'array<string,object>',
        'empty' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mps' => null,
        'subscriptionChanged' => null,
        'planChanged' => null,
        'webhookAlert' => null,
        'compensation' => null,
        'test' => null,
        'dunning' => null,
        'userAccount' => null,
        'plan' => null,
        'invoice' => null,
        'refund' => null,
        'subscription' => null,
        'user' => null,
        'card' => null,
        'customer' => null,
        'account' => null,
        'empty' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mps' => false,
        'subscriptionChanged' => false,
        'planChanged' => false,
        'webhookAlert' => false,
        'compensation' => false,
        'test' => false,
        'dunning' => false,
        'userAccount' => false,
        'plan' => false,
        'invoice' => false,
        'refund' => false,
        'subscription' => false,
        'user' => false,
        'card' => false,
        'customer' => false,
        'account' => false,
        'empty' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mps' => 'mps',
        'subscriptionChanged' => 'subscriptionChanged',
        'planChanged' => 'planChanged',
        'webhookAlert' => 'webhookAlert',
        'compensation' => 'compensation',
        'test' => 'test',
        'dunning' => 'dunning',
        'userAccount' => 'userAccount',
        'plan' => 'plan',
        'invoice' => 'invoice',
        'refund' => 'refund',
        'subscription' => 'subscription',
        'user' => 'user',
        'card' => 'card',
        'customer' => 'customer',
        'account' => 'account',
        'empty' => 'empty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mps' => 'setMps',
        'subscriptionChanged' => 'setSubscriptionChanged',
        'planChanged' => 'setPlanChanged',
        'webhookAlert' => 'setWebhookAlert',
        'compensation' => 'setCompensation',
        'test' => 'setTest',
        'dunning' => 'setDunning',
        'userAccount' => 'setUserAccount',
        'plan' => 'setPlan',
        'invoice' => 'setInvoice',
        'refund' => 'setRefund',
        'subscription' => 'setSubscription',
        'user' => 'setUser',
        'card' => 'setCard',
        'customer' => 'setCustomer',
        'account' => 'setAccount',
        'empty' => 'setEmpty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mps' => 'getMps',
        'subscriptionChanged' => 'getSubscriptionChanged',
        'planChanged' => 'getPlanChanged',
        'webhookAlert' => 'getWebhookAlert',
        'compensation' => 'getCompensation',
        'test' => 'getTest',
        'dunning' => 'getDunning',
        'userAccount' => 'getUserAccount',
        'plan' => 'getPlan',
        'invoice' => 'getInvoice',
        'refund' => 'getRefund',
        'subscription' => 'getSubscription',
        'user' => 'getUser',
        'card' => 'getCard',
        'customer' => 'getCustomer',
        'account' => 'getAccount',
        'empty' => 'getEmpty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mps', $data ?? [], null);
        $this->setIfExists('subscriptionChanged', $data ?? [], null);
        $this->setIfExists('planChanged', $data ?? [], null);
        $this->setIfExists('webhookAlert', $data ?? [], null);
        $this->setIfExists('compensation', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('dunning', $data ?? [], null);
        $this->setIfExists('userAccount', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('refund', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('empty', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mps
     *
     * @return array<string,object>|null
     */
    public function getMps()
    {
        return $this->container['mps'];
    }

    /**
     * Sets mps
     *
     * @param array<string,object>|null $mps mps
     *
     * @return self
     */
    public function setMps($mps)
    {
        if (is_null($mps)) {
            throw new \InvalidArgumentException('non-nullable mps cannot be null');
        }
        $this->container['mps'] = $mps;

        return $this;
    }

    /**
     * Gets subscriptionChanged
     *
     * @return array<string,object>|null
     */
    public function getSubscriptionChanged()
    {
        return $this->container['subscriptionChanged'];
    }

    /**
     * Sets subscriptionChanged
     *
     * @param array<string,object>|null $subscriptionChanged subscriptionChanged
     *
     * @return self
     */
    public function setSubscriptionChanged($subscriptionChanged)
    {
        if (is_null($subscriptionChanged)) {
            throw new \InvalidArgumentException('non-nullable subscriptionChanged cannot be null');
        }
        $this->container['subscriptionChanged'] = $subscriptionChanged;

        return $this;
    }

    /**
     * Gets planChanged
     *
     * @return array<string,object>|null
     */
    public function getPlanChanged()
    {
        return $this->container['planChanged'];
    }

    /**
     * Sets planChanged
     *
     * @param array<string,object>|null $planChanged planChanged
     *
     * @return self
     */
    public function setPlanChanged($planChanged)
    {
        if (is_null($planChanged)) {
            throw new \InvalidArgumentException('non-nullable planChanged cannot be null');
        }
        $this->container['planChanged'] = $planChanged;

        return $this;
    }

    /**
     * Gets webhookAlert
     *
     * @return array<string,object>|null
     */
    public function getWebhookAlert()
    {
        return $this->container['webhookAlert'];
    }

    /**
     * Sets webhookAlert
     *
     * @param array<string,object>|null $webhookAlert webhookAlert
     *
     * @return self
     */
    public function setWebhookAlert($webhookAlert)
    {
        if (is_null($webhookAlert)) {
            throw new \InvalidArgumentException('non-nullable webhookAlert cannot be null');
        }
        $this->container['webhookAlert'] = $webhookAlert;

        return $this;
    }

    /**
     * Gets compensation
     *
     * @return array<string,object>|null
     */
    public function getCompensation()
    {
        return $this->container['compensation'];
    }

    /**
     * Sets compensation
     *
     * @param array<string,object>|null $compensation compensation
     *
     * @return self
     */
    public function setCompensation($compensation)
    {
        if (is_null($compensation)) {
            throw new \InvalidArgumentException('non-nullable compensation cannot be null');
        }
        $this->container['compensation'] = $compensation;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool|null
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool|null $test test
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets dunning
     *
     * @return array<string,object>|null
     */
    public function getDunning()
    {
        return $this->container['dunning'];
    }

    /**
     * Sets dunning
     *
     * @param array<string,object>|null $dunning dunning
     *
     * @return self
     */
    public function setDunning($dunning)
    {
        if (is_null($dunning)) {
            throw new \InvalidArgumentException('non-nullable dunning cannot be null');
        }
        $this->container['dunning'] = $dunning;

        return $this;
    }

    /**
     * Gets userAccount
     *
     * @return array<string,object>|null
     */
    public function getUserAccount()
    {
        return $this->container['userAccount'];
    }

    /**
     * Sets userAccount
     *
     * @param array<string,object>|null $userAccount userAccount
     *
     * @return self
     */
    public function setUserAccount($userAccount)
    {
        if (is_null($userAccount)) {
            throw new \InvalidArgumentException('non-nullable userAccount cannot be null');
        }
        $this->container['userAccount'] = $userAccount;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return array<string,object>|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param array<string,object>|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return array<string,object>|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param array<string,object>|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return array<string,object>|null
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param array<string,object>|null $refund refund
     *
     * @return self
     */
    public function setRefund($refund)
    {
        if (is_null($refund)) {
            throw new \InvalidArgumentException('non-nullable refund cannot be null');
        }
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return array<string,object>|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param array<string,object>|null $subscription subscription
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets user
     *
     * @return array<string,object>|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param array<string,object>|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets card
     *
     * @return array<string,object>|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param array<string,object>|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return array<string,object>|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param array<string,object>|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets account
     *
     * @return array<string,object>|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param array<string,object>|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool|null
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool|null $empty empty
     *
     * @return self
     */
    public function setEmpty($empty)
    {
        if (is_null($empty)) {
            throw new \InvalidArgumentException('non-nullable empty cannot be null');
        }
        $this->container['empty'] = $empty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


