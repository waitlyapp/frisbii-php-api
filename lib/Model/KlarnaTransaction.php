<?php
/**
 * KlarnaTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * KlarnaTransaction Class Doc Comment
 *
 * @category Class
 * @description Specifics in case of Klarna transaction
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KlarnaTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KlarnaTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'error' => 'string',
        'refTransaction' => 'string',
        'errorState' => 'string',
        'acquirerMessage' => 'string',
        'klarnaId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'error' => null,
        'refTransaction' => null,
        'errorState' => null,
        'acquirerMessage' => null,
        'klarnaId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'error' => false,
        'refTransaction' => false,
        'errorState' => false,
        'acquirerMessage' => false,
        'klarnaId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'error' => 'error',
        'refTransaction' => 'ref_transaction',
        'errorState' => 'error_state',
        'acquirerMessage' => 'acquirer_message',
        'klarnaId' => 'klarna_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'error' => 'setError',
        'refTransaction' => 'setRefTransaction',
        'errorState' => 'setErrorState',
        'acquirerMessage' => 'setAcquirerMessage',
        'klarnaId' => 'setKlarnaId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'error' => 'getError',
        'refTransaction' => 'getRefTransaction',
        'errorState' => 'getErrorState',
        'acquirerMessage' => 'getAcquirerMessage',
        'klarnaId' => 'getKlarnaId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PAY_NOW = 'klarna_pay_now';
    public const TYPE_PAY_LATER = 'klarna_pay_later';
    public const TYPE_SLICE_IT = 'klarna_slice_it';
    public const TYPE_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    public const TYPE_DIRECT_DEBIT = 'klarna_direct_debit';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const ERROR_STATE_PENDING = 'pending';
    public const ERROR_STATE_SOFT_DECLINED = 'soft_declined';
    public const ERROR_STATE_HARD_DECLINED = 'hard_declined';
    public const ERROR_STATE_PROCESSING_ERROR = 'processing_error';
    public const ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PAY_NOW,
            self::TYPE_PAY_LATER,
            self::TYPE_SLICE_IT,
            self::TYPE_DIRECT_BANK_TRANSFER,
            self::TYPE_DIRECT_DEBIT,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorStateAllowableValues()
    {
        return [
            self::ERROR_STATE_PENDING,
            self::ERROR_STATE_SOFT_DECLINED,
            self::ERROR_STATE_HARD_DECLINED,
            self::ERROR_STATE_PROCESSING_ERROR,
            self::ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('refTransaction', $data ?? [], null);
        $this->setIfExists('errorState', $data ?? [], null);
        $this->setIfExists('acquirerMessage', $data ?? [], null);
        $this->setIfExists('klarnaId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($this->container['errorState']) && !in_array($this->container['errorState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'errorState', must be one of '%s'",
                $this->container['errorState'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Transaction type: `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error Error code if failed. See [transaction errors](https://docs.frisbii.com/reference/transaction_errors).
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets refTransaction
     *
     * @return string|null
     */
    public function getRefTransaction()
    {
        return $this->container['refTransaction'];
    }

    /**
     * Sets refTransaction
     *
     * @param string|null $refTransaction Id of a possible referenced transaction
     *
     * @return self
     */
    public function setRefTransaction($refTransaction)
    {
        if (is_null($refTransaction)) {
            throw new \InvalidArgumentException('non-nullable refTransaction cannot be null');
        }
        $this->container['refTransaction'] = $refTransaction;

        return $this;
    }

    /**
     * Gets errorState
     *
     * @return string|null
     */
    public function getErrorState()
    {
        return $this->container['errorState'];
    }

    /**
     * Sets errorState
     *
     * @param string|null $errorState Error state if failed: `pending`, `soft_declined`, `hard_declined` or `processing_error`
     *
     * @return self
     */
    public function setErrorState($errorState)
    {
        if (is_null($errorState)) {
            throw new \InvalidArgumentException('non-nullable errorState cannot be null');
        }
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!in_array($errorState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'errorState', must be one of '%s'",
                    $errorState,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['errorState'] = $errorState;

        return $this;
    }

    /**
     * Gets acquirerMessage
     *
     * @return string|null
     */
    public function getAcquirerMessage()
    {
        return $this->container['acquirerMessage'];
    }

    /**
     * Sets acquirerMessage
     *
     * @param string|null $acquirerMessage Acquirer message in case of error
     *
     * @return self
     */
    public function setAcquirerMessage($acquirerMessage)
    {
        if (is_null($acquirerMessage)) {
            throw new \InvalidArgumentException('non-nullable acquirerMessage cannot be null');
        }
        $this->container['acquirerMessage'] = $acquirerMessage;

        return $this;
    }

    /**
     * Gets klarnaId
     *
     * @return string|null
     */
    public function getKlarnaId()
    {
        return $this->container['klarnaId'];
    }

    /**
     * Sets klarnaId
     *
     * @param string|null $klarnaId Klarna id
     *
     * @return self
     */
    public function setKlarnaId($klarnaId)
    {
        if (is_null($klarnaId)) {
            throw new \InvalidArgumentException('non-nullable klarnaId cannot be null');
        }
        $this->container['klarnaId'] = $klarnaId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


