<?php
/**
 * CancelSubscription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CancelSubscription Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CancelSubscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CancelSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'noticePeriods' => 'int',
        'noticePeriodsAfterCurrent' => 'bool',
        'expireAt' => 'string',
        'trialWithNoticeAndFixation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'noticePeriods' => 'int32',
        'noticePeriodsAfterCurrent' => null,
        'expireAt' => null,
        'trialWithNoticeAndFixation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'noticePeriods' => false,
        'noticePeriodsAfterCurrent' => false,
        'expireAt' => false,
        'trialWithNoticeAndFixation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'noticePeriods' => 'notice_periods',
        'noticePeriodsAfterCurrent' => 'notice_periods_after_current',
        'expireAt' => 'expire_at',
        'trialWithNoticeAndFixation' => 'trial_with_notice_and_fixation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'noticePeriods' => 'setNoticePeriods',
        'noticePeriodsAfterCurrent' => 'setNoticePeriodsAfterCurrent',
        'expireAt' => 'setExpireAt',
        'trialWithNoticeAndFixation' => 'setTrialWithNoticeAndFixation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'noticePeriods' => 'getNoticePeriods',
        'noticePeriodsAfterCurrent' => 'getNoticePeriodsAfterCurrent',
        'expireAt' => 'getExpireAt',
        'trialWithNoticeAndFixation' => 'getTrialWithNoticeAndFixation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('noticePeriods', $data ?? [], null);
        $this->setIfExists('noticePeriodsAfterCurrent', $data ?? [], null);
        $this->setIfExists('expireAt', $data ?? [], null);
        $this->setIfExists('trialWithNoticeAndFixation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets noticePeriods
     *
     * @return int|null
     */
    public function getNoticePeriods()
    {
        return $this->container['noticePeriods'];
    }

    /**
     * Sets noticePeriods
     *
     * @param int|null $noticePeriods Optional override of the notice periods set for plan. See plan for the definition of notice periods.
     *
     * @return self
     */
    public function setNoticePeriods($noticePeriods)
    {
        if (is_null($noticePeriods)) {
            throw new \InvalidArgumentException('non-nullable noticePeriods cannot be null');
        }
        $this->container['noticePeriods'] = $noticePeriods;

        return $this;
    }

    /**
     * Gets noticePeriodsAfterCurrent
     *
     * @return bool|null
     */
    public function getNoticePeriodsAfterCurrent()
    {
        return $this->container['noticePeriodsAfterCurrent'];
    }

    /**
     * Sets noticePeriodsAfterCurrent
     *
     * @param bool|null $noticePeriodsAfterCurrent Optional override of the notice periods after current setting for plan. See plan for the definition of notice periods.
     *
     * @return self
     */
    public function setNoticePeriodsAfterCurrent($noticePeriodsAfterCurrent)
    {
        if (is_null($noticePeriodsAfterCurrent)) {
            throw new \InvalidArgumentException('non-nullable noticePeriodsAfterCurrent cannot be null');
        }
        $this->container['noticePeriodsAfterCurrent'] = $noticePeriodsAfterCurrent;

        return $this;
    }

    /**
     * Gets expireAt
     *
     * @return string|null
     */
    public function getExpireAt()
    {
        return $this->container['expireAt'];
    }

    /**
     * Sets expireAt
     *
     * @param string|null $expireAt Optional fixed date and time on when the subscription should expire. Using this option results in prorated billing for the last partial period. Notice that when using this option the cancellation cannot be uncancelled in the last partial period. The fixed expire date takes precedence over notice periods and fixation period. The fixed expire date must be after the end of the current periods. On the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`.
     *
     * @return self
     */
    public function setExpireAt($expireAt)
    {
        if (is_null($expireAt)) {
            throw new \InvalidArgumentException('non-nullable expireAt cannot be null');
        }
        $this->container['expireAt'] = $expireAt;

        return $this;
    }

    /**
     * Gets trialWithNoticeAndFixation
     *
     * @return bool|null
     */
    public function getTrialWithNoticeAndFixation()
    {
        return $this->container['trialWithNoticeAndFixation'];
    }

    /**
     * Sets trialWithNoticeAndFixation
     *
     * @param bool|null $trialWithNoticeAndFixation If subscription is in trial and this flag is set to true, the potential notice and fixation periods will be respected. This can be used in a paid trial scenario where the trial period have custom duration and price collected with a setup fee. E.g. if notice period is set to 2, the subscription will run for the trial period and two full paid periods.
     *
     * @return self
     */
    public function setTrialWithNoticeAndFixation($trialWithNoticeAndFixation)
    {
        if (is_null($trialWithNoticeAndFixation)) {
            throw new \InvalidArgumentException('non-nullable trialWithNoticeAndFixation cannot be null');
        }
        $this->container['trialWithNoticeAndFixation'] = $trialWithNoticeAndFixation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


