<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description Invoice transactions, ascending order and limited to 100 transactions
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'state' => 'string',
        'invoice' => 'string',
        'type' => 'string',
        'amount' => 'int',
        'created' => '\DateTime',
        'paymentType' => 'string',
        'currency' => 'string',
        'settled' => '\DateTime',
        'authorized' => '\DateTime',
        'failed' => '\DateTime',
        'refunded' => '\DateTime',
        'paymentMethod' => 'string',
        'cardTransaction' => '\Frisbii\Model\CardTransaction',
        'mpoTransaction' => '\Frisbii\Model\CardTransaction',
        'vippsTransaction' => '\Frisbii\Model\CardTransaction',
        'applepayTransaction' => '\Frisbii\Model\CardTransaction',
        'googlepayTransaction' => '\Frisbii\Model\CardTransaction',
        'manualTransaction' => '\Frisbii\Model\ManualTransaction',
        'viabillTransaction' => '\Frisbii\Model\ViabillTransaction',
        'anydayTransaction' => '\Frisbii\Model\AnydayTransaction',
        'santanderTransaction' => '\Frisbii\Model\SantanderTransaction',
        'resursTransaction' => '\Frisbii\Model\ResursTransaction',
        'klarnaTransaction' => '\Frisbii\Model\KlarnaTransaction',
        'swishTransaction' => '\Frisbii\Model\SwishTransaction',
        'paypalTransaction' => '\Frisbii\Model\PaypalTransaction',
        'bancomatpayTransaction' => '\Frisbii\Model\BancomatPayTransaction',
        'bancontactTransaction' => '\Frisbii\Model\BancontactTransaction',
        'blikTransaction' => '\Frisbii\Model\BlikTransaction',
        'giropayTransaction' => '\Frisbii\Model\GiropayTransaction',
        'idealTransaction' => '\Frisbii\Model\IdealTransaction',
        'p24Transaction' => '\Frisbii\Model\P24Transaction',
        'sepaTransaction' => '\Frisbii\Model\SepaTransaction',
        'sepaEbicsTransaction' => '\Frisbii\Model\SepaEbicsTransaction',
        'trustlyTransaction' => '\Frisbii\Model\TrustlyTransaction',
        'verkkopankkiTransaction' => '\Frisbii\Model\VerkkopankkiTransaction',
        'epsTransaction' => '\Frisbii\Model\EpsTransaction',
        'estoniaBanksTransaction' => '\Frisbii\Model\EstoniaBanksTransaction',
        'latviaBanksTransaction' => '\Frisbii\Model\LatviaBanksTransaction',
        'lithuaniaBanksTransaction' => '\Frisbii\Model\LithuaniaBanksTransaction',
        'mbwayTransaction' => '\Frisbii\Model\MbwayTransaction',
        'multibancoTransaction' => '\Frisbii\Model\MultibancoTransaction',
        'mybankTransaction' => '\Frisbii\Model\MybankTransaction',
        'payconiqTransaction' => '\Frisbii\Model\PayconiqTransaction',
        'paysafecardTransaction' => '\Frisbii\Model\PaysafecardTransaction',
        'payseraTransaction' => '\Frisbii\Model\PayseraTransaction',
        'postfinanceTransaction' => '\Frisbii\Model\PostfinanceTransaction',
        'satispayTransaction' => '\Frisbii\Model\SatispayTransaction',
        'twintTransaction' => '\Frisbii\Model\TwintTransaction',
        'wechatpayTransaction' => '\Frisbii\Model\WeChatPayTransaction',
        'mpsTransaction' => '\Frisbii\Model\MpsTransaction',
        'vippsEpaymentTransaction' => '\Frisbii\Model\VippsEpaymentTransaction',
        'vippsRecurringTransaction' => '\Frisbii\Model\VippsRecurringTransaction',
        'offlineTransaction' => '\Frisbii\Model\OfflineTransaction',
        'paymentContext' => 'string',
        'accountingInvoice' => 'string',
        'debtorId' => 'int',
        'customerHandle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'invoice' => null,
        'type' => null,
        'amount' => 'int32',
        'created' => 'date-time',
        'paymentType' => null,
        'currency' => null,
        'settled' => 'date-time',
        'authorized' => 'date-time',
        'failed' => 'date-time',
        'refunded' => 'date-time',
        'paymentMethod' => null,
        'cardTransaction' => null,
        'mpoTransaction' => null,
        'vippsTransaction' => null,
        'applepayTransaction' => null,
        'googlepayTransaction' => null,
        'manualTransaction' => null,
        'viabillTransaction' => null,
        'anydayTransaction' => null,
        'santanderTransaction' => null,
        'resursTransaction' => null,
        'klarnaTransaction' => null,
        'swishTransaction' => null,
        'paypalTransaction' => null,
        'bancomatpayTransaction' => null,
        'bancontactTransaction' => null,
        'blikTransaction' => null,
        'giropayTransaction' => null,
        'idealTransaction' => null,
        'p24Transaction' => null,
        'sepaTransaction' => null,
        'sepaEbicsTransaction' => null,
        'trustlyTransaction' => null,
        'verkkopankkiTransaction' => null,
        'epsTransaction' => null,
        'estoniaBanksTransaction' => null,
        'latviaBanksTransaction' => null,
        'lithuaniaBanksTransaction' => null,
        'mbwayTransaction' => null,
        'multibancoTransaction' => null,
        'mybankTransaction' => null,
        'payconiqTransaction' => null,
        'paysafecardTransaction' => null,
        'payseraTransaction' => null,
        'postfinanceTransaction' => null,
        'satispayTransaction' => null,
        'twintTransaction' => null,
        'wechatpayTransaction' => null,
        'mpsTransaction' => null,
        'vippsEpaymentTransaction' => null,
        'vippsRecurringTransaction' => null,
        'offlineTransaction' => null,
        'paymentContext' => null,
        'accountingInvoice' => null,
        'debtorId' => 'int64',
        'customerHandle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'state' => false,
        'invoice' => false,
        'type' => false,
        'amount' => false,
        'created' => false,
        'paymentType' => false,
        'currency' => false,
        'settled' => false,
        'authorized' => false,
        'failed' => false,
        'refunded' => false,
        'paymentMethod' => false,
        'cardTransaction' => false,
        'mpoTransaction' => false,
        'vippsTransaction' => false,
        'applepayTransaction' => false,
        'googlepayTransaction' => false,
        'manualTransaction' => false,
        'viabillTransaction' => false,
        'anydayTransaction' => false,
        'santanderTransaction' => false,
        'resursTransaction' => false,
        'klarnaTransaction' => false,
        'swishTransaction' => false,
        'paypalTransaction' => false,
        'bancomatpayTransaction' => false,
        'bancontactTransaction' => false,
        'blikTransaction' => false,
        'giropayTransaction' => false,
        'idealTransaction' => false,
        'p24Transaction' => false,
        'sepaTransaction' => false,
        'sepaEbicsTransaction' => false,
        'trustlyTransaction' => false,
        'verkkopankkiTransaction' => false,
        'epsTransaction' => false,
        'estoniaBanksTransaction' => false,
        'latviaBanksTransaction' => false,
        'lithuaniaBanksTransaction' => false,
        'mbwayTransaction' => false,
        'multibancoTransaction' => false,
        'mybankTransaction' => false,
        'payconiqTransaction' => false,
        'paysafecardTransaction' => false,
        'payseraTransaction' => false,
        'postfinanceTransaction' => false,
        'satispayTransaction' => false,
        'twintTransaction' => false,
        'wechatpayTransaction' => false,
        'mpsTransaction' => false,
        'vippsEpaymentTransaction' => false,
        'vippsRecurringTransaction' => false,
        'offlineTransaction' => false,
        'paymentContext' => false,
        'accountingInvoice' => false,
        'debtorId' => false,
        'customerHandle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'invoice' => 'invoice',
        'type' => 'type',
        'amount' => 'amount',
        'created' => 'created',
        'paymentType' => 'payment_type',
        'currency' => 'currency',
        'settled' => 'settled',
        'authorized' => 'authorized',
        'failed' => 'failed',
        'refunded' => 'refunded',
        'paymentMethod' => 'payment_method',
        'cardTransaction' => 'card_transaction',
        'mpoTransaction' => 'mpo_transaction',
        'vippsTransaction' => 'vipps_transaction',
        'applepayTransaction' => 'applepay_transaction',
        'googlepayTransaction' => 'googlepay_transaction',
        'manualTransaction' => 'manual_transaction',
        'viabillTransaction' => 'viabill_transaction',
        'anydayTransaction' => 'anyday_transaction',
        'santanderTransaction' => 'santander_transaction',
        'resursTransaction' => 'resurs_transaction',
        'klarnaTransaction' => 'klarna_transaction',
        'swishTransaction' => 'swish_transaction',
        'paypalTransaction' => 'paypal_transaction',
        'bancomatpayTransaction' => 'bancomatpay_transaction',
        'bancontactTransaction' => 'bancontact_transaction',
        'blikTransaction' => 'blik_transaction',
        'giropayTransaction' => 'giropay_transaction',
        'idealTransaction' => 'ideal_transaction',
        'p24Transaction' => 'p24_transaction',
        'sepaTransaction' => 'sepa_transaction',
        'sepaEbicsTransaction' => 'sepa_ebics_transaction',
        'trustlyTransaction' => 'trustly_transaction',
        'verkkopankkiTransaction' => 'verkkopankki_transaction',
        'epsTransaction' => 'eps_transaction',
        'estoniaBanksTransaction' => 'estonia_banks_transaction',
        'latviaBanksTransaction' => 'latvia_banks_transaction',
        'lithuaniaBanksTransaction' => 'lithuania_banks_transaction',
        'mbwayTransaction' => 'mbway_transaction',
        'multibancoTransaction' => 'multibanco_transaction',
        'mybankTransaction' => 'mybank_transaction',
        'payconiqTransaction' => 'payconiq_transaction',
        'paysafecardTransaction' => 'paysafecard_transaction',
        'payseraTransaction' => 'paysera_transaction',
        'postfinanceTransaction' => 'postfinance_transaction',
        'satispayTransaction' => 'satispay_transaction',
        'twintTransaction' => 'twint_transaction',
        'wechatpayTransaction' => 'wechatpay_transaction',
        'mpsTransaction' => 'mps_transaction',
        'vippsEpaymentTransaction' => 'vipps_epayment_transaction',
        'vippsRecurringTransaction' => 'vipps_recurring_transaction',
        'offlineTransaction' => 'offline_transaction',
        'paymentContext' => 'payment_context',
        'accountingInvoice' => 'accounting_invoice',
        'debtorId' => 'debtor_id',
        'customerHandle' => 'customer_handle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'invoice' => 'setInvoice',
        'type' => 'setType',
        'amount' => 'setAmount',
        'created' => 'setCreated',
        'paymentType' => 'setPaymentType',
        'currency' => 'setCurrency',
        'settled' => 'setSettled',
        'authorized' => 'setAuthorized',
        'failed' => 'setFailed',
        'refunded' => 'setRefunded',
        'paymentMethod' => 'setPaymentMethod',
        'cardTransaction' => 'setCardTransaction',
        'mpoTransaction' => 'setMpoTransaction',
        'vippsTransaction' => 'setVippsTransaction',
        'applepayTransaction' => 'setApplepayTransaction',
        'googlepayTransaction' => 'setGooglepayTransaction',
        'manualTransaction' => 'setManualTransaction',
        'viabillTransaction' => 'setViabillTransaction',
        'anydayTransaction' => 'setAnydayTransaction',
        'santanderTransaction' => 'setSantanderTransaction',
        'resursTransaction' => 'setResursTransaction',
        'klarnaTransaction' => 'setKlarnaTransaction',
        'swishTransaction' => 'setSwishTransaction',
        'paypalTransaction' => 'setPaypalTransaction',
        'bancomatpayTransaction' => 'setBancomatpayTransaction',
        'bancontactTransaction' => 'setBancontactTransaction',
        'blikTransaction' => 'setBlikTransaction',
        'giropayTransaction' => 'setGiropayTransaction',
        'idealTransaction' => 'setIdealTransaction',
        'p24Transaction' => 'setP24Transaction',
        'sepaTransaction' => 'setSepaTransaction',
        'sepaEbicsTransaction' => 'setSepaEbicsTransaction',
        'trustlyTransaction' => 'setTrustlyTransaction',
        'verkkopankkiTransaction' => 'setVerkkopankkiTransaction',
        'epsTransaction' => 'setEpsTransaction',
        'estoniaBanksTransaction' => 'setEstoniaBanksTransaction',
        'latviaBanksTransaction' => 'setLatviaBanksTransaction',
        'lithuaniaBanksTransaction' => 'setLithuaniaBanksTransaction',
        'mbwayTransaction' => 'setMbwayTransaction',
        'multibancoTransaction' => 'setMultibancoTransaction',
        'mybankTransaction' => 'setMybankTransaction',
        'payconiqTransaction' => 'setPayconiqTransaction',
        'paysafecardTransaction' => 'setPaysafecardTransaction',
        'payseraTransaction' => 'setPayseraTransaction',
        'postfinanceTransaction' => 'setPostfinanceTransaction',
        'satispayTransaction' => 'setSatispayTransaction',
        'twintTransaction' => 'setTwintTransaction',
        'wechatpayTransaction' => 'setWechatpayTransaction',
        'mpsTransaction' => 'setMpsTransaction',
        'vippsEpaymentTransaction' => 'setVippsEpaymentTransaction',
        'vippsRecurringTransaction' => 'setVippsRecurringTransaction',
        'offlineTransaction' => 'setOfflineTransaction',
        'paymentContext' => 'setPaymentContext',
        'accountingInvoice' => 'setAccountingInvoice',
        'debtorId' => 'setDebtorId',
        'customerHandle' => 'setCustomerHandle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'invoice' => 'getInvoice',
        'type' => 'getType',
        'amount' => 'getAmount',
        'created' => 'getCreated',
        'paymentType' => 'getPaymentType',
        'currency' => 'getCurrency',
        'settled' => 'getSettled',
        'authorized' => 'getAuthorized',
        'failed' => 'getFailed',
        'refunded' => 'getRefunded',
        'paymentMethod' => 'getPaymentMethod',
        'cardTransaction' => 'getCardTransaction',
        'mpoTransaction' => 'getMpoTransaction',
        'vippsTransaction' => 'getVippsTransaction',
        'applepayTransaction' => 'getApplepayTransaction',
        'googlepayTransaction' => 'getGooglepayTransaction',
        'manualTransaction' => 'getManualTransaction',
        'viabillTransaction' => 'getViabillTransaction',
        'anydayTransaction' => 'getAnydayTransaction',
        'santanderTransaction' => 'getSantanderTransaction',
        'resursTransaction' => 'getResursTransaction',
        'klarnaTransaction' => 'getKlarnaTransaction',
        'swishTransaction' => 'getSwishTransaction',
        'paypalTransaction' => 'getPaypalTransaction',
        'bancomatpayTransaction' => 'getBancomatpayTransaction',
        'bancontactTransaction' => 'getBancontactTransaction',
        'blikTransaction' => 'getBlikTransaction',
        'giropayTransaction' => 'getGiropayTransaction',
        'idealTransaction' => 'getIdealTransaction',
        'p24Transaction' => 'getP24Transaction',
        'sepaTransaction' => 'getSepaTransaction',
        'sepaEbicsTransaction' => 'getSepaEbicsTransaction',
        'trustlyTransaction' => 'getTrustlyTransaction',
        'verkkopankkiTransaction' => 'getVerkkopankkiTransaction',
        'epsTransaction' => 'getEpsTransaction',
        'estoniaBanksTransaction' => 'getEstoniaBanksTransaction',
        'latviaBanksTransaction' => 'getLatviaBanksTransaction',
        'lithuaniaBanksTransaction' => 'getLithuaniaBanksTransaction',
        'mbwayTransaction' => 'getMbwayTransaction',
        'multibancoTransaction' => 'getMultibancoTransaction',
        'mybankTransaction' => 'getMybankTransaction',
        'payconiqTransaction' => 'getPayconiqTransaction',
        'paysafecardTransaction' => 'getPaysafecardTransaction',
        'payseraTransaction' => 'getPayseraTransaction',
        'postfinanceTransaction' => 'getPostfinanceTransaction',
        'satispayTransaction' => 'getSatispayTransaction',
        'twintTransaction' => 'getTwintTransaction',
        'wechatpayTransaction' => 'getWechatpayTransaction',
        'mpsTransaction' => 'getMpsTransaction',
        'vippsEpaymentTransaction' => 'getVippsEpaymentTransaction',
        'vippsRecurringTransaction' => 'getVippsRecurringTransaction',
        'offlineTransaction' => 'getOfflineTransaction',
        'paymentContext' => 'getPaymentContext',
        'accountingInvoice' => 'getAccountingInvoice',
        'debtorId' => 'getDebtorId',
        'customerHandle' => 'getCustomerHandle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_PENDING = 'pending';
    public const STATE_PROCESSING = 'processing';
    public const STATE_AUTHORIZED = 'authorized';
    public const STATE_SETTLED = 'settled';
    public const STATE_REFUNDED = 'refunded';
    public const STATE_FAILED = 'failed';
    public const STATE_CANCELLED = 'cancelled';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_SETTLE = 'settle';
    public const TYPE_REFUND = 'refund';
    public const TYPE_AUTHORIZATION = 'authorization';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const PAYMENT_TYPE_CARD = 'card';
    public const PAYMENT_TYPE_MPO = 'mpo';
    public const PAYMENT_TYPE_MOBILEPAY = 'mobilepay';
    public const PAYMENT_TYPE_VIPPS = 'vipps';
    public const PAYMENT_TYPE_VIPPS_EPAYMENT = 'vipps_epayment';
    public const PAYMENT_TYPE_VIPPS_RECURRING = 'vipps_recurring';
    public const PAYMENT_TYPE_SWISH = 'swish';
    public const PAYMENT_TYPE_VIABILL = 'viabill';
    public const PAYMENT_TYPE_ANYDAY = 'anyday';
    public const PAYMENT_TYPE_MANUAL = 'manual';
    public const PAYMENT_TYPE_APPLEPAY = 'applepay';
    public const PAYMENT_TYPE_GOOGLEPAY = 'googlepay';
    public const PAYMENT_TYPE_PAYPAL = 'paypal';
    public const PAYMENT_TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    public const PAYMENT_TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    public const PAYMENT_TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    public const PAYMENT_TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    public const PAYMENT_TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    public const PAYMENT_TYPE_RESURS = 'resurs';
    public const PAYMENT_TYPE_IDEAL = 'ideal';
    public const PAYMENT_TYPE_P24 = 'p24';
    public const PAYMENT_TYPE_BANCOMATPAY = 'bancomatpay';
    public const PAYMENT_TYPE_BLIK = 'blik';
    public const PAYMENT_TYPE_GIROPAY = 'giropay';
    public const PAYMENT_TYPE_SEPA = 'sepa';
    public const PAYMENT_TYPE_VERKKOPANKKI = 'verkkopankki';
    public const PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    public const PAYMENT_TYPE_EMV_TOKEN = 'emv_token';
    public const PAYMENT_TYPE_BCMC = 'bcmc';
    public const PAYMENT_TYPE_PP_BLIK_OC = 'pp_blik_oc';
    public const PAYMENT_TYPE_TRUSTLY = 'trustly';
    public const PAYMENT_TYPE_EPS = 'eps';
    public const PAYMENT_TYPE_ESTONIA_BANKS = 'estonia_banks';
    public const PAYMENT_TYPE_LATVIA_BANKS = 'latvia_banks';
    public const PAYMENT_TYPE_LITHUANIA_BANKS = 'lithuania_banks';
    public const PAYMENT_TYPE_MB_WAY = 'mb_way';
    public const PAYMENT_TYPE_MULTIBANCO = 'multibanco';
    public const PAYMENT_TYPE_MYBANK = 'mybank';
    public const PAYMENT_TYPE_PAYCONIQ = 'payconiq';
    public const PAYMENT_TYPE_PAYSAFECARD = 'paysafecard';
    public const PAYMENT_TYPE_PAYSERA = 'paysera';
    public const PAYMENT_TYPE_POSTFINANCE = 'postfinance';
    public const PAYMENT_TYPE_SATISPAY = 'satispay';
    public const PAYMENT_TYPE_TWINT = 'twint';
    public const PAYMENT_TYPE_WECHATPAY = 'wechatpay';
    public const PAYMENT_TYPE_SANTANDER = 'santander';
    public const PAYMENT_TYPE_OFFLINE_CASH = 'offline_cash';
    public const PAYMENT_TYPE_OFFLINE_BANK_TRANSFER = 'offline_bank_transfer';
    public const PAYMENT_TYPE_OFFLINE_OTHER = 'offline_other';
    public const PAYMENT_TYPE_SEPA_EBICS = 'sepa_ebics';
    public const PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_PROCESSING,
            self::STATE_AUTHORIZED,
            self::STATE_SETTLED,
            self::STATE_REFUNDED,
            self::STATE_FAILED,
            self::STATE_CANCELLED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SETTLE,
            self::TYPE_REFUND,
            self::TYPE_AUTHORIZATION,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_CARD,
            self::PAYMENT_TYPE_MPO,
            self::PAYMENT_TYPE_MOBILEPAY,
            self::PAYMENT_TYPE_VIPPS,
            self::PAYMENT_TYPE_VIPPS_EPAYMENT,
            self::PAYMENT_TYPE_VIPPS_RECURRING,
            self::PAYMENT_TYPE_SWISH,
            self::PAYMENT_TYPE_VIABILL,
            self::PAYMENT_TYPE_ANYDAY,
            self::PAYMENT_TYPE_MANUAL,
            self::PAYMENT_TYPE_APPLEPAY,
            self::PAYMENT_TYPE_GOOGLEPAY,
            self::PAYMENT_TYPE_PAYPAL,
            self::PAYMENT_TYPE_KLARNA_PAY_NOW,
            self::PAYMENT_TYPE_KLARNA_PAY_LATER,
            self::PAYMENT_TYPE_KLARNA_SLICE_IT,
            self::PAYMENT_TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::PAYMENT_TYPE_KLARNA_DIRECT_DEBIT,
            self::PAYMENT_TYPE_RESURS,
            self::PAYMENT_TYPE_IDEAL,
            self::PAYMENT_TYPE_P24,
            self::PAYMENT_TYPE_BANCOMATPAY,
            self::PAYMENT_TYPE_BLIK,
            self::PAYMENT_TYPE_GIROPAY,
            self::PAYMENT_TYPE_SEPA,
            self::PAYMENT_TYPE_VERKKOPANKKI,
            self::PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::PAYMENT_TYPE_EMV_TOKEN,
            self::PAYMENT_TYPE_BCMC,
            self::PAYMENT_TYPE_PP_BLIK_OC,
            self::PAYMENT_TYPE_TRUSTLY,
            self::PAYMENT_TYPE_EPS,
            self::PAYMENT_TYPE_ESTONIA_BANKS,
            self::PAYMENT_TYPE_LATVIA_BANKS,
            self::PAYMENT_TYPE_LITHUANIA_BANKS,
            self::PAYMENT_TYPE_MB_WAY,
            self::PAYMENT_TYPE_MULTIBANCO,
            self::PAYMENT_TYPE_MYBANK,
            self::PAYMENT_TYPE_PAYCONIQ,
            self::PAYMENT_TYPE_PAYSAFECARD,
            self::PAYMENT_TYPE_PAYSERA,
            self::PAYMENT_TYPE_POSTFINANCE,
            self::PAYMENT_TYPE_SATISPAY,
            self::PAYMENT_TYPE_TWINT,
            self::PAYMENT_TYPE_WECHATPAY,
            self::PAYMENT_TYPE_SANTANDER,
            self::PAYMENT_TYPE_OFFLINE_CASH,
            self::PAYMENT_TYPE_OFFLINE_BANK_TRANSFER,
            self::PAYMENT_TYPE_OFFLINE_OTHER,
            self::PAYMENT_TYPE_SEPA_EBICS,
            self::PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('settled', $data ?? [], null);
        $this->setIfExists('authorized', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('refunded', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('cardTransaction', $data ?? [], null);
        $this->setIfExists('mpoTransaction', $data ?? [], null);
        $this->setIfExists('vippsTransaction', $data ?? [], null);
        $this->setIfExists('applepayTransaction', $data ?? [], null);
        $this->setIfExists('googlepayTransaction', $data ?? [], null);
        $this->setIfExists('manualTransaction', $data ?? [], null);
        $this->setIfExists('viabillTransaction', $data ?? [], null);
        $this->setIfExists('anydayTransaction', $data ?? [], null);
        $this->setIfExists('santanderTransaction', $data ?? [], null);
        $this->setIfExists('resursTransaction', $data ?? [], null);
        $this->setIfExists('klarnaTransaction', $data ?? [], null);
        $this->setIfExists('swishTransaction', $data ?? [], null);
        $this->setIfExists('paypalTransaction', $data ?? [], null);
        $this->setIfExists('bancomatpayTransaction', $data ?? [], null);
        $this->setIfExists('bancontactTransaction', $data ?? [], null);
        $this->setIfExists('blikTransaction', $data ?? [], null);
        $this->setIfExists('giropayTransaction', $data ?? [], null);
        $this->setIfExists('idealTransaction', $data ?? [], null);
        $this->setIfExists('p24Transaction', $data ?? [], null);
        $this->setIfExists('sepaTransaction', $data ?? [], null);
        $this->setIfExists('sepaEbicsTransaction', $data ?? [], null);
        $this->setIfExists('trustlyTransaction', $data ?? [], null);
        $this->setIfExists('verkkopankkiTransaction', $data ?? [], null);
        $this->setIfExists('epsTransaction', $data ?? [], null);
        $this->setIfExists('estoniaBanksTransaction', $data ?? [], null);
        $this->setIfExists('latviaBanksTransaction', $data ?? [], null);
        $this->setIfExists('lithuaniaBanksTransaction', $data ?? [], null);
        $this->setIfExists('mbwayTransaction', $data ?? [], null);
        $this->setIfExists('multibancoTransaction', $data ?? [], null);
        $this->setIfExists('mybankTransaction', $data ?? [], null);
        $this->setIfExists('payconiqTransaction', $data ?? [], null);
        $this->setIfExists('paysafecardTransaction', $data ?? [], null);
        $this->setIfExists('payseraTransaction', $data ?? [], null);
        $this->setIfExists('postfinanceTransaction', $data ?? [], null);
        $this->setIfExists('satispayTransaction', $data ?? [], null);
        $this->setIfExists('twintTransaction', $data ?? [], null);
        $this->setIfExists('wechatpayTransaction', $data ?? [], null);
        $this->setIfExists('mpsTransaction', $data ?? [], null);
        $this->setIfExists('vippsEpaymentTransaction', $data ?? [], null);
        $this->setIfExists('vippsRecurringTransaction', $data ?? [], null);
        $this->setIfExists('offlineTransaction', $data ?? [], null);
        $this->setIfExists('paymentContext', $data ?? [], null);
        $this->setIfExists('accountingInvoice', $data ?? [], null);
        $this->setIfExists('debtorId', $data ?? [], null);
        $this->setIfExists('customerHandle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ((mb_strlen($this->container['invoice']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['paymentType'] === null) {
            $invalidProperties[] = "'paymentType' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['paymentType']) && !in_array($this->container['paymentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentType', must be one of '%s'",
                $this->container['paymentType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Transaction id assigned by Frisbii
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the transaction, one of the following: `pending`, `processing`, `authorized`, `settled`, `refunded`, `failed`, `cancelled`
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Invoice handle
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }

        if ((mb_strlen($invoice) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Transaction type, one of the following: `settle`, `refund`, `authorization`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The transaction amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Transaction., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string $paymentType Payment type for transaction, either: `card`, `mpo`, `mobilepay`, `vipps`, `vipps_epayment`, `vipps_recurring`, `swish`, `viabill`, `anyday`, `manual`, `applepay`, `googlepay`, `paypal`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`, `resurs`, `mobilepay_subscriptions`, `emv_token`, `bancomatpay`, `bcmc`, `blik`, `pp_blik_oc`, `giropay`, `ideal`, `p24`, `sepa`, `trustly`, `eps`, `estonia_banks`, `latvia_banks`, `lithuania_banks`, `mb_way`, `multibanco`, `mybank`, `payconiq`, `paysafecard`, `paysera`, `postfinance`, `satispay`, `twint`, `wechatpay`, `santander`, `verkkopankki`, `offline_cash`, `offline_bank_transfer`, or `offline_other`, `sepa_ebics`
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($paymentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentType', must be one of '%s'",
                    $paymentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets settled
     *
     * @return \DateTime|null
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     *
     * @param \DateTime|null $settled When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setSettled($settled)
    {
        if (is_null($settled)) {
            throw new \InvalidArgumentException('non-nullable settled cannot be null');
        }
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return \DateTime|null
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param \DateTime|null $authorized When the transaction was authorized, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setAuthorized($authorized)
    {
        if (is_null($authorized)) {
            throw new \InvalidArgumentException('non-nullable authorized cannot be null');
        }
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime|null
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime|null $failed When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setFailed($failed)
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return \DateTime|null
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param \DateTime|null $refunded When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setRefunded($refunded)
    {
        if (is_null($refunded)) {
            throw new \InvalidArgumentException('non-nullable refunded cannot be null');
        }
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod Reference to payment method in case of a MIT transaction
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets cardTransaction
     *
     * @return \Frisbii\Model\CardTransaction|null
     */
    public function getCardTransaction()
    {
        return $this->container['cardTransaction'];
    }

    /**
     * Sets cardTransaction
     *
     * @param \Frisbii\Model\CardTransaction|null $cardTransaction cardTransaction
     *
     * @return self
     */
    public function setCardTransaction($cardTransaction)
    {
        if (is_null($cardTransaction)) {
            throw new \InvalidArgumentException('non-nullable cardTransaction cannot be null');
        }
        $this->container['cardTransaction'] = $cardTransaction;

        return $this;
    }

    /**
     * Gets mpoTransaction
     *
     * @return \Frisbii\Model\CardTransaction|null
     */
    public function getMpoTransaction()
    {
        return $this->container['mpoTransaction'];
    }

    /**
     * Sets mpoTransaction
     *
     * @param \Frisbii\Model\CardTransaction|null $mpoTransaction mpoTransaction
     *
     * @return self
     */
    public function setMpoTransaction($mpoTransaction)
    {
        if (is_null($mpoTransaction)) {
            throw new \InvalidArgumentException('non-nullable mpoTransaction cannot be null');
        }
        $this->container['mpoTransaction'] = $mpoTransaction;

        return $this;
    }

    /**
     * Gets vippsTransaction
     *
     * @return \Frisbii\Model\CardTransaction|null
     */
    public function getVippsTransaction()
    {
        return $this->container['vippsTransaction'];
    }

    /**
     * Sets vippsTransaction
     *
     * @param \Frisbii\Model\CardTransaction|null $vippsTransaction vippsTransaction
     *
     * @return self
     */
    public function setVippsTransaction($vippsTransaction)
    {
        if (is_null($vippsTransaction)) {
            throw new \InvalidArgumentException('non-nullable vippsTransaction cannot be null');
        }
        $this->container['vippsTransaction'] = $vippsTransaction;

        return $this;
    }

    /**
     * Gets applepayTransaction
     *
     * @return \Frisbii\Model\CardTransaction|null
     */
    public function getApplepayTransaction()
    {
        return $this->container['applepayTransaction'];
    }

    /**
     * Sets applepayTransaction
     *
     * @param \Frisbii\Model\CardTransaction|null $applepayTransaction applepayTransaction
     *
     * @return self
     */
    public function setApplepayTransaction($applepayTransaction)
    {
        if (is_null($applepayTransaction)) {
            throw new \InvalidArgumentException('non-nullable applepayTransaction cannot be null');
        }
        $this->container['applepayTransaction'] = $applepayTransaction;

        return $this;
    }

    /**
     * Gets googlepayTransaction
     *
     * @return \Frisbii\Model\CardTransaction|null
     */
    public function getGooglepayTransaction()
    {
        return $this->container['googlepayTransaction'];
    }

    /**
     * Sets googlepayTransaction
     *
     * @param \Frisbii\Model\CardTransaction|null $googlepayTransaction googlepayTransaction
     *
     * @return self
     */
    public function setGooglepayTransaction($googlepayTransaction)
    {
        if (is_null($googlepayTransaction)) {
            throw new \InvalidArgumentException('non-nullable googlepayTransaction cannot be null');
        }
        $this->container['googlepayTransaction'] = $googlepayTransaction;

        return $this;
    }

    /**
     * Gets manualTransaction
     *
     * @return \Frisbii\Model\ManualTransaction|null
     */
    public function getManualTransaction()
    {
        return $this->container['manualTransaction'];
    }

    /**
     * Sets manualTransaction
     *
     * @param \Frisbii\Model\ManualTransaction|null $manualTransaction manualTransaction
     *
     * @return self
     */
    public function setManualTransaction($manualTransaction)
    {
        if (is_null($manualTransaction)) {
            throw new \InvalidArgumentException('non-nullable manualTransaction cannot be null');
        }
        $this->container['manualTransaction'] = $manualTransaction;

        return $this;
    }

    /**
     * Gets viabillTransaction
     *
     * @return \Frisbii\Model\ViabillTransaction|null
     */
    public function getViabillTransaction()
    {
        return $this->container['viabillTransaction'];
    }

    /**
     * Sets viabillTransaction
     *
     * @param \Frisbii\Model\ViabillTransaction|null $viabillTransaction viabillTransaction
     *
     * @return self
     */
    public function setViabillTransaction($viabillTransaction)
    {
        if (is_null($viabillTransaction)) {
            throw new \InvalidArgumentException('non-nullable viabillTransaction cannot be null');
        }
        $this->container['viabillTransaction'] = $viabillTransaction;

        return $this;
    }

    /**
     * Gets anydayTransaction
     *
     * @return \Frisbii\Model\AnydayTransaction|null
     */
    public function getAnydayTransaction()
    {
        return $this->container['anydayTransaction'];
    }

    /**
     * Sets anydayTransaction
     *
     * @param \Frisbii\Model\AnydayTransaction|null $anydayTransaction anydayTransaction
     *
     * @return self
     */
    public function setAnydayTransaction($anydayTransaction)
    {
        if (is_null($anydayTransaction)) {
            throw new \InvalidArgumentException('non-nullable anydayTransaction cannot be null');
        }
        $this->container['anydayTransaction'] = $anydayTransaction;

        return $this;
    }

    /**
     * Gets santanderTransaction
     *
     * @return \Frisbii\Model\SantanderTransaction|null
     */
    public function getSantanderTransaction()
    {
        return $this->container['santanderTransaction'];
    }

    /**
     * Sets santanderTransaction
     *
     * @param \Frisbii\Model\SantanderTransaction|null $santanderTransaction santanderTransaction
     *
     * @return self
     */
    public function setSantanderTransaction($santanderTransaction)
    {
        if (is_null($santanderTransaction)) {
            throw new \InvalidArgumentException('non-nullable santanderTransaction cannot be null');
        }
        $this->container['santanderTransaction'] = $santanderTransaction;

        return $this;
    }

    /**
     * Gets resursTransaction
     *
     * @return \Frisbii\Model\ResursTransaction|null
     */
    public function getResursTransaction()
    {
        return $this->container['resursTransaction'];
    }

    /**
     * Sets resursTransaction
     *
     * @param \Frisbii\Model\ResursTransaction|null $resursTransaction resursTransaction
     *
     * @return self
     */
    public function setResursTransaction($resursTransaction)
    {
        if (is_null($resursTransaction)) {
            throw new \InvalidArgumentException('non-nullable resursTransaction cannot be null');
        }
        $this->container['resursTransaction'] = $resursTransaction;

        return $this;
    }

    /**
     * Gets klarnaTransaction
     *
     * @return \Frisbii\Model\KlarnaTransaction|null
     */
    public function getKlarnaTransaction()
    {
        return $this->container['klarnaTransaction'];
    }

    /**
     * Sets klarnaTransaction
     *
     * @param \Frisbii\Model\KlarnaTransaction|null $klarnaTransaction klarnaTransaction
     *
     * @return self
     */
    public function setKlarnaTransaction($klarnaTransaction)
    {
        if (is_null($klarnaTransaction)) {
            throw new \InvalidArgumentException('non-nullable klarnaTransaction cannot be null');
        }
        $this->container['klarnaTransaction'] = $klarnaTransaction;

        return $this;
    }

    /**
     * Gets swishTransaction
     *
     * @return \Frisbii\Model\SwishTransaction|null
     */
    public function getSwishTransaction()
    {
        return $this->container['swishTransaction'];
    }

    /**
     * Sets swishTransaction
     *
     * @param \Frisbii\Model\SwishTransaction|null $swishTransaction swishTransaction
     *
     * @return self
     */
    public function setSwishTransaction($swishTransaction)
    {
        if (is_null($swishTransaction)) {
            throw new \InvalidArgumentException('non-nullable swishTransaction cannot be null');
        }
        $this->container['swishTransaction'] = $swishTransaction;

        return $this;
    }

    /**
     * Gets paypalTransaction
     *
     * @return \Frisbii\Model\PaypalTransaction|null
     */
    public function getPaypalTransaction()
    {
        return $this->container['paypalTransaction'];
    }

    /**
     * Sets paypalTransaction
     *
     * @param \Frisbii\Model\PaypalTransaction|null $paypalTransaction paypalTransaction
     *
     * @return self
     */
    public function setPaypalTransaction($paypalTransaction)
    {
        if (is_null($paypalTransaction)) {
            throw new \InvalidArgumentException('non-nullable paypalTransaction cannot be null');
        }
        $this->container['paypalTransaction'] = $paypalTransaction;

        return $this;
    }

    /**
     * Gets bancomatpayTransaction
     *
     * @return \Frisbii\Model\BancomatPayTransaction|null
     */
    public function getBancomatpayTransaction()
    {
        return $this->container['bancomatpayTransaction'];
    }

    /**
     * Sets bancomatpayTransaction
     *
     * @param \Frisbii\Model\BancomatPayTransaction|null $bancomatpayTransaction bancomatpayTransaction
     *
     * @return self
     */
    public function setBancomatpayTransaction($bancomatpayTransaction)
    {
        if (is_null($bancomatpayTransaction)) {
            throw new \InvalidArgumentException('non-nullable bancomatpayTransaction cannot be null');
        }
        $this->container['bancomatpayTransaction'] = $bancomatpayTransaction;

        return $this;
    }

    /**
     * Gets bancontactTransaction
     *
     * @return \Frisbii\Model\BancontactTransaction|null
     */
    public function getBancontactTransaction()
    {
        return $this->container['bancontactTransaction'];
    }

    /**
     * Sets bancontactTransaction
     *
     * @param \Frisbii\Model\BancontactTransaction|null $bancontactTransaction bancontactTransaction
     *
     * @return self
     */
    public function setBancontactTransaction($bancontactTransaction)
    {
        if (is_null($bancontactTransaction)) {
            throw new \InvalidArgumentException('non-nullable bancontactTransaction cannot be null');
        }
        $this->container['bancontactTransaction'] = $bancontactTransaction;

        return $this;
    }

    /**
     * Gets blikTransaction
     *
     * @return \Frisbii\Model\BlikTransaction|null
     */
    public function getBlikTransaction()
    {
        return $this->container['blikTransaction'];
    }

    /**
     * Sets blikTransaction
     *
     * @param \Frisbii\Model\BlikTransaction|null $blikTransaction blikTransaction
     *
     * @return self
     */
    public function setBlikTransaction($blikTransaction)
    {
        if (is_null($blikTransaction)) {
            throw new \InvalidArgumentException('non-nullable blikTransaction cannot be null');
        }
        $this->container['blikTransaction'] = $blikTransaction;

        return $this;
    }

    /**
     * Gets giropayTransaction
     *
     * @return \Frisbii\Model\GiropayTransaction|null
     */
    public function getGiropayTransaction()
    {
        return $this->container['giropayTransaction'];
    }

    /**
     * Sets giropayTransaction
     *
     * @param \Frisbii\Model\GiropayTransaction|null $giropayTransaction giropayTransaction
     *
     * @return self
     */
    public function setGiropayTransaction($giropayTransaction)
    {
        if (is_null($giropayTransaction)) {
            throw new \InvalidArgumentException('non-nullable giropayTransaction cannot be null');
        }
        $this->container['giropayTransaction'] = $giropayTransaction;

        return $this;
    }

    /**
     * Gets idealTransaction
     *
     * @return \Frisbii\Model\IdealTransaction|null
     */
    public function getIdealTransaction()
    {
        return $this->container['idealTransaction'];
    }

    /**
     * Sets idealTransaction
     *
     * @param \Frisbii\Model\IdealTransaction|null $idealTransaction idealTransaction
     *
     * @return self
     */
    public function setIdealTransaction($idealTransaction)
    {
        if (is_null($idealTransaction)) {
            throw new \InvalidArgumentException('non-nullable idealTransaction cannot be null');
        }
        $this->container['idealTransaction'] = $idealTransaction;

        return $this;
    }

    /**
     * Gets p24Transaction
     *
     * @return \Frisbii\Model\P24Transaction|null
     */
    public function getP24Transaction()
    {
        return $this->container['p24Transaction'];
    }

    /**
     * Sets p24Transaction
     *
     * @param \Frisbii\Model\P24Transaction|null $p24Transaction p24Transaction
     *
     * @return self
     */
    public function setP24Transaction($p24Transaction)
    {
        if (is_null($p24Transaction)) {
            throw new \InvalidArgumentException('non-nullable p24Transaction cannot be null');
        }
        $this->container['p24Transaction'] = $p24Transaction;

        return $this;
    }

    /**
     * Gets sepaTransaction
     *
     * @return \Frisbii\Model\SepaTransaction|null
     */
    public function getSepaTransaction()
    {
        return $this->container['sepaTransaction'];
    }

    /**
     * Sets sepaTransaction
     *
     * @param \Frisbii\Model\SepaTransaction|null $sepaTransaction sepaTransaction
     *
     * @return self
     */
    public function setSepaTransaction($sepaTransaction)
    {
        if (is_null($sepaTransaction)) {
            throw new \InvalidArgumentException('non-nullable sepaTransaction cannot be null');
        }
        $this->container['sepaTransaction'] = $sepaTransaction;

        return $this;
    }

    /**
     * Gets sepaEbicsTransaction
     *
     * @return \Frisbii\Model\SepaEbicsTransaction|null
     */
    public function getSepaEbicsTransaction()
    {
        return $this->container['sepaEbicsTransaction'];
    }

    /**
     * Sets sepaEbicsTransaction
     *
     * @param \Frisbii\Model\SepaEbicsTransaction|null $sepaEbicsTransaction sepaEbicsTransaction
     *
     * @return self
     */
    public function setSepaEbicsTransaction($sepaEbicsTransaction)
    {
        if (is_null($sepaEbicsTransaction)) {
            throw new \InvalidArgumentException('non-nullable sepaEbicsTransaction cannot be null');
        }
        $this->container['sepaEbicsTransaction'] = $sepaEbicsTransaction;

        return $this;
    }

    /**
     * Gets trustlyTransaction
     *
     * @return \Frisbii\Model\TrustlyTransaction|null
     */
    public function getTrustlyTransaction()
    {
        return $this->container['trustlyTransaction'];
    }

    /**
     * Sets trustlyTransaction
     *
     * @param \Frisbii\Model\TrustlyTransaction|null $trustlyTransaction trustlyTransaction
     *
     * @return self
     */
    public function setTrustlyTransaction($trustlyTransaction)
    {
        if (is_null($trustlyTransaction)) {
            throw new \InvalidArgumentException('non-nullable trustlyTransaction cannot be null');
        }
        $this->container['trustlyTransaction'] = $trustlyTransaction;

        return $this;
    }

    /**
     * Gets verkkopankkiTransaction
     *
     * @return \Frisbii\Model\VerkkopankkiTransaction|null
     */
    public function getVerkkopankkiTransaction()
    {
        return $this->container['verkkopankkiTransaction'];
    }

    /**
     * Sets verkkopankkiTransaction
     *
     * @param \Frisbii\Model\VerkkopankkiTransaction|null $verkkopankkiTransaction verkkopankkiTransaction
     *
     * @return self
     */
    public function setVerkkopankkiTransaction($verkkopankkiTransaction)
    {
        if (is_null($verkkopankkiTransaction)) {
            throw new \InvalidArgumentException('non-nullable verkkopankkiTransaction cannot be null');
        }
        $this->container['verkkopankkiTransaction'] = $verkkopankkiTransaction;

        return $this;
    }

    /**
     * Gets epsTransaction
     *
     * @return \Frisbii\Model\EpsTransaction|null
     */
    public function getEpsTransaction()
    {
        return $this->container['epsTransaction'];
    }

    /**
     * Sets epsTransaction
     *
     * @param \Frisbii\Model\EpsTransaction|null $epsTransaction epsTransaction
     *
     * @return self
     */
    public function setEpsTransaction($epsTransaction)
    {
        if (is_null($epsTransaction)) {
            throw new \InvalidArgumentException('non-nullable epsTransaction cannot be null');
        }
        $this->container['epsTransaction'] = $epsTransaction;

        return $this;
    }

    /**
     * Gets estoniaBanksTransaction
     *
     * @return \Frisbii\Model\EstoniaBanksTransaction|null
     */
    public function getEstoniaBanksTransaction()
    {
        return $this->container['estoniaBanksTransaction'];
    }

    /**
     * Sets estoniaBanksTransaction
     *
     * @param \Frisbii\Model\EstoniaBanksTransaction|null $estoniaBanksTransaction estoniaBanksTransaction
     *
     * @return self
     */
    public function setEstoniaBanksTransaction($estoniaBanksTransaction)
    {
        if (is_null($estoniaBanksTransaction)) {
            throw new \InvalidArgumentException('non-nullable estoniaBanksTransaction cannot be null');
        }
        $this->container['estoniaBanksTransaction'] = $estoniaBanksTransaction;

        return $this;
    }

    /**
     * Gets latviaBanksTransaction
     *
     * @return \Frisbii\Model\LatviaBanksTransaction|null
     */
    public function getLatviaBanksTransaction()
    {
        return $this->container['latviaBanksTransaction'];
    }

    /**
     * Sets latviaBanksTransaction
     *
     * @param \Frisbii\Model\LatviaBanksTransaction|null $latviaBanksTransaction latviaBanksTransaction
     *
     * @return self
     */
    public function setLatviaBanksTransaction($latviaBanksTransaction)
    {
        if (is_null($latviaBanksTransaction)) {
            throw new \InvalidArgumentException('non-nullable latviaBanksTransaction cannot be null');
        }
        $this->container['latviaBanksTransaction'] = $latviaBanksTransaction;

        return $this;
    }

    /**
     * Gets lithuaniaBanksTransaction
     *
     * @return \Frisbii\Model\LithuaniaBanksTransaction|null
     */
    public function getLithuaniaBanksTransaction()
    {
        return $this->container['lithuaniaBanksTransaction'];
    }

    /**
     * Sets lithuaniaBanksTransaction
     *
     * @param \Frisbii\Model\LithuaniaBanksTransaction|null $lithuaniaBanksTransaction lithuaniaBanksTransaction
     *
     * @return self
     */
    public function setLithuaniaBanksTransaction($lithuaniaBanksTransaction)
    {
        if (is_null($lithuaniaBanksTransaction)) {
            throw new \InvalidArgumentException('non-nullable lithuaniaBanksTransaction cannot be null');
        }
        $this->container['lithuaniaBanksTransaction'] = $lithuaniaBanksTransaction;

        return $this;
    }

    /**
     * Gets mbwayTransaction
     *
     * @return \Frisbii\Model\MbwayTransaction|null
     */
    public function getMbwayTransaction()
    {
        return $this->container['mbwayTransaction'];
    }

    /**
     * Sets mbwayTransaction
     *
     * @param \Frisbii\Model\MbwayTransaction|null $mbwayTransaction mbwayTransaction
     *
     * @return self
     */
    public function setMbwayTransaction($mbwayTransaction)
    {
        if (is_null($mbwayTransaction)) {
            throw new \InvalidArgumentException('non-nullable mbwayTransaction cannot be null');
        }
        $this->container['mbwayTransaction'] = $mbwayTransaction;

        return $this;
    }

    /**
     * Gets multibancoTransaction
     *
     * @return \Frisbii\Model\MultibancoTransaction|null
     */
    public function getMultibancoTransaction()
    {
        return $this->container['multibancoTransaction'];
    }

    /**
     * Sets multibancoTransaction
     *
     * @param \Frisbii\Model\MultibancoTransaction|null $multibancoTransaction multibancoTransaction
     *
     * @return self
     */
    public function setMultibancoTransaction($multibancoTransaction)
    {
        if (is_null($multibancoTransaction)) {
            throw new \InvalidArgumentException('non-nullable multibancoTransaction cannot be null');
        }
        $this->container['multibancoTransaction'] = $multibancoTransaction;

        return $this;
    }

    /**
     * Gets mybankTransaction
     *
     * @return \Frisbii\Model\MybankTransaction|null
     */
    public function getMybankTransaction()
    {
        return $this->container['mybankTransaction'];
    }

    /**
     * Sets mybankTransaction
     *
     * @param \Frisbii\Model\MybankTransaction|null $mybankTransaction mybankTransaction
     *
     * @return self
     */
    public function setMybankTransaction($mybankTransaction)
    {
        if (is_null($mybankTransaction)) {
            throw new \InvalidArgumentException('non-nullable mybankTransaction cannot be null');
        }
        $this->container['mybankTransaction'] = $mybankTransaction;

        return $this;
    }

    /**
     * Gets payconiqTransaction
     *
     * @return \Frisbii\Model\PayconiqTransaction|null
     */
    public function getPayconiqTransaction()
    {
        return $this->container['payconiqTransaction'];
    }

    /**
     * Sets payconiqTransaction
     *
     * @param \Frisbii\Model\PayconiqTransaction|null $payconiqTransaction payconiqTransaction
     *
     * @return self
     */
    public function setPayconiqTransaction($payconiqTransaction)
    {
        if (is_null($payconiqTransaction)) {
            throw new \InvalidArgumentException('non-nullable payconiqTransaction cannot be null');
        }
        $this->container['payconiqTransaction'] = $payconiqTransaction;

        return $this;
    }

    /**
     * Gets paysafecardTransaction
     *
     * @return \Frisbii\Model\PaysafecardTransaction|null
     */
    public function getPaysafecardTransaction()
    {
        return $this->container['paysafecardTransaction'];
    }

    /**
     * Sets paysafecardTransaction
     *
     * @param \Frisbii\Model\PaysafecardTransaction|null $paysafecardTransaction paysafecardTransaction
     *
     * @return self
     */
    public function setPaysafecardTransaction($paysafecardTransaction)
    {
        if (is_null($paysafecardTransaction)) {
            throw new \InvalidArgumentException('non-nullable paysafecardTransaction cannot be null');
        }
        $this->container['paysafecardTransaction'] = $paysafecardTransaction;

        return $this;
    }

    /**
     * Gets payseraTransaction
     *
     * @return \Frisbii\Model\PayseraTransaction|null
     */
    public function getPayseraTransaction()
    {
        return $this->container['payseraTransaction'];
    }

    /**
     * Sets payseraTransaction
     *
     * @param \Frisbii\Model\PayseraTransaction|null $payseraTransaction payseraTransaction
     *
     * @return self
     */
    public function setPayseraTransaction($payseraTransaction)
    {
        if (is_null($payseraTransaction)) {
            throw new \InvalidArgumentException('non-nullable payseraTransaction cannot be null');
        }
        $this->container['payseraTransaction'] = $payseraTransaction;

        return $this;
    }

    /**
     * Gets postfinanceTransaction
     *
     * @return \Frisbii\Model\PostfinanceTransaction|null
     */
    public function getPostfinanceTransaction()
    {
        return $this->container['postfinanceTransaction'];
    }

    /**
     * Sets postfinanceTransaction
     *
     * @param \Frisbii\Model\PostfinanceTransaction|null $postfinanceTransaction postfinanceTransaction
     *
     * @return self
     */
    public function setPostfinanceTransaction($postfinanceTransaction)
    {
        if (is_null($postfinanceTransaction)) {
            throw new \InvalidArgumentException('non-nullable postfinanceTransaction cannot be null');
        }
        $this->container['postfinanceTransaction'] = $postfinanceTransaction;

        return $this;
    }

    /**
     * Gets satispayTransaction
     *
     * @return \Frisbii\Model\SatispayTransaction|null
     */
    public function getSatispayTransaction()
    {
        return $this->container['satispayTransaction'];
    }

    /**
     * Sets satispayTransaction
     *
     * @param \Frisbii\Model\SatispayTransaction|null $satispayTransaction satispayTransaction
     *
     * @return self
     */
    public function setSatispayTransaction($satispayTransaction)
    {
        if (is_null($satispayTransaction)) {
            throw new \InvalidArgumentException('non-nullable satispayTransaction cannot be null');
        }
        $this->container['satispayTransaction'] = $satispayTransaction;

        return $this;
    }

    /**
     * Gets twintTransaction
     *
     * @return \Frisbii\Model\TwintTransaction|null
     */
    public function getTwintTransaction()
    {
        return $this->container['twintTransaction'];
    }

    /**
     * Sets twintTransaction
     *
     * @param \Frisbii\Model\TwintTransaction|null $twintTransaction twintTransaction
     *
     * @return self
     */
    public function setTwintTransaction($twintTransaction)
    {
        if (is_null($twintTransaction)) {
            throw new \InvalidArgumentException('non-nullable twintTransaction cannot be null');
        }
        $this->container['twintTransaction'] = $twintTransaction;

        return $this;
    }

    /**
     * Gets wechatpayTransaction
     *
     * @return \Frisbii\Model\WeChatPayTransaction|null
     */
    public function getWechatpayTransaction()
    {
        return $this->container['wechatpayTransaction'];
    }

    /**
     * Sets wechatpayTransaction
     *
     * @param \Frisbii\Model\WeChatPayTransaction|null $wechatpayTransaction wechatpayTransaction
     *
     * @return self
     */
    public function setWechatpayTransaction($wechatpayTransaction)
    {
        if (is_null($wechatpayTransaction)) {
            throw new \InvalidArgumentException('non-nullable wechatpayTransaction cannot be null');
        }
        $this->container['wechatpayTransaction'] = $wechatpayTransaction;

        return $this;
    }

    /**
     * Gets mpsTransaction
     *
     * @return \Frisbii\Model\MpsTransaction|null
     */
    public function getMpsTransaction()
    {
        return $this->container['mpsTransaction'];
    }

    /**
     * Sets mpsTransaction
     *
     * @param \Frisbii\Model\MpsTransaction|null $mpsTransaction mpsTransaction
     *
     * @return self
     */
    public function setMpsTransaction($mpsTransaction)
    {
        if (is_null($mpsTransaction)) {
            throw new \InvalidArgumentException('non-nullable mpsTransaction cannot be null');
        }
        $this->container['mpsTransaction'] = $mpsTransaction;

        return $this;
    }

    /**
     * Gets vippsEpaymentTransaction
     *
     * @return \Frisbii\Model\VippsEpaymentTransaction|null
     */
    public function getVippsEpaymentTransaction()
    {
        return $this->container['vippsEpaymentTransaction'];
    }

    /**
     * Sets vippsEpaymentTransaction
     *
     * @param \Frisbii\Model\VippsEpaymentTransaction|null $vippsEpaymentTransaction vippsEpaymentTransaction
     *
     * @return self
     */
    public function setVippsEpaymentTransaction($vippsEpaymentTransaction)
    {
        if (is_null($vippsEpaymentTransaction)) {
            throw new \InvalidArgumentException('non-nullable vippsEpaymentTransaction cannot be null');
        }
        $this->container['vippsEpaymentTransaction'] = $vippsEpaymentTransaction;

        return $this;
    }

    /**
     * Gets vippsRecurringTransaction
     *
     * @return \Frisbii\Model\VippsRecurringTransaction|null
     */
    public function getVippsRecurringTransaction()
    {
        return $this->container['vippsRecurringTransaction'];
    }

    /**
     * Sets vippsRecurringTransaction
     *
     * @param \Frisbii\Model\VippsRecurringTransaction|null $vippsRecurringTransaction vippsRecurringTransaction
     *
     * @return self
     */
    public function setVippsRecurringTransaction($vippsRecurringTransaction)
    {
        if (is_null($vippsRecurringTransaction)) {
            throw new \InvalidArgumentException('non-nullable vippsRecurringTransaction cannot be null');
        }
        $this->container['vippsRecurringTransaction'] = $vippsRecurringTransaction;

        return $this;
    }

    /**
     * Gets offlineTransaction
     *
     * @return \Frisbii\Model\OfflineTransaction|null
     */
    public function getOfflineTransaction()
    {
        return $this->container['offlineTransaction'];
    }

    /**
     * Sets offlineTransaction
     *
     * @param \Frisbii\Model\OfflineTransaction|null $offlineTransaction offlineTransaction
     *
     * @return self
     */
    public function setOfflineTransaction($offlineTransaction)
    {
        if (is_null($offlineTransaction)) {
            throw new \InvalidArgumentException('non-nullable offlineTransaction cannot be null');
        }
        $this->container['offlineTransaction'] = $offlineTransaction;

        return $this;
    }

    /**
     * Gets paymentContext
     *
     * @return string|null
     */
    public function getPaymentContext()
    {
        return $this->container['paymentContext'];
    }

    /**
     * Sets paymentContext
     *
     * @param string|null $paymentContext Payment context describing if the transaction is customer or merchant initiated, one of the following values: `cit`, `mit`, `cit_cof`
     *
     * @return self
     */
    public function setPaymentContext($paymentContext)
    {
        if (is_null($paymentContext)) {
            throw new \InvalidArgumentException('non-nullable paymentContext cannot be null');
        }
        $this->container['paymentContext'] = $paymentContext;

        return $this;
    }

    /**
     * Gets accountingInvoice
     *
     * @return string|null
     */
    public function getAccountingInvoice()
    {
        return $this->container['accountingInvoice'];
    }

    /**
     * Sets accountingInvoice
     *
     * @param string|null $accountingInvoice Accounting invoice number if this transaction belongs to an accounting invoice
     *
     * @return self
     */
    public function setAccountingInvoice($accountingInvoice)
    {
        if (is_null($accountingInvoice)) {
            throw new \InvalidArgumentException('non-nullable accountingInvoice cannot be null');
        }
        $this->container['accountingInvoice'] = $accountingInvoice;

        return $this;
    }

    /**
     * Gets debtorId
     *
     * @return int|null
     */
    public function getDebtorId()
    {
        return $this->container['debtorId'];
    }

    /**
     * Sets debtorId
     *
     * @param int|null $debtorId Customer debtor id if this transaction belongs to an accounting invoice
     *
     * @return self
     */
    public function setDebtorId($debtorId)
    {
        if (is_null($debtorId)) {
            throw new \InvalidArgumentException('non-nullable debtorId cannot be null');
        }
        $this->container['debtorId'] = $debtorId;

        return $this;
    }

    /**
     * Gets customerHandle
     *
     * @return string|null
     */
    public function getCustomerHandle()
    {
        return $this->container['customerHandle'];
    }

    /**
     * Sets customerHandle
     *
     * @param string|null $customerHandle Customer handle if this transaction belongs to an accounting invoice
     *
     * @return self
     */
    public function setCustomerHandle($customerHandle)
    {
        if (is_null($customerHandle)) {
            throw new \InvalidArgumentException('non-nullable customerHandle cannot be null');
        }
        $this->container['customerHandle'] = $customerHandle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


