<?php
/**
 * Invoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @description Next invoice preview
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'handle' => 'string',
        'customer' => 'string',
        'state' => 'string',
        'type' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'due' => '\DateTime',
        'credits' => '\Frisbii\Model\CreditInvoice[]',
        'created' => '\DateTime',
        'discountAmount' => 'int',
        'orgAmount' => 'int',
        'amountVat' => 'int',
        'amountExVat' => 'int',
        'settledAmount' => 'int',
        'refundedAmount' => 'int',
        'orderLines' => '\Frisbii\Model\OrderLine[]',
        'additionalCosts' => 'string[]',
        'transactions' => '\Frisbii\Model\Transaction[]',
        'subscription' => 'string',
        'plan' => 'string',
        'processing' => 'bool',
        'number' => 'int',
        'failed' => '\DateTime',
        'settled' => '\DateTime',
        'cancelled' => '\DateTime',
        'authorized' => '\DateTime',
        'planVersion' => 'int',
        'dunningPlan' => 'string',
        'authorizedAmount' => 'int',
        'creditedAmount' => 'int',
        'periodNumber' => 'int',
        'recurringPaymentMethod' => 'string',
        'dunningStart' => '\DateTime',
        'dunningCount' => 'int',
        'dunningExpired' => '\DateTime',
        'periodFrom' => '\DateTime',
        'periodTo' => '\DateTime',
        'settleLater' => 'bool',
        'settleLaterPaymentMethod' => 'string',
        'billingAddress' => '\Frisbii\Model\InvoiceBillingAddress',
        'shippingAddress' => '\Frisbii\Model\InvoiceShippingAddress',
        'accountingNumber' => 'string',
        'debtorId' => 'int',
        'downloadUrl' => 'string',
        'accountingCreatedDate' => '\DateTime',
        'invoiceFileType' => 'string',
        'creditNotes' => '\Frisbii\Model\InvoiceCreditNote[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'handle' => null,
        'customer' => null,
        'state' => null,
        'type' => null,
        'amount' => 'int32',
        'currency' => null,
        'due' => 'date-time',
        'credits' => null,
        'created' => 'date-time',
        'discountAmount' => 'int32',
        'orgAmount' => 'int32',
        'amountVat' => 'int32',
        'amountExVat' => 'int32',
        'settledAmount' => 'int32',
        'refundedAmount' => 'int32',
        'orderLines' => null,
        'additionalCosts' => null,
        'transactions' => null,
        'subscription' => null,
        'plan' => null,
        'processing' => null,
        'number' => 'int32',
        'failed' => 'date-time',
        'settled' => 'date-time',
        'cancelled' => 'date-time',
        'authorized' => 'date-time',
        'planVersion' => 'int32',
        'dunningPlan' => null,
        'authorizedAmount' => 'int32',
        'creditedAmount' => 'int32',
        'periodNumber' => 'int32',
        'recurringPaymentMethod' => null,
        'dunningStart' => 'date-time',
        'dunningCount' => 'int32',
        'dunningExpired' => 'date-time',
        'periodFrom' => 'date-time',
        'periodTo' => 'date-time',
        'settleLater' => null,
        'settleLaterPaymentMethod' => null,
        'billingAddress' => null,
        'shippingAddress' => null,
        'accountingNumber' => null,
        'debtorId' => 'int64',
        'downloadUrl' => null,
        'accountingCreatedDate' => 'date-time',
        'invoiceFileType' => null,
        'creditNotes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'handle' => false,
        'customer' => false,
        'state' => false,
        'type' => false,
        'amount' => false,
        'currency' => false,
        'due' => false,
        'credits' => false,
        'created' => false,
        'discountAmount' => false,
        'orgAmount' => false,
        'amountVat' => false,
        'amountExVat' => false,
        'settledAmount' => false,
        'refundedAmount' => false,
        'orderLines' => false,
        'additionalCosts' => false,
        'transactions' => false,
        'subscription' => false,
        'plan' => false,
        'processing' => false,
        'number' => false,
        'failed' => false,
        'settled' => false,
        'cancelled' => false,
        'authorized' => false,
        'planVersion' => false,
        'dunningPlan' => false,
        'authorizedAmount' => false,
        'creditedAmount' => false,
        'periodNumber' => false,
        'recurringPaymentMethod' => false,
        'dunningStart' => false,
        'dunningCount' => false,
        'dunningExpired' => false,
        'periodFrom' => false,
        'periodTo' => false,
        'settleLater' => false,
        'settleLaterPaymentMethod' => false,
        'billingAddress' => false,
        'shippingAddress' => false,
        'accountingNumber' => false,
        'debtorId' => false,
        'downloadUrl' => false,
        'accountingCreatedDate' => false,
        'invoiceFileType' => false,
        'creditNotes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'handle' => 'handle',
        'customer' => 'customer',
        'state' => 'state',
        'type' => 'type',
        'amount' => 'amount',
        'currency' => 'currency',
        'due' => 'due',
        'credits' => 'credits',
        'created' => 'created',
        'discountAmount' => 'discount_amount',
        'orgAmount' => 'org_amount',
        'amountVat' => 'amount_vat',
        'amountExVat' => 'amount_ex_vat',
        'settledAmount' => 'settled_amount',
        'refundedAmount' => 'refunded_amount',
        'orderLines' => 'order_lines',
        'additionalCosts' => 'additional_costs',
        'transactions' => 'transactions',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'processing' => 'processing',
        'number' => 'number',
        'failed' => 'failed',
        'settled' => 'settled',
        'cancelled' => 'cancelled',
        'authorized' => 'authorized',
        'planVersion' => 'plan_version',
        'dunningPlan' => 'dunning_plan',
        'authorizedAmount' => 'authorized_amount',
        'creditedAmount' => 'credited_amount',
        'periodNumber' => 'period_number',
        'recurringPaymentMethod' => 'recurring_payment_method',
        'dunningStart' => 'dunning_start',
        'dunningCount' => 'dunning_count',
        'dunningExpired' => 'dunning_expired',
        'periodFrom' => 'period_from',
        'periodTo' => 'period_to',
        'settleLater' => 'settle_later',
        'settleLaterPaymentMethod' => 'settle_later_payment_method',
        'billingAddress' => 'billing_address',
        'shippingAddress' => 'shipping_address',
        'accountingNumber' => 'accounting_number',
        'debtorId' => 'debtor_id',
        'downloadUrl' => 'download_url',
        'accountingCreatedDate' => 'accounting_created_date',
        'invoiceFileType' => 'invoice_file_type',
        'creditNotes' => 'credit_notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'handle' => 'setHandle',
        'customer' => 'setCustomer',
        'state' => 'setState',
        'type' => 'setType',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'due' => 'setDue',
        'credits' => 'setCredits',
        'created' => 'setCreated',
        'discountAmount' => 'setDiscountAmount',
        'orgAmount' => 'setOrgAmount',
        'amountVat' => 'setAmountVat',
        'amountExVat' => 'setAmountExVat',
        'settledAmount' => 'setSettledAmount',
        'refundedAmount' => 'setRefundedAmount',
        'orderLines' => 'setOrderLines',
        'additionalCosts' => 'setAdditionalCosts',
        'transactions' => 'setTransactions',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'processing' => 'setProcessing',
        'number' => 'setNumber',
        'failed' => 'setFailed',
        'settled' => 'setSettled',
        'cancelled' => 'setCancelled',
        'authorized' => 'setAuthorized',
        'planVersion' => 'setPlanVersion',
        'dunningPlan' => 'setDunningPlan',
        'authorizedAmount' => 'setAuthorizedAmount',
        'creditedAmount' => 'setCreditedAmount',
        'periodNumber' => 'setPeriodNumber',
        'recurringPaymentMethod' => 'setRecurringPaymentMethod',
        'dunningStart' => 'setDunningStart',
        'dunningCount' => 'setDunningCount',
        'dunningExpired' => 'setDunningExpired',
        'periodFrom' => 'setPeriodFrom',
        'periodTo' => 'setPeriodTo',
        'settleLater' => 'setSettleLater',
        'settleLaterPaymentMethod' => 'setSettleLaterPaymentMethod',
        'billingAddress' => 'setBillingAddress',
        'shippingAddress' => 'setShippingAddress',
        'accountingNumber' => 'setAccountingNumber',
        'debtorId' => 'setDebtorId',
        'downloadUrl' => 'setDownloadUrl',
        'accountingCreatedDate' => 'setAccountingCreatedDate',
        'invoiceFileType' => 'setInvoiceFileType',
        'creditNotes' => 'setCreditNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'handle' => 'getHandle',
        'customer' => 'getCustomer',
        'state' => 'getState',
        'type' => 'getType',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'due' => 'getDue',
        'credits' => 'getCredits',
        'created' => 'getCreated',
        'discountAmount' => 'getDiscountAmount',
        'orgAmount' => 'getOrgAmount',
        'amountVat' => 'getAmountVat',
        'amountExVat' => 'getAmountExVat',
        'settledAmount' => 'getSettledAmount',
        'refundedAmount' => 'getRefundedAmount',
        'orderLines' => 'getOrderLines',
        'additionalCosts' => 'getAdditionalCosts',
        'transactions' => 'getTransactions',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'processing' => 'getProcessing',
        'number' => 'getNumber',
        'failed' => 'getFailed',
        'settled' => 'getSettled',
        'cancelled' => 'getCancelled',
        'authorized' => 'getAuthorized',
        'planVersion' => 'getPlanVersion',
        'dunningPlan' => 'getDunningPlan',
        'authorizedAmount' => 'getAuthorizedAmount',
        'creditedAmount' => 'getCreditedAmount',
        'periodNumber' => 'getPeriodNumber',
        'recurringPaymentMethod' => 'getRecurringPaymentMethod',
        'dunningStart' => 'getDunningStart',
        'dunningCount' => 'getDunningCount',
        'dunningExpired' => 'getDunningExpired',
        'periodFrom' => 'getPeriodFrom',
        'periodTo' => 'getPeriodTo',
        'settleLater' => 'getSettleLater',
        'settleLaterPaymentMethod' => 'getSettleLaterPaymentMethod',
        'billingAddress' => 'getBillingAddress',
        'shippingAddress' => 'getShippingAddress',
        'accountingNumber' => 'getAccountingNumber',
        'debtorId' => 'getDebtorId',
        'downloadUrl' => 'getDownloadUrl',
        'accountingCreatedDate' => 'getAccountingCreatedDate',
        'invoiceFileType' => 'getInvoiceFileType',
        'creditNotes' => 'getCreditNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_CREATED = 'created';
    public const STATE_PENDING = 'pending';
    public const STATE_DUNNING = 'dunning';
    public const STATE_SETTLED = 'settled';
    public const STATE_AUTHORIZED = 'authorized';
    public const STATE_CANCELLED = 'cancelled';
    public const STATE_FAILED = 'failed';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_S = 's';
    public const TYPE_SO = 'so';
    public const TYPE_SOI = 'soi';
    public const TYPE_CO = 'co';
    public const TYPE_CH = 'ch';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const INVOICE_FILE_TYPE_PDF = 'pdf';
    public const INVOICE_FILE_TYPE_PDF_XML = 'pdf_xml';
    public const INVOICE_FILE_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_CREATED,
            self::STATE_PENDING,
            self::STATE_DUNNING,
            self::STATE_SETTLED,
            self::STATE_AUTHORIZED,
            self::STATE_CANCELLED,
            self::STATE_FAILED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_S,
            self::TYPE_SO,
            self::TYPE_SOI,
            self::TYPE_CO,
            self::TYPE_CH,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceFileTypeAllowableValues()
    {
        return [
            self::INVOICE_FILE_TYPE_PDF,
            self::INVOICE_FILE_TYPE_PDF_XML,
            self::INVOICE_FILE_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('due', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('discountAmount', $data ?? [], null);
        $this->setIfExists('orgAmount', $data ?? [], null);
        $this->setIfExists('amountVat', $data ?? [], null);
        $this->setIfExists('amountExVat', $data ?? [], null);
        $this->setIfExists('settledAmount', $data ?? [], null);
        $this->setIfExists('refundedAmount', $data ?? [], null);
        $this->setIfExists('orderLines', $data ?? [], null);
        $this->setIfExists('additionalCosts', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('processing', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('settled', $data ?? [], null);
        $this->setIfExists('cancelled', $data ?? [], null);
        $this->setIfExists('authorized', $data ?? [], null);
        $this->setIfExists('planVersion', $data ?? [], null);
        $this->setIfExists('dunningPlan', $data ?? [], null);
        $this->setIfExists('authorizedAmount', $data ?? [], null);
        $this->setIfExists('creditedAmount', $data ?? [], null);
        $this->setIfExists('periodNumber', $data ?? [], null);
        $this->setIfExists('recurringPaymentMethod', $data ?? [], null);
        $this->setIfExists('dunningStart', $data ?? [], null);
        $this->setIfExists('dunningCount', $data ?? [], null);
        $this->setIfExists('dunningExpired', $data ?? [], null);
        $this->setIfExists('periodFrom', $data ?? [], null);
        $this->setIfExists('periodTo', $data ?? [], null);
        $this->setIfExists('settleLater', $data ?? [], null);
        $this->setIfExists('settleLaterPaymentMethod', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('shippingAddress', $data ?? [], null);
        $this->setIfExists('accountingNumber', $data ?? [], null);
        $this->setIfExists('debtorId', $data ?? [], null);
        $this->setIfExists('downloadUrl', $data ?? [], null);
        $this->setIfExists('accountingCreatedDate', $data ?? [], null);
        $this->setIfExists('invoiceFileType', $data ?? [], null);
        $this->setIfExists('creditNotes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ((mb_strlen($this->container['customer']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['due'] === null) {
            $invalidProperties[] = "'due' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['discountAmount'] === null) {
            $invalidProperties[] = "'discountAmount' can't be null";
        }
        if (($this->container['discountAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discountAmount', must be bigger than or equal to 0.";
        }

        if ($this->container['orgAmount'] === null) {
            $invalidProperties[] = "'orgAmount' can't be null";
        }
        if (($this->container['orgAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'orgAmount', must be bigger than or equal to 0.";
        }

        if ($this->container['amountVat'] === null) {
            $invalidProperties[] = "'amountVat' can't be null";
        }
        if ($this->container['amountExVat'] === null) {
            $invalidProperties[] = "'amountExVat' can't be null";
        }
        if ($this->container['settledAmount'] === null) {
            $invalidProperties[] = "'settledAmount' can't be null";
        }
        if ($this->container['refundedAmount'] === null) {
            $invalidProperties[] = "'refundedAmount' can't be null";
        }
        if ($this->container['orderLines'] === null) {
            $invalidProperties[] = "'orderLines' can't be null";
        }
        if ($this->container['additionalCosts'] === null) {
            $invalidProperties[] = "'additionalCosts' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        if (!is_null($this->container['number']) && ($this->container['number'] < 1)) {
            $invalidProperties[] = "invalid value for 'number', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getInvoiceFileTypeAllowableValues();
        if (!is_null($this->container['invoiceFileType']) && !in_array($this->container['invoiceFileType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoiceFileType', must be one of '%s'",
                $this->container['invoiceFileType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Invoice id assigned by Frisbii
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }

        if ((mb_strlen($customer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The invoice state one of the following: `created`, `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The invoice amount including VAT
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Invoice currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets due
     *
     * @return \DateTime
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param \DateTime $due When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setDue($due)
    {
        if (is_null($due)) {
            throw new \InvalidArgumentException('non-nullable due cannot be null');
        }
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Frisbii\Model\CreditInvoice[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Frisbii\Model\CreditInvoice[] $credits Credits applied to invoice
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets discountAmount
     *
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     *
     * @param int $discountAmount The potential discount amount deducted from the invoice amount including VAT
     *
     * @return self
     */
    public function setDiscountAmount($discountAmount)
    {
        if (is_null($discountAmount)) {
            throw new \InvalidArgumentException('non-nullable discountAmount cannot be null');
        }

        if (($discountAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discountAmount when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets orgAmount
     *
     * @return int
     */
    public function getOrgAmount()
    {
        return $this->container['orgAmount'];
    }

    /**
     * Sets orgAmount
     *
     * @param int $orgAmount The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice
     *
     * @return self
     */
    public function setOrgAmount($orgAmount)
    {
        if (is_null($orgAmount)) {
            throw new \InvalidArgumentException('non-nullable orgAmount cannot be null');
        }

        if (($orgAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $orgAmount when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['orgAmount'] = $orgAmount;

        return $this;
    }

    /**
     * Gets amountVat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amountVat'];
    }

    /**
     * Sets amountVat
     *
     * @param int $amountVat The invoice vat amount calculated as rounded summed fractional vats for each orderline
     *
     * @return self
     */
    public function setAmountVat($amountVat)
    {
        if (is_null($amountVat)) {
            throw new \InvalidArgumentException('non-nullable amountVat cannot be null');
        }
        $this->container['amountVat'] = $amountVat;

        return $this;
    }

    /**
     * Gets amountExVat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amountExVat'];
    }

    /**
     * Sets amountExVat
     *
     * @param int $amountExVat The invoice amount without vat
     *
     * @return self
     */
    public function setAmountExVat($amountExVat)
    {
        if (is_null($amountExVat)) {
            throw new \InvalidArgumentException('non-nullable amountExVat cannot be null');
        }
        $this->container['amountExVat'] = $amountExVat;

        return $this;
    }

    /**
     * Gets settledAmount
     *
     * @return int
     */
    public function getSettledAmount()
    {
        return $this->container['settledAmount'];
    }

    /**
     * Sets settledAmount
     *
     * @param int $settledAmount Settled amount
     *
     * @return self
     */
    public function setSettledAmount($settledAmount)
    {
        if (is_null($settledAmount)) {
            throw new \InvalidArgumentException('non-nullable settledAmount cannot be null');
        }
        $this->container['settledAmount'] = $settledAmount;

        return $this;
    }

    /**
     * Gets refundedAmount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refundedAmount'];
    }

    /**
     * Sets refundedAmount
     *
     * @param int $refundedAmount Refunded amount
     *
     * @return self
     */
    public function setRefundedAmount($refundedAmount)
    {
        if (is_null($refundedAmount)) {
            throw new \InvalidArgumentException('non-nullable refundedAmount cannot be null');
        }
        $this->container['refundedAmount'] = $refundedAmount;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \Frisbii\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \Frisbii\Model\OrderLine[] $orderLines Order lines for invoice sorted by descending timestamp
     *
     * @return self
     */
    public function setOrderLines($orderLines)
    {
        if (is_null($orderLines)) {
            throw new \InvalidArgumentException('non-nullable orderLines cannot be null');
        }
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets additionalCosts
     *
     * @return string[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     *
     * @param string[] $additionalCosts Additional cost handles for any additional costs added to this invoice
     *
     * @return self
     */
    public function setAdditionalCosts($additionalCosts)
    {
        if (is_null($additionalCosts)) {
            throw new \InvalidArgumentException('non-nullable additionalCosts cannot be null');
        }
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Frisbii\Model\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Frisbii\Model\Transaction[] $transactions Invoice transactions, ascending order and limited to 100 transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string|null $subscription Subscription handle, will be null for a one-time customer invoice
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string|null $plan Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets processing
     *
     * @return bool|null
     */
    public function getProcessing()
    {
        return $this->container['processing'];
    }

    /**
     * Sets processing
     *
     * @param bool|null $processing For asynchronous payment methods, e.g. MobilePay subscriptions, this flag indicates that an invoice transaction is in state processing and is awaiting result.
     *
     * @return self
     */
    public function setProcessing($processing)
    {
        if (is_null($processing)) {
            throw new \InvalidArgumentException('non-nullable processing cannot be null');
        }
        $this->container['processing'] = $processing;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Sequential invoice number. Only present for subscription and customer invoices.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        if (($number < 1)) {
            throw new \InvalidArgumentException('invalid value for $number when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime|null
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime|null $failed When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setFailed($failed)
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets settled
     *
     * @return \DateTime|null
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     *
     * @param \DateTime|null $settled When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setSettled($settled)
    {
        if (is_null($settled)) {
            throw new \InvalidArgumentException('non-nullable settled cannot be null');
        }
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return \DateTime|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param \DateTime|null $cancelled When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            throw new \InvalidArgumentException('non-nullable cancelled cannot be null');
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return \DateTime|null
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param \DateTime|null $authorized When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setAuthorized($authorized)
    {
        if (is_null($authorized)) {
            throw new \InvalidArgumentException('non-nullable authorized cannot be null');
        }
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets planVersion
     *
     * @return int|null
     */
    public function getPlanVersion()
    {
        return $this->container['planVersion'];
    }

    /**
     * Sets planVersion
     *
     * @param int|null $planVersion Subscription plan version
     *
     * @return self
     */
    public function setPlanVersion($planVersion)
    {
        if (is_null($planVersion)) {
            throw new \InvalidArgumentException('non-nullable planVersion cannot be null');
        }
        $this->container['planVersion'] = $planVersion;

        return $this;
    }

    /**
     * Gets dunningPlan
     *
     * @return string|null
     */
    public function getDunningPlan()
    {
        return $this->container['dunningPlan'];
    }

    /**
     * Sets dunningPlan
     *
     * @param string|null $dunningPlan Dunning plan handle
     *
     * @return self
     */
    public function setDunningPlan($dunningPlan)
    {
        if (is_null($dunningPlan)) {
            throw new \InvalidArgumentException('non-nullable dunningPlan cannot be null');
        }
        $this->container['dunningPlan'] = $dunningPlan;

        return $this;
    }

    /**
     * Gets authorizedAmount
     *
     * @return int|null
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorizedAmount'];
    }

    /**
     * Sets authorizedAmount
     *
     * @param int|null $authorizedAmount Authorized amount
     *
     * @return self
     */
    public function setAuthorizedAmount($authorizedAmount)
    {
        if (is_null($authorizedAmount)) {
            throw new \InvalidArgumentException('non-nullable authorizedAmount cannot be null');
        }
        $this->container['authorizedAmount'] = $authorizedAmount;

        return $this;
    }

    /**
     * Gets creditedAmount
     *
     * @return int|null
     */
    public function getCreditedAmount()
    {
        return $this->container['creditedAmount'];
    }

    /**
     * Sets creditedAmount
     *
     * @param int|null $creditedAmount Credited amount
     *
     * @return self
     */
    public function setCreditedAmount($creditedAmount)
    {
        if (is_null($creditedAmount)) {
            throw new \InvalidArgumentException('non-nullable creditedAmount cannot be null');
        }
        $this->container['creditedAmount'] = $creditedAmount;

        return $this;
    }

    /**
     * Gets periodNumber
     *
     * @return int|null
     */
    public function getPeriodNumber()
    {
        return $this->container['periodNumber'];
    }

    /**
     * Sets periodNumber
     *
     * @param int|null $periodNumber The subscription period this invoice is for
     *
     * @return self
     */
    public function setPeriodNumber($periodNumber)
    {
        if (is_null($periodNumber)) {
            throw new \InvalidArgumentException('non-nullable periodNumber cannot be null');
        }
        $this->container['periodNumber'] = $periodNumber;

        return $this;
    }

    /**
     * Gets recurringPaymentMethod
     *
     * @return string|null
     */
    public function getRecurringPaymentMethod()
    {
        return $this->container['recurringPaymentMethod'];
    }

    /**
     * Sets recurringPaymentMethod
     *
     * @param string|null $recurringPaymentMethod Optional reference to recurring payment method created in conjunction with charging
     *
     * @return self
     */
    public function setRecurringPaymentMethod($recurringPaymentMethod)
    {
        if (is_null($recurringPaymentMethod)) {
            throw new \InvalidArgumentException('non-nullable recurringPaymentMethod cannot be null');
        }
        $this->container['recurringPaymentMethod'] = $recurringPaymentMethod;

        return $this;
    }

    /**
     * Gets dunningStart
     *
     * @return \DateTime|null
     */
    public function getDunningStart()
    {
        return $this->container['dunningStart'];
    }

    /**
     * Sets dunningStart
     *
     * @param \DateTime|null $dunningStart When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setDunningStart($dunningStart)
    {
        if (is_null($dunningStart)) {
            throw new \InvalidArgumentException('non-nullable dunningStart cannot be null');
        }
        $this->container['dunningStart'] = $dunningStart;

        return $this;
    }

    /**
     * Gets dunningCount
     *
     * @return int|null
     */
    public function getDunningCount()
    {
        return $this->container['dunningCount'];
    }

    /**
     * Sets dunningCount
     *
     * @param int|null $dunningCount Number of dunning events for invoice (number of reminders sent)
     *
     * @return self
     */
    public function setDunningCount($dunningCount)
    {
        if (is_null($dunningCount)) {
            throw new \InvalidArgumentException('non-nullable dunningCount cannot be null');
        }
        $this->container['dunningCount'] = $dunningCount;

        return $this;
    }

    /**
     * Gets dunningExpired
     *
     * @return \DateTime|null
     */
    public function getDunningExpired()
    {
        return $this->container['dunningExpired'];
    }

    /**
     * Sets dunningExpired
     *
     * @param \DateTime|null $dunningExpired When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setDunningExpired($dunningExpired)
    {
        if (is_null($dunningExpired)) {
            throw new \InvalidArgumentException('non-nullable dunningExpired cannot be null');
        }
        $this->container['dunningExpired'] = $dunningExpired;

        return $this;
    }

    /**
     * Gets periodFrom
     *
     * @return \DateTime|null
     */
    public function getPeriodFrom()
    {
        return $this->container['periodFrom'];
    }

    /**
     * Sets periodFrom
     *
     * @param \DateTime|null $periodFrom The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodFrom($periodFrom)
    {
        if (is_null($periodFrom)) {
            throw new \InvalidArgumentException('non-nullable periodFrom cannot be null');
        }
        $this->container['periodFrom'] = $periodFrom;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return \DateTime|null
     */
    public function getPeriodTo()
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param \DateTime|null $periodTo The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodTo($periodTo)
    {
        if (is_null($periodTo)) {
            throw new \InvalidArgumentException('non-nullable periodTo cannot be null');
        }
        $this->container['periodTo'] = $periodTo;

        return $this;
    }

    /**
     * Gets settleLater
     *
     * @return bool|null
     */
    public function getSettleLater()
    {
        return $this->container['settleLater'];
    }

    /**
     * Sets settleLater
     *
     * @param bool|null $settleLater Whether this is a customer one-time invoice that will be settled later
     *
     * @return self
     */
    public function setSettleLater($settleLater)
    {
        if (is_null($settleLater)) {
            throw new \InvalidArgumentException('non-nullable settleLater cannot be null');
        }
        $this->container['settleLater'] = $settleLater;

        return $this;
    }

    /**
     * Gets settleLaterPaymentMethod
     *
     * @return string|null
     */
    public function getSettleLaterPaymentMethod()
    {
        return $this->container['settleLaterPaymentMethod'];
    }

    /**
     * Sets settleLaterPaymentMethod
     *
     * @param string|null $settleLaterPaymentMethod The payment method to use for a later settle of a one-time customer invoice
     *
     * @return self
     */
    public function setSettleLaterPaymentMethod($settleLaterPaymentMethod)
    {
        if (is_null($settleLaterPaymentMethod)) {
            throw new \InvalidArgumentException('non-nullable settleLaterPaymentMethod cannot be null');
        }
        $this->container['settleLaterPaymentMethod'] = $settleLaterPaymentMethod;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \Frisbii\Model\InvoiceBillingAddress|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \Frisbii\Model\InvoiceBillingAddress|null $billingAddress billingAddress
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        if (is_null($billingAddress)) {
            throw new \InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \Frisbii\Model\InvoiceShippingAddress|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \Frisbii\Model\InvoiceShippingAddress|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        if (is_null($shippingAddress)) {
            throw new \InvalidArgumentException('non-nullable shippingAddress cannot be null');
        }
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets accountingNumber
     *
     * @return string|null
     */
    public function getAccountingNumber()
    {
        return $this->container['accountingNumber'];
    }

    /**
     * Sets accountingNumber
     *
     * @param string|null $accountingNumber Invoice accounting number
     *
     * @return self
     */
    public function setAccountingNumber($accountingNumber)
    {
        if (is_null($accountingNumber)) {
            throw new \InvalidArgumentException('non-nullable accountingNumber cannot be null');
        }
        $this->container['accountingNumber'] = $accountingNumber;

        return $this;
    }

    /**
     * Gets debtorId
     *
     * @return int|null
     */
    public function getDebtorId()
    {
        return $this->container['debtorId'];
    }

    /**
     * Sets debtorId
     *
     * @param int|null $debtorId Customer debtor id
     *
     * @return self
     */
    public function setDebtorId($debtorId)
    {
        if (is_null($debtorId)) {
            throw new \InvalidArgumentException('non-nullable debtorId cannot be null');
        }
        $this->container['debtorId'] = $debtorId;

        return $this;
    }

    /**
     * Gets downloadUrl
     *
     * @return string|null
     */
    public function getDownloadUrl()
    {
        return $this->container['downloadUrl'];
    }

    /**
     * Sets downloadUrl
     *
     * @param string|null $downloadUrl Link to the invoice or credit note PDF, available if PDF generation and accounting features are enabled (only for subscription invoices, not charges). Access requires authentication. See https://docs.frisbii.com/reference/authentication. The response is a binary PDF file.
     *
     * @return self
     */
    public function setDownloadUrl($downloadUrl)
    {
        if (is_null($downloadUrl)) {
            throw new \InvalidArgumentException('non-nullable downloadUrl cannot be null');
        }
        $this->container['downloadUrl'] = $downloadUrl;

        return $this;
    }

    /**
     * Gets accountingCreatedDate
     *
     * @return \DateTime|null
     */
    public function getAccountingCreatedDate()
    {
        return $this->container['accountingCreatedDate'];
    }

    /**
     * Sets accountingCreatedDate
     *
     * @param \DateTime|null $accountingCreatedDate When the accounting invoice was created. An accounting invoice is created when a non-charging invoice is created with the state `pending` or the invoice moved from state `created`. Timestamp in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setAccountingCreatedDate($accountingCreatedDate)
    {
        if (is_null($accountingCreatedDate)) {
            throw new \InvalidArgumentException('non-nullable accountingCreatedDate cannot be null');
        }
        $this->container['accountingCreatedDate'] = $accountingCreatedDate;

        return $this;
    }

    /**
     * Gets invoiceFileType
     *
     * @return string|null
     */
    public function getInvoiceFileType()
    {
        return $this->container['invoiceFileType'];
    }

    /**
     * Sets invoiceFileType
     *
     * @param string|null $invoiceFileType The type of invoice file, e.g. `pdf`
     *
     * @return self
     */
    public function setInvoiceFileType($invoiceFileType)
    {
        if (is_null($invoiceFileType)) {
            throw new \InvalidArgumentException('non-nullable invoiceFileType cannot be null');
        }
        $allowedValues = $this->getInvoiceFileTypeAllowableValues();
        if (!in_array($invoiceFileType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoiceFileType', must be one of '%s'",
                    $invoiceFileType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoiceFileType'] = $invoiceFileType;

        return $this;
    }

    /**
     * Gets creditNotes
     *
     * @return \Frisbii\Model\InvoiceCreditNote[]|null
     */
    public function getCreditNotes()
    {
        return $this->container['creditNotes'];
    }

    /**
     * Sets creditNotes
     *
     * @param \Frisbii\Model\InvoiceCreditNote[]|null $creditNotes Invoice credit notes
     *
     * @return self
     */
    public function setCreditNotes($creditNotes)
    {
        if (is_null($creditNotes)) {
            throw new \InvalidArgumentException('non-nullable creditNotes cannot be null');
        }
        $this->container['creditNotes'] = $creditNotes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


