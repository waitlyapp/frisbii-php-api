<?php
/**
 * CreateSubscriptionInvoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreateSubscriptionInvoice Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSubscriptionInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSubscriptionInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'handle' => 'string',
        'instant' => 'bool',
        'due' => 'string',
        'settle' => '\Frisbii\Model\Settle',
        'metadata' => 'array<string,object>',
        'planManual' => 'bool',
        'collectAdditionalCosts' => 'bool',
        'collectCredit' => 'bool',
        'applyDiscounts' => 'bool',
        'orderLines' => '\Frisbii\Model\CreateOrderLine[]',
        'manualTransfer' => '\Frisbii\Model\ManualSettleTransfer',
        'billingAddress' => '\Frisbii\Model\InvoiceBillingAddress',
        'shippingAddress' => '\Frisbii\Model\InvoiceShippingAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'handle' => null,
        'instant' => null,
        'due' => null,
        'settle' => null,
        'metadata' => null,
        'planManual' => null,
        'collectAdditionalCosts' => null,
        'collectCredit' => null,
        'applyDiscounts' => null,
        'orderLines' => null,
        'manualTransfer' => null,
        'billingAddress' => null,
        'shippingAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'handle' => false,
        'instant' => false,
        'due' => false,
        'settle' => false,
        'metadata' => false,
        'planManual' => false,
        'collectAdditionalCosts' => false,
        'collectCredit' => false,
        'applyDiscounts' => false,
        'orderLines' => false,
        'manualTransfer' => false,
        'billingAddress' => false,
        'shippingAddress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'handle' => 'handle',
        'instant' => 'instant',
        'due' => 'due',
        'settle' => 'settle',
        'metadata' => 'metadata',
        'planManual' => 'plan_manual',
        'collectAdditionalCosts' => 'collect_additional_costs',
        'collectCredit' => 'collect_credit',
        'applyDiscounts' => 'apply_discounts',
        'orderLines' => 'order_lines',
        'manualTransfer' => 'manual_transfer',
        'billingAddress' => 'billing_address',
        'shippingAddress' => 'shipping_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'handle' => 'setHandle',
        'instant' => 'setInstant',
        'due' => 'setDue',
        'settle' => 'setSettle',
        'metadata' => 'setMetadata',
        'planManual' => 'setPlanManual',
        'collectAdditionalCosts' => 'setCollectAdditionalCosts',
        'collectCredit' => 'setCollectCredit',
        'applyDiscounts' => 'setApplyDiscounts',
        'orderLines' => 'setOrderLines',
        'manualTransfer' => 'setManualTransfer',
        'billingAddress' => 'setBillingAddress',
        'shippingAddress' => 'setShippingAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'handle' => 'getHandle',
        'instant' => 'getInstant',
        'due' => 'getDue',
        'settle' => 'getSettle',
        'metadata' => 'getMetadata',
        'planManual' => 'getPlanManual',
        'collectAdditionalCosts' => 'getCollectAdditionalCosts',
        'collectCredit' => 'getCollectCredit',
        'applyDiscounts' => 'getApplyDiscounts',
        'orderLines' => 'getOrderLines',
        'manualTransfer' => 'getManualTransfer',
        'billingAddress' => 'getBillingAddress',
        'shippingAddress' => 'getShippingAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('instant', $data ?? [], null);
        $this->setIfExists('due', $data ?? [], null);
        $this->setIfExists('settle', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('planManual', $data ?? [], null);
        $this->setIfExists('collectAdditionalCosts', $data ?? [], null);
        $this->setIfExists('collectCredit', $data ?? [], null);
        $this->setIfExists('applyDiscounts', $data ?? [], null);
        $this->setIfExists('orderLines', $data ?? [], null);
        $this->setIfExists('manualTransfer', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('shippingAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['orderLines']) && (count($this->container['orderLines']) > 1000)) {
            $invalidProperties[] = "invalid value for 'orderLines', number of items must be less than or equal to 1000.";
        }

        if (!is_null($this->container['orderLines']) && (count($this->container['orderLines']) < 0)) {
            $invalidProperties[] = "invalid value for 'orderLines', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the invoice. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation.
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling CreateSubscriptionInvoice., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets instant
     *
     * @return bool|null
     */
    public function getInstant()
    {
        return $this->container['instant'];
    }

    /**
     * Sets instant
     *
     * @param bool|null $instant Create and process invoice instantly and leave as either `settled` or `failed`. The default is to leave the invoice for automatic processing and potential dunning management as other subscription invoices (default false).
     *
     * @return self
     */
    public function setInstant($instant)
    {
        if (is_null($instant)) {
            throw new \InvalidArgumentException('non-nullable instant cannot be null');
        }
        $this->container['instant'] = $instant;

        return $this;
    }

    /**
     * Gets due
     *
     * @return string|null
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param string|null $due Optional due date and time on the form yyyy-MM-dd, yyyyMMdd, yyyy-MM-ddTHH:mm and yyyy-MM-ddTHH:mm:ss from which the invoice is eligible to be collected. Will not be used when `instant` is used.
     *
     * @return self
     */
    public function setDue($due)
    {
        if (is_null($due)) {
            throw new \InvalidArgumentException('non-nullable due cannot be null');
        }
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets settle
     *
     * @return \Frisbii\Model\Settle|null
     */
    public function getSettle()
    {
        return $this->container['settle'];
    }

    /**
     * Sets settle
     *
     * @param \Frisbii\Model\Settle|null $settle settle
     *
     * @return self
     */
    public function setSettle($settle)
    {
        if (is_null($settle)) {
            throw new \InvalidArgumentException('non-nullable settle cannot be null');
        }
        $this->container['settle'] = $settle;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata Custom metadata.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets planManual
     *
     * @return bool|null
     */
    public function getPlanManual()
    {
        return $this->container['planManual'];
    }

    /**
     * Sets planManual
     *
     * @param bool|null $planManual Create manually for plan by adding plan product and potential add-ons as order line (default false)
     *
     * @return self
     */
    public function setPlanManual($planManual)
    {
        if (is_null($planManual)) {
            throw new \InvalidArgumentException('non-nullable planManual cannot be null');
        }
        $this->container['planManual'] = $planManual;

        return $this;
    }

    /**
     * Gets collectAdditionalCosts
     *
     * @return bool|null
     */
    public function getCollectAdditionalCosts()
    {
        return $this->container['collectAdditionalCosts'];
    }

    /**
     * Sets collectAdditionalCosts
     *
     * @param bool|null $collectAdditionalCosts Collect pending additional costs and transfer to invoice (default true)
     *
     * @return self
     */
    public function setCollectAdditionalCosts($collectAdditionalCosts)
    {
        if (is_null($collectAdditionalCosts)) {
            throw new \InvalidArgumentException('non-nullable collectAdditionalCosts cannot be null');
        }
        $this->container['collectAdditionalCosts'] = $collectAdditionalCosts;

        return $this;
    }

    /**
     * Gets collectCredit
     *
     * @return bool|null
     */
    public function getCollectCredit()
    {
        return $this->container['collectCredit'];
    }

    /**
     * Sets collectCredit
     *
     * @param bool|null $collectCredit Collect pending credit and transfer to invoice (default true)
     *
     * @return self
     */
    public function setCollectCredit($collectCredit)
    {
        if (is_null($collectCredit)) {
            throw new \InvalidArgumentException('non-nullable collectCredit cannot be null');
        }
        $this->container['collectCredit'] = $collectCredit;

        return $this;
    }

    /**
     * Gets applyDiscounts
     *
     * @return bool|null
     */
    public function getApplyDiscounts()
    {
        return $this->container['applyDiscounts'];
    }

    /**
     * Sets applyDiscounts
     *
     * @param bool|null $applyDiscounts Apply potential discounts for the subscription to the invoice order lines (default true)
     *
     * @return self
     */
    public function setApplyDiscounts($applyDiscounts)
    {
        if (is_null($applyDiscounts)) {
            throw new \InvalidArgumentException('non-nullable applyDiscounts cannot be null');
        }
        $this->container['applyDiscounts'] = $applyDiscounts;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \Frisbii\Model\CreateOrderLine[]|null
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \Frisbii\Model\CreateOrderLine[]|null $orderLines Optional additional order lines for the invoice. A maximum of 100 order lines is allowed.
     *
     * @return self
     */
    public function setOrderLines($orderLines)
    {
        if (is_null($orderLines)) {
            throw new \InvalidArgumentException('non-nullable orderLines cannot be null');
        }

        if ((count($orderLines) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $orderLines when calling CreateSubscriptionInvoice., number of items must be less than or equal to 1000.');
        }
        if ((count($orderLines) < 0)) {
            throw new \InvalidArgumentException('invalid length for $orderLines when calling CreateSubscriptionInvoice., number of items must be greater than or equal to 0.');
        }
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets manualTransfer
     *
     * @return \Frisbii\Model\ManualSettleTransfer|null
     */
    public function getManualTransfer()
    {
        return $this->container['manualTransfer'];
    }

    /**
     * Sets manualTransfer
     *
     * @param \Frisbii\Model\ManualSettleTransfer|null $manualTransfer manualTransfer
     *
     * @return self
     */
    public function setManualTransfer($manualTransfer)
    {
        if (is_null($manualTransfer)) {
            throw new \InvalidArgumentException('non-nullable manualTransfer cannot be null');
        }
        $this->container['manualTransfer'] = $manualTransfer;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \Frisbii\Model\InvoiceBillingAddress|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \Frisbii\Model\InvoiceBillingAddress|null $billingAddress billingAddress
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        if (is_null($billingAddress)) {
            throw new \InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \Frisbii\Model\InvoiceShippingAddress|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \Frisbii\Model\InvoiceShippingAddress|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        if (is_null($shippingAddress)) {
            throw new \InvalidArgumentException('non-nullable shippingAddress cannot be null');
        }
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


