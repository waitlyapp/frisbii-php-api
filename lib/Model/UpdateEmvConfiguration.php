<?php
/**
 * UpdateEmvConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * UpdateEmvConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateEmvConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateEmvConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'emvTokenizationStatus' => 'string',
        'tokenRequestorId' => 'string',
        'cardScheme' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'emvTokenizationStatus' => null,
        'tokenRequestorId' => null,
        'cardScheme' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'emvTokenizationStatus' => false,
        'tokenRequestorId' => false,
        'cardScheme' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emvTokenizationStatus' => 'emv_tokenization_status',
        'tokenRequestorId' => 'token_requestor_id',
        'cardScheme' => 'card_scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emvTokenizationStatus' => 'setEmvTokenizationStatus',
        'tokenRequestorId' => 'setTokenRequestorId',
        'cardScheme' => 'setCardScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emvTokenizationStatus' => 'getEmvTokenizationStatus',
        'tokenRequestorId' => 'getTokenRequestorId',
        'cardScheme' => 'getCardScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMV_TOKENIZATION_STATUS_ENABLED = 'enabled';
    public const EMV_TOKENIZATION_STATUS_DISABLED = 'disabled';
    public const EMV_TOKENIZATION_STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const CARD_SCHEME_VISA = 'visa';
    public const CARD_SCHEME_MC = 'mc';
    public const CARD_SCHEME_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmvTokenizationStatusAllowableValues()
    {
        return [
            self::EMV_TOKENIZATION_STATUS_ENABLED,
            self::EMV_TOKENIZATION_STATUS_DISABLED,
            self::EMV_TOKENIZATION_STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSchemeAllowableValues()
    {
        return [
            self::CARD_SCHEME_VISA,
            self::CARD_SCHEME_MC,
            self::CARD_SCHEME_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('emvTokenizationStatus', $data ?? [], null);
        $this->setIfExists('tokenRequestorId', $data ?? [], null);
        $this->setIfExists('cardScheme', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['emvTokenizationStatus'] === null) {
            $invalidProperties[] = "'emvTokenizationStatus' can't be null";
        }
        $allowedValues = $this->getEmvTokenizationStatusAllowableValues();
        if (!is_null($this->container['emvTokenizationStatus']) && !in_array($this->container['emvTokenizationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'emvTokenizationStatus', must be one of '%s'",
                $this->container['emvTokenizationStatus'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tokenRequestorId'] === null) {
            $invalidProperties[] = "'tokenRequestorId' can't be null";
        }
        if ((mb_strlen($this->container['tokenRequestorId']) < 1)) {
            $invalidProperties[] = "invalid value for 'tokenRequestorId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cardScheme'] === null) {
            $invalidProperties[] = "'cardScheme' can't be null";
        }
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!is_null($this->container['cardScheme']) && !in_array($this->container['cardScheme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cardScheme', must be one of '%s'",
                $this->container['cardScheme'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets emvTokenizationStatus
     *
     * @return string
     */
    public function getEmvTokenizationStatus()
    {
        return $this->container['emvTokenizationStatus'];
    }

    /**
     * Sets emvTokenizationStatus
     *
     * @param string $emvTokenizationStatus EMV Tokenization Status
     *
     * @return self
     */
    public function setEmvTokenizationStatus($emvTokenizationStatus)
    {
        if (is_null($emvTokenizationStatus)) {
            throw new \InvalidArgumentException('non-nullable emvTokenizationStatus cannot be null');
        }
        $allowedValues = $this->getEmvTokenizationStatusAllowableValues();
        if (!in_array($emvTokenizationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'emvTokenizationStatus', must be one of '%s'",
                    $emvTokenizationStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['emvTokenizationStatus'] = $emvTokenizationStatus;

        return $this;
    }

    /**
     * Gets tokenRequestorId
     *
     * @return string
     */
    public function getTokenRequestorId()
    {
        return $this->container['tokenRequestorId'];
    }

    /**
     * Sets tokenRequestorId
     *
     * @param string $tokenRequestorId Token Requestor ID
     *
     * @return self
     */
    public function setTokenRequestorId($tokenRequestorId)
    {
        if (is_null($tokenRequestorId)) {
            throw new \InvalidArgumentException('non-nullable tokenRequestorId cannot be null');
        }

        if ((mb_strlen($tokenRequestorId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tokenRequestorId when calling UpdateEmvConfiguration., must be bigger than or equal to 1.');
        }

        $this->container['tokenRequestorId'] = $tokenRequestorId;

        return $this;
    }

    /**
     * Gets cardScheme
     *
     * @return string
     */
    public function getCardScheme()
    {
        return $this->container['cardScheme'];
    }

    /**
     * Sets cardScheme
     *
     * @param string $cardScheme Card scheme
     *
     * @return self
     */
    public function setCardScheme($cardScheme)
    {
        if (is_null($cardScheme)) {
            throw new \InvalidArgumentException('non-nullable cardScheme cannot be null');
        }
        $allowedValues = $this->getCardSchemeAllowableValues();
        if (!in_array($cardScheme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cardScheme', must be one of '%s'",
                    $cardScheme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardScheme'] = $cardScheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


