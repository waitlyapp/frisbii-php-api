<?php
/**
 * ChargeSource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * ChargeSource Class Doc Comment
 *
 * @category Class
 * @description Object describing the source for the charge. E.g. credit card.
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChargeSource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargeSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'card' => 'string',
        'mps' => 'string',
        'iban' => 'string',
        'fingerprint' => 'string',
        'provider' => 'string',
        'frictionless' => 'bool',
        'vippsRecurring' => 'string',
        'sepaMandate' => 'string',
        'sepaEbicsMandate' => 'string',
        'twintMandate' => 'string',
        'paypalMandate' => 'string',
        'offlineAgreementHandle' => 'string',
        'offlinePaymentInstructions' => 'string',
        'authTransaction' => 'string',
        'cardType' => 'string',
        'transactionCardType' => 'string',
        'expDate' => 'string',
        'maskedCard' => 'string',
        'cardCountry' => 'string',
        'strongAuthenticationStatus' => 'string',
        'threeDSecureStatus' => 'string',
        'riskRule' => 'string',
        'acquirerCode' => 'string',
        'acquirerMessage' => 'string',
        'acquirerReference' => 'string',
        'textOnStatement' => 'string',
        'surchargeFee' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'card' => null,
        'mps' => null,
        'iban' => null,
        'fingerprint' => null,
        'provider' => null,
        'frictionless' => null,
        'vippsRecurring' => null,
        'sepaMandate' => null,
        'sepaEbicsMandate' => null,
        'twintMandate' => null,
        'paypalMandate' => null,
        'offlineAgreementHandle' => null,
        'offlinePaymentInstructions' => null,
        'authTransaction' => null,
        'cardType' => null,
        'transactionCardType' => null,
        'expDate' => null,
        'maskedCard' => null,
        'cardCountry' => null,
        'strongAuthenticationStatus' => null,
        'threeDSecureStatus' => null,
        'riskRule' => null,
        'acquirerCode' => null,
        'acquirerMessage' => null,
        'acquirerReference' => null,
        'textOnStatement' => null,
        'surchargeFee' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'card' => false,
        'mps' => false,
        'iban' => false,
        'fingerprint' => false,
        'provider' => false,
        'frictionless' => false,
        'vippsRecurring' => false,
        'sepaMandate' => false,
        'sepaEbicsMandate' => false,
        'twintMandate' => false,
        'paypalMandate' => false,
        'offlineAgreementHandle' => false,
        'offlinePaymentInstructions' => false,
        'authTransaction' => false,
        'cardType' => false,
        'transactionCardType' => false,
        'expDate' => false,
        'maskedCard' => false,
        'cardCountry' => false,
        'strongAuthenticationStatus' => false,
        'threeDSecureStatus' => false,
        'riskRule' => false,
        'acquirerCode' => false,
        'acquirerMessage' => false,
        'acquirerReference' => false,
        'textOnStatement' => false,
        'surchargeFee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'card' => 'card',
        'mps' => 'mps',
        'iban' => 'iban',
        'fingerprint' => 'fingerprint',
        'provider' => 'provider',
        'frictionless' => 'frictionless',
        'vippsRecurring' => 'vipps_recurring',
        'sepaMandate' => 'sepa_mandate',
        'sepaEbicsMandate' => 'sepa_ebics_mandate',
        'twintMandate' => 'twint_mandate',
        'paypalMandate' => 'paypal_mandate',
        'offlineAgreementHandle' => 'offline_agreement_handle',
        'offlinePaymentInstructions' => 'offline_payment_instructions',
        'authTransaction' => 'auth_transaction',
        'cardType' => 'card_type',
        'transactionCardType' => 'transaction_card_type',
        'expDate' => 'exp_date',
        'maskedCard' => 'masked_card',
        'cardCountry' => 'card_country',
        'strongAuthenticationStatus' => 'strong_authentication_status',
        'threeDSecureStatus' => 'three_d_secure_status',
        'riskRule' => 'risk_rule',
        'acquirerCode' => 'acquirer_code',
        'acquirerMessage' => 'acquirer_message',
        'acquirerReference' => 'acquirer_reference',
        'textOnStatement' => 'text_on_statement',
        'surchargeFee' => 'surcharge_fee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'card' => 'setCard',
        'mps' => 'setMps',
        'iban' => 'setIban',
        'fingerprint' => 'setFingerprint',
        'provider' => 'setProvider',
        'frictionless' => 'setFrictionless',
        'vippsRecurring' => 'setVippsRecurring',
        'sepaMandate' => 'setSepaMandate',
        'sepaEbicsMandate' => 'setSepaEbicsMandate',
        'twintMandate' => 'setTwintMandate',
        'paypalMandate' => 'setPaypalMandate',
        'offlineAgreementHandle' => 'setOfflineAgreementHandle',
        'offlinePaymentInstructions' => 'setOfflinePaymentInstructions',
        'authTransaction' => 'setAuthTransaction',
        'cardType' => 'setCardType',
        'transactionCardType' => 'setTransactionCardType',
        'expDate' => 'setExpDate',
        'maskedCard' => 'setMaskedCard',
        'cardCountry' => 'setCardCountry',
        'strongAuthenticationStatus' => 'setStrongAuthenticationStatus',
        'threeDSecureStatus' => 'setThreeDSecureStatus',
        'riskRule' => 'setRiskRule',
        'acquirerCode' => 'setAcquirerCode',
        'acquirerMessage' => 'setAcquirerMessage',
        'acquirerReference' => 'setAcquirerReference',
        'textOnStatement' => 'setTextOnStatement',
        'surchargeFee' => 'setSurchargeFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'card' => 'getCard',
        'mps' => 'getMps',
        'iban' => 'getIban',
        'fingerprint' => 'getFingerprint',
        'provider' => 'getProvider',
        'frictionless' => 'getFrictionless',
        'vippsRecurring' => 'getVippsRecurring',
        'sepaMandate' => 'getSepaMandate',
        'sepaEbicsMandate' => 'getSepaEbicsMandate',
        'twintMandate' => 'getTwintMandate',
        'paypalMandate' => 'getPaypalMandate',
        'offlineAgreementHandle' => 'getOfflineAgreementHandle',
        'offlinePaymentInstructions' => 'getOfflinePaymentInstructions',
        'authTransaction' => 'getAuthTransaction',
        'cardType' => 'getCardType',
        'transactionCardType' => 'getTransactionCardType',
        'expDate' => 'getExpDate',
        'maskedCard' => 'getMaskedCard',
        'cardCountry' => 'getCardCountry',
        'strongAuthenticationStatus' => 'getStrongAuthenticationStatus',
        'threeDSecureStatus' => 'getThreeDSecureStatus',
        'riskRule' => 'getRiskRule',
        'acquirerCode' => 'getAcquirerCode',
        'acquirerMessage' => 'getAcquirerMessage',
        'acquirerReference' => 'getAcquirerReference',
        'textOnStatement' => 'getTextOnStatement',
        'surchargeFee' => 'getSurchargeFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CARD_TOKEN = 'card_token';
    public const TYPE_CARD = 'card';
    public const TYPE_MPO = 'mpo';
    public const TYPE_VIPPS = 'vipps';
    public const TYPE_VIPPS_EPAYMENT = 'vipps_epayment';
    public const TYPE_VIPPS_RECURRING = 'vipps_recurring';
    public const TYPE_SWISH = 'swish';
    public const TYPE_VIABILL = 'viabill';
    public const TYPE_ANYDAY = 'anyday';
    public const TYPE_MANUAL = 'manual';
    public const TYPE_APPLEPAY = 'applepay';
    public const TYPE_GOOGLEPAY = 'googlepay';
    public const TYPE_PAYPAL = 'paypal';
    public const TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    public const TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    public const TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    public const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    public const TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    public const TYPE_RESURS = 'resurs';
    public const TYPE_IDEAL = 'ideal';
    public const TYPE_P24 = 'p24';
    public const TYPE_BANCOMATPAY = 'bancomatpay';
    public const TYPE_BLIK = 'blik';
    public const TYPE_GIROPAY = 'giropay';
    public const TYPE_SEPA = 'sepa';
    public const TYPE_VERKKOPANKKI = 'verkkopankki';
    public const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    public const TYPE_EMV_TOKEN = 'emv_token';
    public const TYPE_BCMC = 'bcmc';
    public const TYPE_PP_BLIK_OC = 'pp_blik_oc';
    public const TYPE_TRUSTLY = 'trustly';
    public const TYPE_EPS = 'eps';
    public const TYPE_ESTONIA_BANKS = 'estonia_banks';
    public const TYPE_LATVIA_BANKS = 'latvia_banks';
    public const TYPE_LITHUANIA_BANKS = 'lithuania_banks';
    public const TYPE_MB_WAY = 'mb_way';
    public const TYPE_MULTIBANCO = 'multibanco';
    public const TYPE_MYBANK = 'mybank';
    public const TYPE_PAYCONIQ = 'payconiq';
    public const TYPE_PAYSAFECARD = 'paysafecard';
    public const TYPE_PAYSERA = 'paysera';
    public const TYPE_POSTFINANCE = 'postfinance';
    public const TYPE_SATISPAY = 'satispay';
    public const TYPE_TWINT = 'twint';
    public const TYPE_WECHATPAY = 'wechatpay';
    public const TYPE_SANTANDER = 'santander';
    public const TYPE_OFFLINE_CASH = 'offline_cash';
    public const TYPE_OFFLINE_BANK_TRANSFER = 'offline_bank_transfer';
    public const TYPE_OFFLINE_OTHER = 'offline_other';
    public const TYPE_SEPA_EBICS = 'sepa_ebics';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const PROVIDER_REEPAY = 'reepay';
    public const PROVIDER_AIBMS = 'aibms';
    public const PROVIDER_BAMBORA = 'bambora';
    public const PROVIDER_BARCLAYS = 'barclays';
    public const PROVIDER_CLEARHAUS = 'clearhaus';
    public const PROVIDER_CMCIC = 'cmcic';
    public const PROVIDER_CREDIBANCO = 'credibanco';
    public const PROVIDER_CS = 'cs';
    public const PROVIDER_ELAVON = 'elavon';
    public const PROVIDER_EVRY = 'evry';
    public const PROVIDER_FIRST_DATA = 'first_data';
    public const PROVIDER_HANDELSBANKEN = 'handelsbanken';
    public const PROVIDER_HSBC = 'hsbc';
    public const PROVIDER_NETS = 'nets';
    public const PROVIDER_SHIFT4 = 'shift4';
    public const PROVIDER_SPREEDLY = 'spreedly';
    public const PROVIDER_SWEDBANK = 'swedbank';
    public const PROVIDER_THAILAND_KBANK = 'thailand_kbank';
    public const PROVIDER_VALITOR = 'valitor';
    public const PROVIDER_WORLDLINE = 'worldline';
    public const PROVIDER_WORLDPAY = 'worldpay';
    public const PROVIDER_TEST = 'test';
    public const PROVIDER_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const CARD_TYPE_UNKNOWN = 'unknown';
    public const CARD_TYPE_VISA = 'visa';
    public const CARD_TYPE_MC = 'mc';
    public const CARD_TYPE_DANKORT = 'dankort';
    public const CARD_TYPE_VISA_DK = 'visa_dk';
    public const CARD_TYPE_FFK = 'ffk';
    public const CARD_TYPE_VISA_ELEC = 'visa_elec';
    public const CARD_TYPE_MAESTRO = 'maestro';
    public const CARD_TYPE_LASER = 'laser';
    public const CARD_TYPE_AMEX = 'amex';
    public const CARD_TYPE_DINERS = 'diners';
    public const CARD_TYPE_DISCOVER = 'discover';
    public const CARD_TYPE_JCB = 'jcb';
    public const CARD_TYPE_CHINA_UNION_PAY = 'china_union_pay';
    public const CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TRANSACTION_CARD_TYPE_UNKNOWN = 'unknown';
    public const TRANSACTION_CARD_TYPE_VISA = 'visa';
    public const TRANSACTION_CARD_TYPE_MC = 'mc';
    public const TRANSACTION_CARD_TYPE_DANKORT = 'dankort';
    public const TRANSACTION_CARD_TYPE_VISA_DK = 'visa_dk';
    public const TRANSACTION_CARD_TYPE_FFK = 'ffk';
    public const TRANSACTION_CARD_TYPE_VISA_ELEC = 'visa_elec';
    public const TRANSACTION_CARD_TYPE_MAESTRO = 'maestro';
    public const TRANSACTION_CARD_TYPE_LASER = 'laser';
    public const TRANSACTION_CARD_TYPE_AMEX = 'amex';
    public const TRANSACTION_CARD_TYPE_DINERS = 'diners';
    public const TRANSACTION_CARD_TYPE_DISCOVER = 'discover';
    public const TRANSACTION_CARD_TYPE_JCB = 'jcb';
    public const TRANSACTION_CARD_TYPE_CHINA_UNION_PAY = 'china_union_pay';
    public const TRANSACTION_CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const STRONG_AUTHENTICATION_STATUS_THREED_SECURE = 'threed_secure';
    public const STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED = 'threed_secure_not_enrolled';
    public const STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS = 'secured_by_nets';
    public const STRONG_AUTHENTICATION_STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_TOKEN,
            self::TYPE_CARD,
            self::TYPE_MPO,
            self::TYPE_VIPPS,
            self::TYPE_VIPPS_EPAYMENT,
            self::TYPE_VIPPS_RECURRING,
            self::TYPE_SWISH,
            self::TYPE_VIABILL,
            self::TYPE_ANYDAY,
            self::TYPE_MANUAL,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_PAYPAL,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_RESURS,
            self::TYPE_IDEAL,
            self::TYPE_P24,
            self::TYPE_BANCOMATPAY,
            self::TYPE_BLIK,
            self::TYPE_GIROPAY,
            self::TYPE_SEPA,
            self::TYPE_VERKKOPANKKI,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_EMV_TOKEN,
            self::TYPE_BCMC,
            self::TYPE_PP_BLIK_OC,
            self::TYPE_TRUSTLY,
            self::TYPE_EPS,
            self::TYPE_ESTONIA_BANKS,
            self::TYPE_LATVIA_BANKS,
            self::TYPE_LITHUANIA_BANKS,
            self::TYPE_MB_WAY,
            self::TYPE_MULTIBANCO,
            self::TYPE_MYBANK,
            self::TYPE_PAYCONIQ,
            self::TYPE_PAYSAFECARD,
            self::TYPE_PAYSERA,
            self::TYPE_POSTFINANCE,
            self::TYPE_SATISPAY,
            self::TYPE_TWINT,
            self::TYPE_WECHATPAY,
            self::TYPE_SANTANDER,
            self::TYPE_OFFLINE_CASH,
            self::TYPE_OFFLINE_BANK_TRANSFER,
            self::TYPE_OFFLINE_OTHER,
            self::TYPE_SEPA_EBICS,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_REEPAY,
            self::PROVIDER_AIBMS,
            self::PROVIDER_BAMBORA,
            self::PROVIDER_BARCLAYS,
            self::PROVIDER_CLEARHAUS,
            self::PROVIDER_CMCIC,
            self::PROVIDER_CREDIBANCO,
            self::PROVIDER_CS,
            self::PROVIDER_ELAVON,
            self::PROVIDER_EVRY,
            self::PROVIDER_FIRST_DATA,
            self::PROVIDER_HANDELSBANKEN,
            self::PROVIDER_HSBC,
            self::PROVIDER_NETS,
            self::PROVIDER_SHIFT4,
            self::PROVIDER_SPREEDLY,
            self::PROVIDER_SWEDBANK,
            self::PROVIDER_THAILAND_KBANK,
            self::PROVIDER_VALITOR,
            self::PROVIDER_WORLDLINE,
            self::PROVIDER_WORLDPAY,
            self::PROVIDER_TEST,
            self::PROVIDER_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
            self::CARD_TYPE_CHINA_UNION_PAY,
            self::CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCardTypeAllowableValues()
    {
        return [
            self::TRANSACTION_CARD_TYPE_UNKNOWN,
            self::TRANSACTION_CARD_TYPE_VISA,
            self::TRANSACTION_CARD_TYPE_MC,
            self::TRANSACTION_CARD_TYPE_DANKORT,
            self::TRANSACTION_CARD_TYPE_VISA_DK,
            self::TRANSACTION_CARD_TYPE_FFK,
            self::TRANSACTION_CARD_TYPE_VISA_ELEC,
            self::TRANSACTION_CARD_TYPE_MAESTRO,
            self::TRANSACTION_CARD_TYPE_LASER,
            self::TRANSACTION_CARD_TYPE_AMEX,
            self::TRANSACTION_CARD_TYPE_DINERS,
            self::TRANSACTION_CARD_TYPE_DISCOVER,
            self::TRANSACTION_CARD_TYPE_JCB,
            self::TRANSACTION_CARD_TYPE_CHINA_UNION_PAY,
            self::TRANSACTION_CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrongAuthenticationStatusAllowableValues()
    {
        return [
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE,
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED,
            self::STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS,
            self::STRONG_AUTHENTICATION_STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('mps', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('fingerprint', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('frictionless', $data ?? [], null);
        $this->setIfExists('vippsRecurring', $data ?? [], null);
        $this->setIfExists('sepaMandate', $data ?? [], null);
        $this->setIfExists('sepaEbicsMandate', $data ?? [], null);
        $this->setIfExists('twintMandate', $data ?? [], null);
        $this->setIfExists('paypalMandate', $data ?? [], null);
        $this->setIfExists('offlineAgreementHandle', $data ?? [], null);
        $this->setIfExists('offlinePaymentInstructions', $data ?? [], null);
        $this->setIfExists('authTransaction', $data ?? [], null);
        $this->setIfExists('cardType', $data ?? [], null);
        $this->setIfExists('transactionCardType', $data ?? [], null);
        $this->setIfExists('expDate', $data ?? [], null);
        $this->setIfExists('maskedCard', $data ?? [], null);
        $this->setIfExists('cardCountry', $data ?? [], null);
        $this->setIfExists('strongAuthenticationStatus', $data ?? [], null);
        $this->setIfExists('threeDSecureStatus', $data ?? [], null);
        $this->setIfExists('riskRule', $data ?? [], null);
        $this->setIfExists('acquirerCode', $data ?? [], null);
        $this->setIfExists('acquirerMessage', $data ?? [], null);
        $this->setIfExists('acquirerReference', $data ?? [], null);
        $this->setIfExists('textOnStatement', $data ?? [], null);
        $this->setIfExists('surchargeFee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider', must be one of '%s'",
                $this->container['provider'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['cardType']) && !in_array($this->container['cardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cardType', must be one of '%s'",
                $this->container['cardType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($this->container['transactionCardType']) && !in_array($this->container['transactionCardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transactionCardType', must be one of '%s'",
                $this->container['transactionCardType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($this->container['strongAuthenticationStatus']) && !in_array($this->container['strongAuthenticationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strongAuthenticationStatus', must be one of '%s'",
                $this->container['strongAuthenticationStatus'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of charge source: `card` - existing customer card, `card_token` - card token, `mpo` - MobilePay Online, `vipps`, `vipps_epayment`, `vipps_recurring`, `swish`, `viabill`, `anyday`, `manual`, `applepay`, `googlepay`, `paypal`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`, `klarna_direct_bank_transfer`, `klarna_direct_debit`, `resurs`, `mobilepay_subscriptions`, `emv_token`, `bancomatpay`, `bcmc`, `blik`, `pp_blik_oc`, `giropay`, `ideal`, `p24`, `sepa`, `trustly`, `eps`, `estonia_banks`, `latvia_banks`, `lithuania_banks`, `mb_way`, `multibanco`, `mybank`, `payconiq`, `paysafecard`, `paysera`, `postfinance`, `satispay`, `twint`, `wechatpay`, `santander`,  or `verkkopankki`, `offline_cash`, `offline_bank_transfer`, `offline_other`, `sepa_ebics`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets card
     *
     * @return string|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param string|null $card Reference to customer card if source type `card`
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets mps
     *
     * @return string|null
     */
    public function getMps()
    {
        return $this->container['mps'];
    }

    /**
     * Sets mps
     *
     * @param string|null $mps Reference to MobilePay Subscriptions payment method if source type `mobilepay_subscriptions`
     *
     * @return self
     */
    public function setMps($mps)
    {
        if (is_null($mps)) {
            throw new \InvalidArgumentException('non-nullable mps cannot be null');
        }
        $this->container['mps'] = $mps;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban IBAN number if source type `sepa` and `sepa_ebics`
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string|null
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string|null $fingerprint Uniquely identifies this particular card number if credit card source
     *
     * @return self
     */
    public function setFingerprint($fingerprint)
    {
        if (is_null($fingerprint)) {
            throw new \InvalidArgumentException('non-nullable fingerprint cannot be null');
        }
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Card acquirer or card payment gateway used if card source: `reepay`, `aibms`, `bambora`, `barclays`, `clearhaus`, `cmcic`, `credibanco`, `cs`,  `elavon`, `evry`, `first_data`, `handelsbanken`, `hsbc`, `nets`, `shift4`, `spreedly`, `swedbank`, `thailand_kbank`, `valitor`, `worldline`, `worldpay`, `test`
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider', must be one of '%s'",
                    $provider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets frictionless
     *
     * @return bool|null
     */
    public function getFrictionless()
    {
        return $this->container['frictionless'];
    }

    /**
     * Sets frictionless
     *
     * @param bool|null $frictionless If the card transaction was exempted from a 3DS challenge
     *
     * @return self
     */
    public function setFrictionless($frictionless)
    {
        if (is_null($frictionless)) {
            throw new \InvalidArgumentException('non-nullable frictionless cannot be null');
        }
        $this->container['frictionless'] = $frictionless;

        return $this;
    }

    /**
     * Gets vippsRecurring
     *
     * @return string|null
     */
    public function getVippsRecurring()
    {
        return $this->container['vippsRecurring'];
    }

    /**
     * Sets vippsRecurring
     *
     * @param string|null $vippsRecurring Reference to Vipps Recurring Subscriptions payment method if source type `vipps_recurring`
     *
     * @return self
     */
    public function setVippsRecurring($vippsRecurring)
    {
        if (is_null($vippsRecurring)) {
            throw new \InvalidArgumentException('non-nullable vippsRecurring cannot be null');
        }
        $this->container['vippsRecurring'] = $vippsRecurring;

        return $this;
    }

    /**
     * Gets sepaMandate
     *
     * @return string|null
     */
    public function getSepaMandate()
    {
        return $this->container['sepaMandate'];
    }

    /**
     * Sets sepaMandate
     *
     * @param string|null $sepaMandate Reference to SEPA Mandate payment method if source type `sepa`
     *
     * @return self
     */
    public function setSepaMandate($sepaMandate)
    {
        if (is_null($sepaMandate)) {
            throw new \InvalidArgumentException('non-nullable sepaMandate cannot be null');
        }
        $this->container['sepaMandate'] = $sepaMandate;

        return $this;
    }

    /**
     * Gets sepaEbicsMandate
     *
     * @return string|null
     */
    public function getSepaEbicsMandate()
    {
        return $this->container['sepaEbicsMandate'];
    }

    /**
     * Sets sepaEbicsMandate
     *
     * @param string|null $sepaEbicsMandate Reference to SEPA EBICS Mandate payment method if source type `sepa_ebics`
     *
     * @return self
     */
    public function setSepaEbicsMandate($sepaEbicsMandate)
    {
        if (is_null($sepaEbicsMandate)) {
            throw new \InvalidArgumentException('non-nullable sepaEbicsMandate cannot be null');
        }
        $this->container['sepaEbicsMandate'] = $sepaEbicsMandate;

        return $this;
    }

    /**
     * Gets twintMandate
     *
     * @return string|null
     */
    public function getTwintMandate()
    {
        return $this->container['twintMandate'];
    }

    /**
     * Sets twintMandate
     *
     * @param string|null $twintMandate Reference to Twint Mandate payment method if source type `twint`
     *
     * @return self
     */
    public function setTwintMandate($twintMandate)
    {
        if (is_null($twintMandate)) {
            throw new \InvalidArgumentException('non-nullable twintMandate cannot be null');
        }
        $this->container['twintMandate'] = $twintMandate;

        return $this;
    }

    /**
     * Gets paypalMandate
     *
     * @return string|null
     */
    public function getPaypalMandate()
    {
        return $this->container['paypalMandate'];
    }

    /**
     * Sets paypalMandate
     *
     * @param string|null $paypalMandate Reference to PayPal Mandate payment method if source type `paypal`
     *
     * @return self
     */
    public function setPaypalMandate($paypalMandate)
    {
        if (is_null($paypalMandate)) {
            throw new \InvalidArgumentException('non-nullable paypalMandate cannot be null');
        }
        $this->container['paypalMandate'] = $paypalMandate;

        return $this;
    }

    /**
     * Gets offlineAgreementHandle
     *
     * @return string|null
     */
    public function getOfflineAgreementHandle()
    {
        return $this->container['offlineAgreementHandle'];
    }

    /**
     * Sets offlineAgreementHandle
     *
     * @param string|null $offlineAgreementHandle Agreement handle if source type `offline_cash`, `offline_bank_transfer`, `offline_other`
     *
     * @return self
     */
    public function setOfflineAgreementHandle($offlineAgreementHandle)
    {
        if (is_null($offlineAgreementHandle)) {
            throw new \InvalidArgumentException('non-nullable offlineAgreementHandle cannot be null');
        }
        $this->container['offlineAgreementHandle'] = $offlineAgreementHandle;

        return $this;
    }

    /**
     * Gets offlinePaymentInstructions
     *
     * @return string|null
     */
    public function getOfflinePaymentInstructions()
    {
        return $this->container['offlinePaymentInstructions'];
    }

    /**
     * Sets offlinePaymentInstructions
     *
     * @param string|null $offlinePaymentInstructions Offline payment instructions if source type `offline_cash`, `offline_bank_transfer`, `offline_other`
     *
     * @return self
     */
    public function setOfflinePaymentInstructions($offlinePaymentInstructions)
    {
        if (is_null($offlinePaymentInstructions)) {
            throw new \InvalidArgumentException('non-nullable offlinePaymentInstructions cannot be null');
        }
        $this->container['offlinePaymentInstructions'] = $offlinePaymentInstructions;

        return $this;
    }

    /**
     * Gets authTransaction
     *
     * @return string|null
     */
    public function getAuthTransaction()
    {
        return $this->container['authTransaction'];
    }

    /**
     * Sets authTransaction
     *
     * @param string|null $authTransaction Reference to authorization transaction if charge is settled after authorization
     *
     * @return self
     */
    public function setAuthTransaction($authTransaction)
    {
        if (is_null($authTransaction)) {
            throw new \InvalidArgumentException('non-nullable authTransaction cannot be null');
        }
        $this->container['authTransaction'] = $authTransaction;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string|null $cardType Card type if credit card source: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover`, `jcb` or `china_union_pay`
     *
     * @return self
     */
    public function setCardType($cardType)
    {
        if (is_null($cardType)) {
            throw new \InvalidArgumentException('non-nullable cardType cannot be null');
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($cardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cardType', must be one of '%s'",
                    $cardType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets transactionCardType
     *
     * @return string|null
     */
    public function getTransactionCardType()
    {
        return $this->container['transactionCardType'];
    }

    /**
     * Sets transactionCardType
     *
     * @param string|null $transactionCardType Transaction card type if credit card source. Will differ from `card_type` if co-branded card. Transaction card type is the card type used for the transaction. `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover`, `jcb` or `china_union_pay`
     *
     * @return self
     */
    public function setTransactionCardType($transactionCardType)
    {
        if (is_null($transactionCardType)) {
            throw new \InvalidArgumentException('non-nullable transactionCardType cannot be null');
        }
        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!in_array($transactionCardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transactionCardType', must be one of '%s'",
                    $transactionCardType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionCardType'] = $transactionCardType;

        return $this;
    }

    /**
     * Gets expDate
     *
     * @return string|null
     */
    public function getExpDate()
    {
        return $this->container['expDate'];
    }

    /**
     * Sets expDate
     *
     * @param string|null $expDate Card expire date on form MM-YY if credit card source
     *
     * @return self
     */
    public function setExpDate($expDate)
    {
        if (is_null($expDate)) {
            throw new \InvalidArgumentException('non-nullable expDate cannot be null');
        }
        $this->container['expDate'] = $expDate;

        return $this;
    }

    /**
     * Gets maskedCard
     *
     * @return string|null
     */
    public function getMaskedCard()
    {
        return $this->container['maskedCard'];
    }

    /**
     * Sets maskedCard
     *
     * @param string|null $maskedCard Masked card number if credit card source
     *
     * @return self
     */
    public function setMaskedCard($maskedCard)
    {
        if (is_null($maskedCard)) {
            throw new \InvalidArgumentException('non-nullable maskedCard cannot be null');
        }
        $this->container['maskedCard'] = $maskedCard;

        return $this;
    }

    /**
     * Gets cardCountry
     *
     * @return string|null
     */
    public function getCardCountry()
    {
        return $this->container['cardCountry'];
    }

    /**
     * Sets cardCountry
     *
     * @param string|null $cardCountry Card issuing country if credit card source, in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return self
     */
    public function setCardCountry($cardCountry)
    {
        if (is_null($cardCountry)) {
            throw new \InvalidArgumentException('non-nullable cardCountry cannot be null');
        }
        $this->container['cardCountry'] = $cardCountry;

        return $this;
    }

    /**
     * Gets strongAuthenticationStatus
     *
     * @return string|null
     */
    public function getStrongAuthenticationStatus()
    {
        return $this->container['strongAuthenticationStatus'];
    }

    /**
     * Sets strongAuthenticationStatus
     *
     * @param string|null $strongAuthenticationStatus Status for strong customer authentication: `threed_secure` - 3D Secure authenticated, `threed_secure_not_enrolled` - 3D Secure authentication not performed as card not enrolled, `secured_by_nets` - Secure by Nets authenticated
     *
     * @return self
     */
    public function setStrongAuthenticationStatus($strongAuthenticationStatus)
    {
        if (is_null($strongAuthenticationStatus)) {
            throw new \InvalidArgumentException('non-nullable strongAuthenticationStatus cannot be null');
        }
        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!in_array($strongAuthenticationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strongAuthenticationStatus', must be one of '%s'",
                    $strongAuthenticationStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strongAuthenticationStatus'] = $strongAuthenticationStatus;

        return $this;
    }

    /**
     * Gets threeDSecureStatus
     *
     * @return string|null
     */
    public function getThreeDSecureStatus()
    {
        return $this->container['threeDSecureStatus'];
    }

    /**
     * Sets threeDSecureStatus
     *
     * @param string|null $threeDSecureStatus If 3D Secure authenticated the 3D status will either be `Y` (fully authenticated) or `A` (attempted authenticated). An attempted authentication means that card issuer (e.g. bank) does not support 3D Secure so no full authentication has been performed. Attempted authentication normally means liability shift, but this can differ between acquirers.
     *
     * @return self
     */
    public function setThreeDSecureStatus($threeDSecureStatus)
    {
        if (is_null($threeDSecureStatus)) {
            throw new \InvalidArgumentException('non-nullable threeDSecureStatus cannot be null');
        }
        $this->container['threeDSecureStatus'] = $threeDSecureStatus;

        return $this;
    }

    /**
     * Gets riskRule
     *
     * @return string|null
     */
    public function getRiskRule()
    {
        return $this->container['riskRule'];
    }

    /**
     * Sets riskRule
     *
     * @param string|null $riskRule If this parameter is set the charge has either been flagged or declined by a Frisbii Risk Filter rule. For flag action rules the charge can be successful, but may require special attention. For block action rules the decline error will be `risk_filter_block`.
     *
     * @return self
     */
    public function setRiskRule($riskRule)
    {
        if (is_null($riskRule)) {
            throw new \InvalidArgumentException('non-nullable riskRule cannot be null');
        }
        $this->container['riskRule'] = $riskRule;

        return $this;
    }

    /**
     * Gets acquirerCode
     *
     * @return string|null
     */
    public function getAcquirerCode()
    {
        return $this->container['acquirerCode'];
    }

    /**
     * Sets acquirerCode
     *
     * @param string|null $acquirerCode Card acquirer error code in case of card error
     *
     * @return self
     */
    public function setAcquirerCode($acquirerCode)
    {
        if (is_null($acquirerCode)) {
            throw new \InvalidArgumentException('non-nullable acquirerCode cannot be null');
        }
        $this->container['acquirerCode'] = $acquirerCode;

        return $this;
    }

    /**
     * Gets acquirerMessage
     *
     * @return string|null
     */
    public function getAcquirerMessage()
    {
        return $this->container['acquirerMessage'];
    }

    /**
     * Sets acquirerMessage
     *
     * @param string|null $acquirerMessage Acquirer message in case of error
     *
     * @return self
     */
    public function setAcquirerMessage($acquirerMessage)
    {
        if (is_null($acquirerMessage)) {
            throw new \InvalidArgumentException('non-nullable acquirerMessage cannot be null');
        }
        $this->container['acquirerMessage'] = $acquirerMessage;

        return $this;
    }

    /**
     * Gets acquirerReference
     *
     * @return string|null
     */
    public function getAcquirerReference()
    {
        return $this->container['acquirerReference'];
    }

    /**
     * Sets acquirerReference
     *
     * @param string|null $acquirerReference Card acquirer reference to transaction in case of card source. E.g. Nets order id or Clearhaus reference.
     *
     * @return self
     */
    public function setAcquirerReference($acquirerReference)
    {
        if (is_null($acquirerReference)) {
            throw new \InvalidArgumentException('non-nullable acquirerReference cannot be null');
        }
        $this->container['acquirerReference'] = $acquirerReference;

        return $this;
    }

    /**
     * Gets textOnStatement
     *
     * @return string|null
     */
    public function getTextOnStatement()
    {
        return $this->container['textOnStatement'];
    }

    /**
     * Sets textOnStatement
     *
     * @param string|null $textOnStatement Resulting text on bank statement if known
     *
     * @return self
     */
    public function setTextOnStatement($textOnStatement)
    {
        if (is_null($textOnStatement)) {
            throw new \InvalidArgumentException('non-nullable textOnStatement cannot be null');
        }
        $this->container['textOnStatement'] = $textOnStatement;

        return $this;
    }

    /**
     * Gets surchargeFee
     *
     * @return int|null
     */
    public function getSurchargeFee()
    {
        return $this->container['surchargeFee'];
    }

    /**
     * Sets surchargeFee
     *
     * @param int|null $surchargeFee Potential card surcharge fee added to amount if surcharging enabled
     *
     * @return self
     */
    public function setSurchargeFee($surchargeFee)
    {
        if (is_null($surchargeFee)) {
            throw new \InvalidArgumentException('non-nullable surchargeFee cannot be null');
        }
        $this->container['surchargeFee'] = $surchargeFee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


