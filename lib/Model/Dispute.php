<?php
/**
 * Dispute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * OpenAPI spec version: 1
 * Contact: support@frisbii.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Dispute Class Doc Comment
 *
 * @category Class
 * @description List of disputes for current page
 * @package  Frisbii
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dispute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Dispute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'resolved' => '\DateTime',
        'state' => 'string',
        'outcome' => 'string',
        'amount' => 'int',
        'description' => 'string',
        'id' => 'string',
        'invoice' => 'string',
        'reason' => 'string',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'waiting_for' => 'string',
        'outcome_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'resolved' => 'date-time',
        'state' => null,
        'outcome' => null,
        'amount' => 'int32',
        'description' => null,
        'id' => null,
        'invoice' => null,
        'reason' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'waiting_for' => null,
        'outcome_amount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resolved' => 'resolved',
        'state' => 'state',
        'outcome' => 'outcome',
        'amount' => 'amount',
        'description' => 'description',
        'id' => 'id',
        'invoice' => 'invoice',
        'reason' => 'reason',
        'created' => 'created',
        'updated' => 'updated',
        'waiting_for' => 'waiting_for',
        'outcome_amount' => 'outcome_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resolved' => 'setResolved',
        'state' => 'setState',
        'outcome' => 'setOutcome',
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'reason' => 'setReason',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'waiting_for' => 'setWaitingFor',
        'outcome_amount' => 'setOutcomeAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resolved' => 'getResolved',
        'state' => 'getState',
        'outcome' => 'getOutcome',
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'reason' => 'getReason',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'waiting_for' => 'getWaitingFor',
        'outcome_amount' => 'getOutcomeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_OPEN = 'open';
    const STATE_WAITING_FOR_RESPONSE = 'waiting_for_response';
    const STATE_UNDER_REVIEW = 'under_review';
    const STATE_RESOLVED = 'resolved';
    const STATE_OTHER = 'other';
    const OUTCOME_CANCELLED_BY_CUSTOMER = 'cancelled_by_customer';
    const OUTCOME_MERCHANT_FAVOR = 'merchant_favor';
    const OUTCOME_CUSTOMER_FAVOR_REFUND = 'customer_favor_refund';
    const OUTCOME_CUSTOMER_FAVOR_CHARGEBACK = 'customer_favor_chargeback';
    const OUTCOME_PROVIDER_PAYOUT = 'provider_payout';
    const REASON_PRODUCT_NOT_RECEIVED = 'product_not_received';
    const REASON_PRODUCT_NOT_AS_DESCRIBED = 'product_not_as_described';
    const REASON_UNAUTHORISED = 'unauthorised';
    const REASON_CREDIT_NOT_PROCESSED = 'credit_not_processed';
    const REASON_DUPLICATE = 'duplicate';
    const REASON_INCORRECT_AMOUNT = 'incorrect_amount';
    const REASON_PAYMENT_BY_OTHER_MEANS = 'payment_by_other_means';
    const REASON_CANCELLED_RECURRING_BILLING = 'cancelled_recurring_billing';
    const REASON_INSUFFICIENT_FUNDS = 'insufficient_funds';
    const REASON_OTHER = 'other';
    const WAITING_FOR_CUSTOMER = 'customer';
    const WAITING_FOR_MERCHANT = 'merchant';
    const WAITING_FOR_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_OPEN,
            self::STATE_WAITING_FOR_RESPONSE,
            self::STATE_UNDER_REVIEW,
            self::STATE_RESOLVED,
            self::STATE_OTHER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutcomeAllowableValues()
    {
        return [
            self::OUTCOME_CANCELLED_BY_CUSTOMER,
            self::OUTCOME_MERCHANT_FAVOR,
            self::OUTCOME_CUSTOMER_FAVOR_REFUND,
            self::OUTCOME_CUSTOMER_FAVOR_CHARGEBACK,
            self::OUTCOME_PROVIDER_PAYOUT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_PRODUCT_NOT_RECEIVED,
            self::REASON_PRODUCT_NOT_AS_DESCRIBED,
            self::REASON_UNAUTHORISED,
            self::REASON_CREDIT_NOT_PROCESSED,
            self::REASON_DUPLICATE,
            self::REASON_INCORRECT_AMOUNT,
            self::REASON_PAYMENT_BY_OTHER_MEANS,
            self::REASON_CANCELLED_RECURRING_BILLING,
            self::REASON_INSUFFICIENT_FUNDS,
            self::REASON_OTHER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWaitingForAllowableValues()
    {
        return [
            self::WAITING_FOR_CUSTOMER,
            self::WAITING_FOR_MERCHANT,
            self::WAITING_FOR_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resolved'] = isset($data['resolved']) ? $data['resolved'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['waiting_for'] = isset($data['waiting_for']) ? $data['waiting_for'] : null;
        $this->container['outcome_amount'] = isset($data['outcome_amount']) ? $data['outcome_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($this->container['outcome']) && !in_array($this->container['outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'outcome', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        $allowedValues = $this->getWaitingForAllowableValues();
        if (!is_null($this->container['waiting_for']) && !in_array($this->container['waiting_for'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'waiting_for', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resolved
     *
     * @return \DateTime
     */
    public function getResolved()
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param \DateTime $resolved Resolved date
     *
     * @return $this
     */
    public function setResolved($resolved)
    {
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the dispute, one of the following: `open`, `waiting_for_response`, `under_review`, `resolved`, or `other`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome Outcome of the dispute, one of the following: `cancelled_by_customer`, `merchant_favor`, `customer_favor_refund`, `customer_favor_chargeback` or `provider_payout`
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($outcome) && !in_array($outcome, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outcome', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The dispute amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the dispute
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id of the dispute
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Invoice of the dispute is attached to
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason for the dispute, one of the following: `product_not_received`, `product_not_as_described`, `unauthorised`, `credit_not_processed`, `duplicate`, `incorrect_amount`, `payment_by_other_means`, `cancelled_recurring_billing`, `insufficient_funds`, `other`
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date of creation
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Date of latest change
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets waiting_for
     *
     * @return string
     */
    public function getWaitingFor()
    {
        return $this->container['waiting_for'];
    }

    /**
     * Sets waiting_for
     *
     * @param string $waiting_for waiting for action from involved party, one of the following: `customer`, `merchant`, `other`
     *
     * @return $this
     */
    public function setWaitingFor($waiting_for)
    {
        $allowedValues = $this->getWaitingForAllowableValues();
        if (!is_null($waiting_for) && !in_array($waiting_for, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'waiting_for', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['waiting_for'] = $waiting_for;

        return $this;
    }

    /**
     * Gets outcome_amount
     *
     * @return int
     */
    public function getOutcomeAmount()
    {
        return $this->container['outcome_amount'];
    }

    /**
     * Sets outcome_amount
     *
     * @param int $outcome_amount The outcome amount of the dispute
     *
     * @return $this
     */
    public function setOutcomeAmount($outcome_amount)
    {
        $this->container['outcome_amount'] = $outcome_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
