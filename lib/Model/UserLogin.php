<?php
/**
 * UserLogin
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * UserLogin Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserLogin implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserLogin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'user' => '\Frisbii\Model\User',
        'account' => '\Frisbii\Model\Account',
        'organisation' => '\Frisbii\Model\Organisation',
        'organisations' => '\Frisbii\Model\OrganisationLogin[]',
        'groups' => 'string[]',
        'permissions' => 'string[]',
        'entitlements' => 'string[]',
        'tokenTtl' => 'int',
        'mfaRequired' => 'bool',
        'passwordExpiresInDays' => 'int',
        'productName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'user' => null,
        'account' => null,
        'organisation' => null,
        'organisations' => null,
        'groups' => null,
        'permissions' => null,
        'entitlements' => null,
        'tokenTtl' => 'int32',
        'mfaRequired' => null,
        'passwordExpiresInDays' => 'int64',
        'productName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'token' => false,
        'user' => false,
        'account' => false,
        'organisation' => false,
        'organisations' => false,
        'groups' => false,
        'permissions' => false,
        'entitlements' => false,
        'tokenTtl' => false,
        'mfaRequired' => false,
        'passwordExpiresInDays' => false,
        'productName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'user' => 'user',
        'account' => 'account',
        'organisation' => 'organisation',
        'organisations' => 'organisations',
        'groups' => 'groups',
        'permissions' => 'permissions',
        'entitlements' => 'entitlements',
        'tokenTtl' => 'token_ttl',
        'mfaRequired' => 'mfa_required',
        'passwordExpiresInDays' => 'passwordExpiresInDays',
        'productName' => 'product_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'user' => 'setUser',
        'account' => 'setAccount',
        'organisation' => 'setOrganisation',
        'organisations' => 'setOrganisations',
        'groups' => 'setGroups',
        'permissions' => 'setPermissions',
        'entitlements' => 'setEntitlements',
        'tokenTtl' => 'setTokenTtl',
        'mfaRequired' => 'setMfaRequired',
        'passwordExpiresInDays' => 'setPasswordExpiresInDays',
        'productName' => 'setProductName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'user' => 'getUser',
        'account' => 'getAccount',
        'organisation' => 'getOrganisation',
        'organisations' => 'getOrganisations',
        'groups' => 'getGroups',
        'permissions' => 'getPermissions',
        'entitlements' => 'getEntitlements',
        'tokenTtl' => 'getTokenTtl',
        'mfaRequired' => 'getMfaRequired',
        'passwordExpiresInDays' => 'getPasswordExpiresInDays',
        'productName' => 'getProductName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_NAME_PAYMENTS = 'PAYMENTS';
    public const PRODUCT_NAME_SUBSCRIPTIONS = 'SUBSCRIPTIONS';
    public const PRODUCT_NAME_ALL = 'ALL';
    public const PRODUCT_NAME_OPTIMIZE = 'OPTIMIZE';
    public const PRODUCT_NAME_PAY = 'PAY';
    public const PRODUCT_NAME_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductNameAllowableValues()
    {
        return [
            self::PRODUCT_NAME_PAYMENTS,
            self::PRODUCT_NAME_SUBSCRIPTIONS,
            self::PRODUCT_NAME_ALL,
            self::PRODUCT_NAME_OPTIMIZE,
            self::PRODUCT_NAME_PAY,
            self::PRODUCT_NAME_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('organisation', $data ?? [], null);
        $this->setIfExists('organisations', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('entitlements', $data ?? [], null);
        $this->setIfExists('tokenTtl', $data ?? [], null);
        $this->setIfExists('mfaRequired', $data ?? [], null);
        $this->setIfExists('passwordExpiresInDays', $data ?? [], null);
        $this->setIfExists('productName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['organisation'] === null) {
            $invalidProperties[] = "'organisation' can't be null";
        }
        if ($this->container['organisations'] === null) {
            $invalidProperties[] = "'organisations' can't be null";
        }
        if ($this->container['groups'] === null) {
            $invalidProperties[] = "'groups' can't be null";
        }
        if ($this->container['permissions'] === null) {
            $invalidProperties[] = "'permissions' can't be null";
        }
        if ($this->container['entitlements'] === null) {
            $invalidProperties[] = "'entitlements' can't be null";
        }
        if ($this->container['tokenTtl'] === null) {
            $invalidProperties[] = "'tokenTtl' can't be null";
        }
        $allowedValues = $this->getProductNameAllowableValues();
        if (!is_null($this->container['productName']) && !in_array($this->container['productName'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'productName', must be one of '%s'",
                $this->container['productName'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Authentication token to use in X-Auth-Token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Frisbii\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Frisbii\Model\User $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Frisbii\Model\Account
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Frisbii\Model\Account $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return \Frisbii\Model\Organisation
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param \Frisbii\Model\Organisation $organisation organisation
     *
     * @return self
     */
    public function setOrganisation($organisation)
    {
        if (is_null($organisation)) {
            throw new \InvalidArgumentException('non-nullable organisation cannot be null');
        }
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets organisations
     *
     * @return \Frisbii\Model\OrganisationLogin[]
     */
    public function getOrganisations()
    {
        return $this->container['organisations'];
    }

    /**
     * Sets organisations
     *
     * @param \Frisbii\Model\OrganisationLogin[] $organisations List of organisations for user
     *
     * @return self
     */
    public function setOrganisations($organisations)
    {
        if (is_null($organisations)) {
            throw new \InvalidArgumentException('non-nullable organisations cannot be null');
        }
        $this->container['organisations'] = $organisations;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[] $groups List user groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }


        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[] $permissions List user permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }


        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets entitlements
     *
     * @return string[]
     */
    public function getEntitlements()
    {
        return $this->container['entitlements'];
    }

    /**
     * Sets entitlements
     *
     * @param string[] $entitlements List user entitlements
     *
     * @return self
     */
    public function setEntitlements($entitlements)
    {
        if (is_null($entitlements)) {
            throw new \InvalidArgumentException('non-nullable entitlements cannot be null');
        }


        $this->container['entitlements'] = $entitlements;

        return $this;
    }

    /**
     * Gets tokenTtl
     *
     * @return int
     */
    public function getTokenTtl()
    {
        return $this->container['tokenTtl'];
    }

    /**
     * Sets tokenTtl
     *
     * @param int $tokenTtl Token time-to-live in minutes
     *
     * @return self
     */
    public function setTokenTtl($tokenTtl)
    {
        if (is_null($tokenTtl)) {
            throw new \InvalidArgumentException('non-nullable tokenTtl cannot be null');
        }
        $this->container['tokenTtl'] = $tokenTtl;

        return $this;
    }

    /**
     * Gets mfaRequired
     *
     * @return bool|null
     */
    public function getMfaRequired()
    {
        return $this->container['mfaRequired'];
    }

    /**
     * Sets mfaRequired
     *
     * @param bool|null $mfaRequired User needs to add MFA
     *
     * @return self
     */
    public function setMfaRequired($mfaRequired)
    {
        if (is_null($mfaRequired)) {
            throw new \InvalidArgumentException('non-nullable mfaRequired cannot be null');
        }
        $this->container['mfaRequired'] = $mfaRequired;

        return $this;
    }

    /**
     * Gets passwordExpiresInDays
     *
     * @return int|null
     */
    public function getPasswordExpiresInDays()
    {
        return $this->container['passwordExpiresInDays'];
    }

    /**
     * Sets passwordExpiresInDays
     *
     * @param int|null $passwordExpiresInDays Days until user password expires
     *
     * @return self
     */
    public function setPasswordExpiresInDays($passwordExpiresInDays)
    {
        if (is_null($passwordExpiresInDays)) {
            throw new \InvalidArgumentException('non-nullable passwordExpiresInDays cannot be null');
        }
        $this->container['passwordExpiresInDays'] = $passwordExpiresInDays;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName Product plan which the organisation is subscribed to.
     *
     * @return self
     */
    public function setProductName($productName)
    {
        if (is_null($productName)) {
            throw new \InvalidArgumentException('non-nullable productName cannot be null');
        }
        $allowedValues = $this->getProductNameAllowableValues();
        if (!in_array($productName, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'productName', must be one of '%s'",
                    $productName,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['productName'] = $productName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


