<?php
/**
 * PricingDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * PricingDto Class Doc Comment
 *
 * @category Class
 * @description Pricing for this metered billing product.
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PricingDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PricingDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pricingModel' => 'string',
        'unitRanges' => '\Frisbii\Model\UnitRangeDto[]',
        'vat' => 'float',
        'currency' => 'string',
        'unitLabel' => 'string',
        'includedUnits' => 'int',
        'minimumFee' => 'string',
        'amountInclVat' => 'bool',
        'taxPolicy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pricingModel' => null,
        'unitRanges' => null,
        'vat' => 'float',
        'currency' => null,
        'unitLabel' => null,
        'includedUnits' => 'int64',
        'minimumFee' => null,
        'amountInclVat' => null,
        'taxPolicy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pricingModel' => false,
        'unitRanges' => false,
        'vat' => false,
        'currency' => false,
        'unitLabel' => false,
        'includedUnits' => false,
        'minimumFee' => false,
        'amountInclVat' => false,
        'taxPolicy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pricingModel' => 'pricing_model',
        'unitRanges' => 'unit_ranges',
        'vat' => 'vat',
        'currency' => 'currency',
        'unitLabel' => 'unit_label',
        'includedUnits' => 'included_units',
        'minimumFee' => 'minimum_fee',
        'amountInclVat' => 'amount_incl_vat',
        'taxPolicy' => 'tax_policy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pricingModel' => 'setPricingModel',
        'unitRanges' => 'setUnitRanges',
        'vat' => 'setVat',
        'currency' => 'setCurrency',
        'unitLabel' => 'setUnitLabel',
        'includedUnits' => 'setIncludedUnits',
        'minimumFee' => 'setMinimumFee',
        'amountInclVat' => 'setAmountInclVat',
        'taxPolicy' => 'setTaxPolicy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pricingModel' => 'getPricingModel',
        'unitRanges' => 'getUnitRanges',
        'vat' => 'getVat',
        'currency' => 'getCurrency',
        'unitLabel' => 'getUnitLabel',
        'includedUnits' => 'getIncludedUnits',
        'minimumFee' => 'getMinimumFee',
        'amountInclVat' => 'getAmountInclVat',
        'taxPolicy' => 'getTaxPolicy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRICING_MODEL_PER_UNIT = 'per_unit';
    public const PRICING_MODEL_PER_TIER = 'per_tier';
    public const PRICING_MODEL_PER_UNIT_STEP = 'per_unit_step';
    public const PRICING_MODEL_PER_TIER_STEP = 'per_tier_step';
    public const PRICING_MODEL_PERCENTAGE = 'percentage';
    public const PRICING_MODEL_PERCENTAGE_STEP = 'percentage_step';
    public const PRICING_MODEL_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPricingModelAllowableValues()
    {
        return [
            self::PRICING_MODEL_PER_UNIT,
            self::PRICING_MODEL_PER_TIER,
            self::PRICING_MODEL_PER_UNIT_STEP,
            self::PRICING_MODEL_PER_TIER_STEP,
            self::PRICING_MODEL_PERCENTAGE,
            self::PRICING_MODEL_PERCENTAGE_STEP,
            self::PRICING_MODEL_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pricingModel', $data ?? [], null);
        $this->setIfExists('unitRanges', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('unitLabel', $data ?? [], null);
        $this->setIfExists('includedUnits', $data ?? [], null);
        $this->setIfExists('minimumFee', $data ?? [], null);
        $this->setIfExists('amountInclVat', $data ?? [], null);
        $this->setIfExists('taxPolicy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pricingModel'] === null) {
            $invalidProperties[] = "'pricingModel' can't be null";
        }
        $allowedValues = $this->getPricingModelAllowableValues();
        if (!is_null($this->container['pricingModel']) && !in_array($this->container['pricingModel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pricingModel', must be one of '%s'",
                $this->container['pricingModel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unitRanges'] === null) {
            $invalidProperties[] = "'unitRanges' can't be null";
        }
        if ((count($this->container['unitRanges']) < 1)) {
            $invalidProperties[] = "invalid value for 'unitRanges', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pricingModel
     *
     * @return string
     */
    public function getPricingModel()
    {
        return $this->container['pricingModel'];
    }

    /**
     * Sets pricingModel
     *
     * @param string $pricingModel Pricing model for the product.
     *
     * @return self
     */
    public function setPricingModel($pricingModel)
    {
        if (is_null($pricingModel)) {
            throw new \InvalidArgumentException('non-nullable pricingModel cannot be null');
        }
        $allowedValues = $this->getPricingModelAllowableValues();
        if (!in_array($pricingModel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pricingModel', must be one of '%s'",
                    $pricingModel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pricingModel'] = $pricingModel;

        return $this;
    }

    /**
     * Gets unitRanges
     *
     * @return \Frisbii\Model\UnitRangeDto[]
     */
    public function getUnitRanges()
    {
        return $this->container['unitRanges'];
    }

    /**
     * Sets unitRanges
     *
     * @param \Frisbii\Model\UnitRangeDto[] $unitRanges Unit ranges for this product
     *
     * @return self
     */
    public function setUnitRanges($unitRanges)
    {
        if (is_null($unitRanges)) {
            throw new \InvalidArgumentException('non-nullable unitRanges cannot be null');
        }


        if ((count($unitRanges) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unitRanges when calling PricingDto., number of items must be greater than or equal to 1.');
        }
        $this->container['unitRanges'] = $unitRanges;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat VAT percentage for the product. Defaults to the account's VAT
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency for the pricing plan in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unitLabel
     *
     * @return string|null
     */
    public function getUnitLabel()
    {
        return $this->container['unitLabel'];
    }

    /**
     * Sets unitLabel
     *
     * @param string|null $unitLabel Label for the unit of the product. Defaults to 'unit'.
     *
     * @return self
     */
    public function setUnitLabel($unitLabel)
    {
        if (is_null($unitLabel)) {
            throw new \InvalidArgumentException('non-nullable unitLabel cannot be null');
        }
        $this->container['unitLabel'] = $unitLabel;

        return $this;
    }

    /**
     * Gets includedUnits
     *
     * @return int|null
     */
    public function getIncludedUnits()
    {
        return $this->container['includedUnits'];
    }

    /**
     * Sets includedUnits
     *
     * @param int|null $includedUnits Included units for free. Defaults to 0.
     *
     * @return self
     */
    public function setIncludedUnits($includedUnits)
    {
        if (is_null($includedUnits)) {
            throw new \InvalidArgumentException('non-nullable includedUnits cannot be null');
        }
        $this->container['includedUnits'] = $includedUnits;

        return $this;
    }

    /**
     * Gets minimumFee
     *
     * @return string|null
     */
    public function getMinimumFee()
    {
        return $this->container['minimumFee'];
    }

    /**
     * Sets minimumFee
     *
     * @param string|null $minimumFee Minimum fee for the product. Defaults to 0.
     *
     * @return self
     */
    public function setMinimumFee($minimumFee)
    {
        if (is_null($minimumFee)) {
            throw new \InvalidArgumentException('non-nullable minimumFee cannot be null');
        }
        $this->container['minimumFee'] = $minimumFee;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return bool|null
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param bool|null $amountInclVat Whether the amount is including VAT. Defaults to true.
     *
     * @return self
     */
    public function setAmountInclVat($amountInclVat)
    {
        if (is_null($amountInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountInclVat cannot be null');
        }
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets taxPolicy
     *
     * @return string|null
     */
    public function getTaxPolicy()
    {
        return $this->container['taxPolicy'];
    }

    /**
     * Sets taxPolicy
     *
     * @param string|null $taxPolicy Tax policy handle for the product.
     *
     * @return self
     */
    public function setTaxPolicy($taxPolicy)
    {
        if (is_null($taxPolicy)) {
            throw new \InvalidArgumentException('non-nullable taxPolicy cannot be null');
        }
        $this->container['taxPolicy'] = $taxPolicy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


