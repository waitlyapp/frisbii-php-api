<?php
/**
 * CardGatewayAgreement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CardGatewayAgreement Class Doc Comment
 *
 * @category Class
 * @description Card gateway agreement details in case of card gateway
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardGatewayAgreement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardGatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currencies' => 'string[]',
        'provider' => 'string',
        'gwRef' => 'string',
        'surcharge' => 'bool',
        'name' => 'string',
        'cardTypes' => 'string[]',
        'paymentTypes' => 'string[]',
        'providerSettings' => 'array<string,object>',
        'feeConfiguration' => 'array<string,object>[]',
        'threedSecure' => 'bool',
        'threedSecureRecurring' => 'bool',
        'securedByNets' => 'bool',
        'securedByNetsRecurring' => 'bool',
        'defaultRequireSca' => 'bool',
        'disallowThreedSecureAttempted' => 'bool',
        'payout' => 'bool',
        'vtsConfiguration' => '\Frisbii\Model\EmvConfiguration',
        'scofConfiguration' => '\Frisbii\Model\EmvConfiguration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currencies' => null,
        'provider' => null,
        'gwRef' => null,
        'surcharge' => null,
        'name' => null,
        'cardTypes' => null,
        'paymentTypes' => null,
        'providerSettings' => null,
        'feeConfiguration' => null,
        'threedSecure' => null,
        'threedSecureRecurring' => null,
        'securedByNets' => null,
        'securedByNetsRecurring' => null,
        'defaultRequireSca' => null,
        'disallowThreedSecureAttempted' => null,
        'payout' => null,
        'vtsConfiguration' => null,
        'scofConfiguration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currencies' => false,
        'provider' => false,
        'gwRef' => false,
        'surcharge' => false,
        'name' => false,
        'cardTypes' => false,
        'paymentTypes' => false,
        'providerSettings' => false,
        'feeConfiguration' => false,
        'threedSecure' => false,
        'threedSecureRecurring' => false,
        'securedByNets' => false,
        'securedByNetsRecurring' => false,
        'defaultRequireSca' => false,
        'disallowThreedSecureAttempted' => false,
        'payout' => false,
        'vtsConfiguration' => false,
        'scofConfiguration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currencies' => 'currencies',
        'provider' => 'provider',
        'gwRef' => 'gw_ref',
        'surcharge' => 'surcharge',
        'name' => 'name',
        'cardTypes' => 'card_types',
        'paymentTypes' => 'payment_types',
        'providerSettings' => 'provider_settings',
        'feeConfiguration' => 'fee_configuration',
        'threedSecure' => 'threed_secure',
        'threedSecureRecurring' => 'threed_secure_recurring',
        'securedByNets' => 'secured_by_nets',
        'securedByNetsRecurring' => 'secured_by_nets_recurring',
        'defaultRequireSca' => 'default_require_sca',
        'disallowThreedSecureAttempted' => 'disallow_threed_secure_attempted',
        'payout' => 'payout',
        'vtsConfiguration' => 'vts_configuration',
        'scofConfiguration' => 'scof_configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currencies' => 'setCurrencies',
        'provider' => 'setProvider',
        'gwRef' => 'setGwRef',
        'surcharge' => 'setSurcharge',
        'name' => 'setName',
        'cardTypes' => 'setCardTypes',
        'paymentTypes' => 'setPaymentTypes',
        'providerSettings' => 'setProviderSettings',
        'feeConfiguration' => 'setFeeConfiguration',
        'threedSecure' => 'setThreedSecure',
        'threedSecureRecurring' => 'setThreedSecureRecurring',
        'securedByNets' => 'setSecuredByNets',
        'securedByNetsRecurring' => 'setSecuredByNetsRecurring',
        'defaultRequireSca' => 'setDefaultRequireSca',
        'disallowThreedSecureAttempted' => 'setDisallowThreedSecureAttempted',
        'payout' => 'setPayout',
        'vtsConfiguration' => 'setVtsConfiguration',
        'scofConfiguration' => 'setScofConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currencies' => 'getCurrencies',
        'provider' => 'getProvider',
        'gwRef' => 'getGwRef',
        'surcharge' => 'getSurcharge',
        'name' => 'getName',
        'cardTypes' => 'getCardTypes',
        'paymentTypes' => 'getPaymentTypes',
        'providerSettings' => 'getProviderSettings',
        'feeConfiguration' => 'getFeeConfiguration',
        'threedSecure' => 'getThreedSecure',
        'threedSecureRecurring' => 'getThreedSecureRecurring',
        'securedByNets' => 'getSecuredByNets',
        'securedByNetsRecurring' => 'getSecuredByNetsRecurring',
        'defaultRequireSca' => 'getDefaultRequireSca',
        'disallowThreedSecureAttempted' => 'getDisallowThreedSecureAttempted',
        'payout' => 'getPayout',
        'vtsConfiguration' => 'getVtsConfiguration',
        'scofConfiguration' => 'getScofConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROVIDER_TEST = 'test';
    public const PROVIDER_DIBS = 'dibs';
    public const PROVIDER_DIBS_TEST = 'dibs_test';
    public const PROVIDER_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const PAYMENT_TYPES_CARD = 'card';
    public const PAYMENT_TYPES_APPLEPAY = 'applepay';
    public const PAYMENT_TYPES_GOOGLEPAY = 'googlepay';
    public const PAYMENT_TYPES_MOBILEPAY = 'mobilepay';
    public const PAYMENT_TYPES_VIPPS = 'vipps';
    public const PAYMENT_TYPES_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_TEST,
            self::PROVIDER_DIBS,
            self::PROVIDER_DIBS_TEST,
            self::PROVIDER_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypesAllowableValues()
    {
        return [
            self::PAYMENT_TYPES_CARD,
            self::PAYMENT_TYPES_APPLEPAY,
            self::PAYMENT_TYPES_GOOGLEPAY,
            self::PAYMENT_TYPES_MOBILEPAY,
            self::PAYMENT_TYPES_VIPPS,
            self::PAYMENT_TYPES_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currencies', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('gwRef', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cardTypes', $data ?? [], null);
        $this->setIfExists('paymentTypes', $data ?? [], null);
        $this->setIfExists('providerSettings', $data ?? [], null);
        $this->setIfExists('feeConfiguration', $data ?? [], null);
        $this->setIfExists('threedSecure', $data ?? [], null);
        $this->setIfExists('threedSecureRecurring', $data ?? [], null);
        $this->setIfExists('securedByNets', $data ?? [], null);
        $this->setIfExists('securedByNetsRecurring', $data ?? [], null);
        $this->setIfExists('defaultRequireSca', $data ?? [], null);
        $this->setIfExists('disallowThreedSecureAttempted', $data ?? [], null);
        $this->setIfExists('payout', $data ?? [], null);
        $this->setIfExists('vtsConfiguration', $data ?? [], null);
        $this->setIfExists('scofConfiguration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currencies'] === null) {
            $invalidProperties[] = "'currencies' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider', must be one of '%s'",
                $this->container['provider'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['gwRef'] === null) {
            $invalidProperties[] = "'gwRef' can't be null";
        }
        if ((mb_strlen($this->container['gwRef']) < 1)) {
            $invalidProperties[] = "invalid value for 'gwRef', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currencies
     *
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param string[] $currencies Set of currencies supported by agreement. Each currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code.
     *
     * @return self
     */
    public function setCurrencies($currencies)
    {
        if (is_null($currencies)) {
            throw new \InvalidArgumentException('non-nullable currencies cannot be null');
        }


        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider Card gateway provider type
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider', must be one of '%s'",
                    $provider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets gwRef
     *
     * @return string
     */
    public function getGwRef()
    {
        return $this->container['gwRef'];
    }

    /**
     * Sets gwRef
     *
     * @param string $gwRef Card gateway reference id
     *
     * @return self
     */
    public function setGwRef($gwRef)
    {
        if (is_null($gwRef)) {
            throw new \InvalidArgumentException('non-nullable gwRef cannot be null');
        }

        if ((mb_strlen($gwRef) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gwRef when calling CardGatewayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['gwRef'] = $gwRef;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return bool|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param bool|null $surcharge Add acquirer surcharge fee if possible
     *
     * @return self
     */
    public function setSurcharge($surcharge)
    {
        if (is_null($surcharge)) {
            throw new \InvalidArgumentException('non-nullable surcharge cannot be null');
        }
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Optional name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cardTypes
     *
     * @return string[]|null
     */
    public function getCardTypes()
    {
        return $this->container['cardTypes'];
    }

    /**
     * Sets cardTypes
     *
     * @param string[]|null $cardTypes Card types supported by agreement
     *
     * @return self
     */
    public function setCardTypes($cardTypes)
    {
        if (is_null($cardTypes)) {
            throw new \InvalidArgumentException('non-nullable cardTypes cannot be null');
        }


        $this->container['cardTypes'] = $cardTypes;

        return $this;
    }

    /**
     * Gets paymentTypes
     *
     * @return string[]|null
     */
    public function getPaymentTypes()
    {
        return $this->container['paymentTypes'];
    }

    /**
     * Sets paymentTypes
     *
     * @param string[]|null $paymentTypes Set of supported payment types for agreement: `card`, `applepay`, `googlepay`, `mobilepay`, `vipps`. If not defined defaults to all.
     *
     * @return self
     */
    public function setPaymentTypes($paymentTypes)
    {
        if (is_null($paymentTypes)) {
            throw new \InvalidArgumentException('non-nullable paymentTypes cannot be null');
        }
        $allowedValues = $this->getPaymentTypesAllowableValues();
        if (array_diff($paymentTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['paymentTypes'] = $paymentTypes;

        return $this;
    }

    /**
     * Gets providerSettings
     *
     * @return array<string,object>|null
     */
    public function getProviderSettings()
    {
        return $this->container['providerSettings'];
    }

    /**
     * Sets providerSettings
     *
     * @param array<string,object>|null $providerSettings Key value map of provider settings
     *
     * @return self
     */
    public function setProviderSettings($providerSettings)
    {
        if (is_null($providerSettings)) {
            throw new \InvalidArgumentException('non-nullable providerSettings cannot be null');
        }
        $this->container['providerSettings'] = $providerSettings;

        return $this;
    }

    /**
     * Gets feeConfiguration
     *
     * @return array<string,object>[]|null
     */
    public function getFeeConfiguration()
    {
        return $this->container['feeConfiguration'];
    }

    /**
     * Sets feeConfiguration
     *
     * @param array<string,object>[]|null $feeConfiguration Prioritized list of fee configuration entries
     *
     * @return self
     */
    public function setFeeConfiguration($feeConfiguration)
    {
        if (is_null($feeConfiguration)) {
            throw new \InvalidArgumentException('non-nullable feeConfiguration cannot be null');
        }
        $this->container['feeConfiguration'] = $feeConfiguration;

        return $this;
    }

    /**
     * Gets threedSecure
     *
     * @return bool|null
     */
    public function getThreedSecure()
    {
        return $this->container['threedSecure'];
    }

    /**
     * Sets threedSecure
     *
     * @param bool|null $threedSecure Use 3DSecure for non-recurring payments (if supported by provider)
     *
     * @return self
     */
    public function setThreedSecure($threedSecure)
    {
        if (is_null($threedSecure)) {
            throw new \InvalidArgumentException('non-nullable threedSecure cannot be null');
        }
        $this->container['threedSecure'] = $threedSecure;

        return $this;
    }

    /**
     * Gets threedSecureRecurring
     *
     * @return bool|null
     */
    public function getThreedSecureRecurring()
    {
        return $this->container['threedSecureRecurring'];
    }

    /**
     * Sets threedSecureRecurring
     *
     * @param bool|null $threedSecureRecurring Use 3DSecure for recurring payments (if supported by provider)
     *
     * @return self
     */
    public function setThreedSecureRecurring($threedSecureRecurring)
    {
        if (is_null($threedSecureRecurring)) {
            throw new \InvalidArgumentException('non-nullable threedSecureRecurring cannot be null');
        }
        $this->container['threedSecureRecurring'] = $threedSecureRecurring;

        return $this;
    }

    /**
     * Gets securedByNets
     *
     * @return bool|null
     */
    public function getSecuredByNets()
    {
        return $this->container['securedByNets'];
    }

    /**
     * Sets securedByNets
     *
     * @param bool|null $securedByNets Use Secured By Nets for non-recurring payments (if supported by provider)
     *
     * @return self
     */
    public function setSecuredByNets($securedByNets)
    {
        if (is_null($securedByNets)) {
            throw new \InvalidArgumentException('non-nullable securedByNets cannot be null');
        }
        $this->container['securedByNets'] = $securedByNets;

        return $this;
    }

    /**
     * Gets securedByNetsRecurring
     *
     * @return bool|null
     */
    public function getSecuredByNetsRecurring()
    {
        return $this->container['securedByNetsRecurring'];
    }

    /**
     * Sets securedByNetsRecurring
     *
     * @param bool|null $securedByNetsRecurring Use Secured By Nets for recurring payments (if supported by provider)
     *
     * @return self
     */
    public function setSecuredByNetsRecurring($securedByNetsRecurring)
    {
        if (is_null($securedByNetsRecurring)) {
            throw new \InvalidArgumentException('non-nullable securedByNetsRecurring cannot be null');
        }
        $this->container['securedByNetsRecurring'] = $securedByNetsRecurring;

        return $this;
    }

    /**
     * Gets defaultRequireSca
     *
     * @return bool|null
     */
    public function getDefaultRequireSca()
    {
        return $this->container['defaultRequireSca'];
    }

    /**
     * Sets defaultRequireSca
     *
     * @param bool|null $defaultRequireSca Default behaviour if no specific SCA handing is defined in payment sessions. If enabled SCA will be required and un-enrolled cards will be declined.
     *
     * @return self
     */
    public function setDefaultRequireSca($defaultRequireSca)
    {
        if (is_null($defaultRequireSca)) {
            throw new \InvalidArgumentException('non-nullable defaultRequireSca cannot be null');
        }
        $this->container['defaultRequireSca'] = $defaultRequireSca;

        return $this;
    }

    /**
     * Gets disallowThreedSecureAttempted
     *
     * @return bool|null
     */
    public function getDisallowThreedSecureAttempted()
    {
        return $this->container['disallowThreedSecureAttempted'];
    }

    /**
     * Sets disallowThreedSecureAttempted
     *
     * @param bool|null $disallowThreedSecureAttempted Disallow 3D Secure status attempted which means that card issuer does not support 3D Secure so authentication could not be performed. An attempted 3D Secure flow normally results in liability shift.
     *
     * @return self
     */
    public function setDisallowThreedSecureAttempted($disallowThreedSecureAttempted)
    {
        if (is_null($disallowThreedSecureAttempted)) {
            throw new \InvalidArgumentException('non-nullable disallowThreedSecureAttempted cannot be null');
        }
        $this->container['disallowThreedSecureAttempted'] = $disallowThreedSecureAttempted;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return bool|null
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param bool|null $payout Use agreement for payout (if supported by provider)
     *
     * @return self
     */
    public function setPayout($payout)
    {
        if (is_null($payout)) {
            throw new \InvalidArgumentException('non-nullable payout cannot be null');
        }
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets vtsConfiguration
     *
     * @return \Frisbii\Model\EmvConfiguration|null
     */
    public function getVtsConfiguration()
    {
        return $this->container['vtsConfiguration'];
    }

    /**
     * Sets vtsConfiguration
     *
     * @param \Frisbii\Model\EmvConfiguration|null $vtsConfiguration vtsConfiguration
     *
     * @return self
     */
    public function setVtsConfiguration($vtsConfiguration)
    {
        if (is_null($vtsConfiguration)) {
            throw new \InvalidArgumentException('non-nullable vtsConfiguration cannot be null');
        }
        $this->container['vtsConfiguration'] = $vtsConfiguration;

        return $this;
    }

    /**
     * Gets scofConfiguration
     *
     * @return \Frisbii\Model\EmvConfiguration|null
     */
    public function getScofConfiguration()
    {
        return $this->container['scofConfiguration'];
    }

    /**
     * Sets scofConfiguration
     *
     * @param \Frisbii\Model\EmvConfiguration|null $scofConfiguration scofConfiguration
     *
     * @return self
     */
    public function setScofConfiguration($scofConfiguration)
    {
        if (is_null($scofConfiguration)) {
            throw new \InvalidArgumentException('non-nullable scofConfiguration cannot be null');
        }
        $this->container['scofConfiguration'] = $scofConfiguration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


