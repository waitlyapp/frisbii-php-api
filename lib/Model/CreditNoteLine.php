<?php
/**
 * CreditNoteLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreditNoteLine Class Doc Comment
 *
 * @category Class
 * @description Credit note lines
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditNoteLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditNoteLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'int',
        'text' => 'string',
        'quantity' => 'int',
        'description' => 'string',
        'vat' => 'float',
        'created' => '\DateTime',
        'origin' => 'string',
        'orderLineId' => 'string',
        'amountInclVat' => 'int',
        'amountExVat' => 'int',
        'unitAmount' => 'int',
        'unitAmountVat' => 'int',
        'unitAmountExVat' => 'int',
        'amountInclVatDefined' => 'bool',
        'periodFrom' => '\DateTime',
        'periodTo' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'int32',
        'text' => null,
        'quantity' => 'int32',
        'description' => null,
        'vat' => 'float',
        'created' => 'date-time',
        'origin' => null,
        'orderLineId' => null,
        'amountInclVat' => 'int32',
        'amountExVat' => 'int32',
        'unitAmount' => 'int32',
        'unitAmountVat' => 'int32',
        'unitAmountExVat' => 'int32',
        'amountInclVatDefined' => null,
        'periodFrom' => 'date-time',
        'periodTo' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'text' => false,
        'quantity' => false,
        'description' => false,
        'vat' => false,
        'created' => false,
        'origin' => false,
        'orderLineId' => false,
        'amountInclVat' => false,
        'amountExVat' => false,
        'unitAmount' => false,
        'unitAmountVat' => false,
        'unitAmountExVat' => false,
        'amountInclVatDefined' => false,
        'periodFrom' => false,
        'periodTo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'text' => 'text',
        'quantity' => 'quantity',
        'description' => 'description',
        'vat' => 'vat',
        'created' => 'created',
        'origin' => 'origin',
        'orderLineId' => 'order_line_id',
        'amountInclVat' => 'amount_incl_vat',
        'amountExVat' => 'amount_ex_vat',
        'unitAmount' => 'unit_amount',
        'unitAmountVat' => 'unit_amount_vat',
        'unitAmountExVat' => 'unit_amount_ex_vat',
        'amountInclVatDefined' => 'amount_incl_vat_defined',
        'periodFrom' => 'period_from',
        'periodTo' => 'period_to'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'text' => 'setText',
        'quantity' => 'setQuantity',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'created' => 'setCreated',
        'origin' => 'setOrigin',
        'orderLineId' => 'setOrderLineId',
        'amountInclVat' => 'setAmountInclVat',
        'amountExVat' => 'setAmountExVat',
        'unitAmount' => 'setUnitAmount',
        'unitAmountVat' => 'setUnitAmountVat',
        'unitAmountExVat' => 'setUnitAmountExVat',
        'amountInclVatDefined' => 'setAmountInclVatDefined',
        'periodFrom' => 'setPeriodFrom',
        'periodTo' => 'setPeriodTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'text' => 'getText',
        'quantity' => 'getQuantity',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'created' => 'getCreated',
        'origin' => 'getOrigin',
        'orderLineId' => 'getOrderLineId',
        'amountInclVat' => 'getAmountInclVat',
        'amountExVat' => 'getAmountExVat',
        'unitAmount' => 'getUnitAmount',
        'unitAmountVat' => 'getUnitAmountVat',
        'unitAmountExVat' => 'getUnitAmountExVat',
        'amountInclVatDefined' => 'getAmountInclVatDefined',
        'periodFrom' => 'getPeriodFrom',
        'periodTo' => 'getPeriodTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORIGIN_PLAN = 'plan';
    public const ORIGIN_ADD_ON = 'add_on';
    public const ORIGIN_ONDEMAND = 'ondemand';
    public const ORIGIN_ADDITIONAL_COST = 'additional_cost';
    public const ORIGIN_CREDIT = 'credit';
    public const ORIGIN_DISCOUNT = 'discount';
    public const ORIGIN_SETUP_FEE = 'setup_fee';
    public const ORIGIN_SURCHARGE_FEE = 'surcharge_fee';
    public const ORIGIN_METERED_BILLING_PRODUCT = 'metered_billing_product';
    public const ORIGIN_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginAllowableValues()
    {
        return [
            self::ORIGIN_PLAN,
            self::ORIGIN_ADD_ON,
            self::ORIGIN_ONDEMAND,
            self::ORIGIN_ADDITIONAL_COST,
            self::ORIGIN_CREDIT,
            self::ORIGIN_DISCOUNT,
            self::ORIGIN_SETUP_FEE,
            self::ORIGIN_SURCHARGE_FEE,
            self::ORIGIN_METERED_BILLING_PRODUCT,
            self::ORIGIN_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('orderLineId', $data ?? [], null);
        $this->setIfExists('amountInclVat', $data ?? [], null);
        $this->setIfExists('amountExVat', $data ?? [], null);
        $this->setIfExists('unitAmount', $data ?? [], null);
        $this->setIfExists('unitAmountVat', $data ?? [], null);
        $this->setIfExists('unitAmountExVat', $data ?? [], null);
        $this->setIfExists('amountInclVatDefined', $data ?? [], null);
        $this->setIfExists('periodFrom', $data ?? [], null);
        $this->setIfExists('periodTo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ((mb_strlen($this->container['text']) < 1)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getOriginAllowableValues();
        if (!is_null($this->container['origin']) && !in_array($this->container['origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin', must be one of '%s'",
                $this->container['origin'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Credit note line total amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreditNoteLine., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Credit note line text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }

        if ((mb_strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $text when calling CreditNoteLine., must be bigger than or equal to 1.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Credit note line quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CreditNoteLine., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Order line description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat Vat for this credit note line
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Creation date for this credit note line, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin Order line origin, one of the following: `plan`, `add_on`, `ondemand`, `additional_cost`, `credit`, `discount`, `setup_fee`, `surcharge_fee`, `metered_billing_product`
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $allowedValues = $this->getOriginAllowableValues();
        if (!in_array($origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin', must be one of '%s'",
                    $origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets orderLineId
     *
     * @return string|null
     */
    public function getOrderLineId()
    {
        return $this->container['orderLineId'];
    }

    /**
     * Sets orderLineId
     *
     * @param string|null $orderLineId Reference to invoice orderline this credit note line relates to
     *
     * @return self
     */
    public function setOrderLineId($orderLineId)
    {
        if (is_null($orderLineId)) {
            throw new \InvalidArgumentException('non-nullable orderLineId cannot be null');
        }
        $this->container['orderLineId'] = $orderLineId;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return int|null
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param int|null $amountInclVat Credit note line total amount including VAT
     *
     * @return self
     */
    public function setAmountInclVat($amountInclVat)
    {
        if (is_null($amountInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountInclVat cannot be null');
        }
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets amountExVat
     *
     * @return int|null
     */
    public function getAmountExVat()
    {
        return $this->container['amountExVat'];
    }

    /**
     * Sets amountExVat
     *
     * @param int|null $amountExVat Credit note line total amount excluding VAT
     *
     * @return self
     */
    public function setAmountExVat($amountExVat)
    {
        if (is_null($amountExVat)) {
            throw new \InvalidArgumentException('non-nullable amountExVat cannot be null');
        }
        $this->container['amountExVat'] = $amountExVat;

        return $this;
    }

    /**
     * Gets unitAmount
     *
     * @return int|null
     */
    public function getUnitAmount()
    {
        return $this->container['unitAmount'];
    }

    /**
     * Sets unitAmount
     *
     * @param int|null $unitAmount Credit note line unit amount
     *
     * @return self
     */
    public function setUnitAmount($unitAmount)
    {
        if (is_null($unitAmount)) {
            throw new \InvalidArgumentException('non-nullable unitAmount cannot be null');
        }
        $this->container['unitAmount'] = $unitAmount;

        return $this;
    }

    /**
     * Gets unitAmountVat
     *
     * @return int|null
     */
    public function getUnitAmountVat()
    {
        return $this->container['unitAmountVat'];
    }

    /**
     * Sets unitAmountVat
     *
     * @param int|null $unitAmountVat Credit note line vat amount
     *
     * @return self
     */
    public function setUnitAmountVat($unitAmountVat)
    {
        if (is_null($unitAmountVat)) {
            throw new \InvalidArgumentException('non-nullable unitAmountVat cannot be null');
        }
        $this->container['unitAmountVat'] = $unitAmountVat;

        return $this;
    }

    /**
     * Gets unitAmountExVat
     *
     * @return int|null
     */
    public function getUnitAmountExVat()
    {
        return $this->container['unitAmountExVat'];
    }

    /**
     * Sets unitAmountExVat
     *
     * @param int|null $unitAmountExVat Credit note line unit amount excluding VAT
     *
     * @return self
     */
    public function setUnitAmountExVat($unitAmountExVat)
    {
        if (is_null($unitAmountExVat)) {
            throw new \InvalidArgumentException('non-nullable unitAmountExVat cannot be null');
        }
        $this->container['unitAmountExVat'] = $unitAmountExVat;

        return $this;
    }

    /**
     * Gets amountInclVatDefined
     *
     * @return bool|null
     */
    public function getAmountInclVatDefined()
    {
        return $this->container['amountInclVatDefined'];
    }

    /**
     * Sets amountInclVatDefined
     *
     * @param bool|null $amountInclVatDefined Whether the total and units are including VAT.
     *
     * @return self
     */
    public function setAmountInclVatDefined($amountInclVatDefined)
    {
        if (is_null($amountInclVatDefined)) {
            throw new \InvalidArgumentException('non-nullable amountInclVatDefined cannot be null');
        }
        $this->container['amountInclVatDefined'] = $amountInclVatDefined;

        return $this;
    }

    /**
     * Gets periodFrom
     *
     * @return \DateTime|null
     */
    public function getPeriodFrom()
    {
        return $this->container['periodFrom'];
    }

    /**
     * Sets periodFrom
     *
     * @param \DateTime|null $periodFrom The start of billing period in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodFrom($periodFrom)
    {
        if (is_null($periodFrom)) {
            throw new \InvalidArgumentException('non-nullable periodFrom cannot be null');
        }
        $this->container['periodFrom'] = $periodFrom;

        return $this;
    }

    /**
     * Gets periodTo
     *
     * @return \DateTime|null
     */
    public function getPeriodTo()
    {
        return $this->container['periodTo'];
    }

    /**
     * Sets periodTo
     *
     * @param \DateTime|null $periodTo The end of billing period in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setPeriodTo($periodTo)
    {
        if (is_null($periodTo)) {
            throw new \InvalidArgumentException('non-nullable periodTo cannot be null');
        }
        $this->container['periodTo'] = $periodTo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


