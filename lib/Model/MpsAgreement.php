<?php
/**
 * MpsAgreement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * MpsAgreement Class Doc Comment
 *
 * @category Class
 * @description MobilePay Subscriptions agreement details in case of MobilePay Subscriptions
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MpsAgreement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MpsAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currencies' => 'string[]',
        'country' => 'string',
        'shopName' => 'string',
        'merchantVat' => 'string',
        'providerId' => 'string',
        'authorizationUrl' => 'string',
        'asyncOneOff' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currencies' => null,
        'country' => null,
        'shopName' => null,
        'merchantVat' => null,
        'providerId' => null,
        'authorizationUrl' => null,
        'asyncOneOff' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currencies' => false,
        'country' => false,
        'shopName' => false,
        'merchantVat' => false,
        'providerId' => false,
        'authorizationUrl' => false,
        'asyncOneOff' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currencies' => 'currencies',
        'country' => 'country',
        'shopName' => 'shop_name',
        'merchantVat' => 'merchant_vat',
        'providerId' => 'provider_id',
        'authorizationUrl' => 'authorization_url',
        'asyncOneOff' => 'async_one_off'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currencies' => 'setCurrencies',
        'country' => 'setCountry',
        'shopName' => 'setShopName',
        'merchantVat' => 'setMerchantVat',
        'providerId' => 'setProviderId',
        'authorizationUrl' => 'setAuthorizationUrl',
        'asyncOneOff' => 'setAsyncOneOff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currencies' => 'getCurrencies',
        'country' => 'getCountry',
        'shopName' => 'getShopName',
        'merchantVat' => 'getMerchantVat',
        'providerId' => 'getProviderId',
        'authorizationUrl' => 'getAuthorizationUrl',
        'asyncOneOff' => 'getAsyncOneOff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currencies', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('merchantVat', $data ?? [], null);
        $this->setIfExists('providerId', $data ?? [], null);
        $this->setIfExists('authorizationUrl', $data ?? [], null);
        $this->setIfExists('asyncOneOff', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currencies'] === null) {
            $invalidProperties[] = "'currencies' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currencies
     *
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param string[] $currencies Set of currencies supported by agreement. Each currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code.
     *
     * @return self
     */
    public function setCurrencies($currencies)
    {
        if (is_null($currencies)) {
            throw new \InvalidArgumentException('non-nullable currencies cannot be null');
        }


        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName shopName
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets merchantVat
     *
     * @return string|null
     */
    public function getMerchantVat()
    {
        return $this->container['merchantVat'];
    }

    /**
     * Sets merchantVat
     *
     * @param string|null $merchantVat merchantVat
     *
     * @return self
     */
    public function setMerchantVat($merchantVat)
    {
        if (is_null($merchantVat)) {
            throw new \InvalidArgumentException('non-nullable merchantVat cannot be null');
        }
        $this->container['merchantVat'] = $merchantVat;

        return $this;
    }

    /**
     * Gets providerId
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['providerId'];
    }

    /**
     * Sets providerId
     *
     * @param string|null $providerId providerId
     *
     * @return self
     */
    public function setProviderId($providerId)
    {
        if (is_null($providerId)) {
            throw new \InvalidArgumentException('non-nullable providerId cannot be null');
        }
        $this->container['providerId'] = $providerId;

        return $this;
    }

    /**
     * Gets authorizationUrl
     *
     * @return string|null
     */
    public function getAuthorizationUrl()
    {
        return $this->container['authorizationUrl'];
    }

    /**
     * Sets authorizationUrl
     *
     * @param string|null $authorizationUrl authorizationUrl
     *
     * @return self
     */
    public function setAuthorizationUrl($authorizationUrl)
    {
        if (is_null($authorizationUrl)) {
            throw new \InvalidArgumentException('non-nullable authorizationUrl cannot be null');
        }
        $this->container['authorizationUrl'] = $authorizationUrl;

        return $this;
    }

    /**
     * Gets asyncOneOff
     *
     * @return bool|null
     */
    public function getAsyncOneOff()
    {
        return $this->container['asyncOneOff'];
    }

    /**
     * Sets asyncOneOff
     *
     * @param bool|null $asyncOneOff asyncOneOff
     *
     * @return self
     */
    public function setAsyncOneOff($asyncOneOff)
    {
        if (is_null($asyncOneOff)) {
            throw new \InvalidArgumentException('non-nullable asyncOneOff cannot be null');
        }
        $this->container['asyncOneOff'] = $asyncOneOff;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


