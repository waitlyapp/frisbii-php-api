<?php
/**
 * AccountFundingInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * AccountFundingInformation Class Doc Comment
 *
 * @category Class
 * @description Optional sender information required for Account Funding Transaction (AFT). If not provided when requesting account funding transaction with &#x60;account_funding&#x3D;true&#x60;, information will be gathered from invoice billing address and customer.
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountFundingInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountFundingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'senderAccountNumber' => 'string',
        'senderReference' => 'string',
        'senderFirstName' => 'string',
        'senderLastName' => 'string',
        'senderAddress' => 'string',
        'senderCity' => 'string',
        'senderPostalCode' => 'string',
        'senderState' => 'string',
        'senderCountry' => 'string',
        'senderDateOfBirth' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'senderAccountNumber' => null,
        'senderReference' => null,
        'senderFirstName' => null,
        'senderLastName' => null,
        'senderAddress' => null,
        'senderCity' => null,
        'senderPostalCode' => null,
        'senderState' => null,
        'senderCountry' => null,
        'senderDateOfBirth' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'senderAccountNumber' => false,
        'senderReference' => false,
        'senderFirstName' => false,
        'senderLastName' => false,
        'senderAddress' => false,
        'senderCity' => false,
        'senderPostalCode' => false,
        'senderState' => false,
        'senderCountry' => false,
        'senderDateOfBirth' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'senderAccountNumber' => 'sender_account_number',
        'senderReference' => 'sender_reference',
        'senderFirstName' => 'sender_first_name',
        'senderLastName' => 'sender_last_name',
        'senderAddress' => 'sender_address',
        'senderCity' => 'sender_city',
        'senderPostalCode' => 'sender_postal_code',
        'senderState' => 'sender_state',
        'senderCountry' => 'sender_country',
        'senderDateOfBirth' => 'sender_date_of_birth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'senderAccountNumber' => 'setSenderAccountNumber',
        'senderReference' => 'setSenderReference',
        'senderFirstName' => 'setSenderFirstName',
        'senderLastName' => 'setSenderLastName',
        'senderAddress' => 'setSenderAddress',
        'senderCity' => 'setSenderCity',
        'senderPostalCode' => 'setSenderPostalCode',
        'senderState' => 'setSenderState',
        'senderCountry' => 'setSenderCountry',
        'senderDateOfBirth' => 'setSenderDateOfBirth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'senderAccountNumber' => 'getSenderAccountNumber',
        'senderReference' => 'getSenderReference',
        'senderFirstName' => 'getSenderFirstName',
        'senderLastName' => 'getSenderLastName',
        'senderAddress' => 'getSenderAddress',
        'senderCity' => 'getSenderCity',
        'senderPostalCode' => 'getSenderPostalCode',
        'senderState' => 'getSenderState',
        'senderCountry' => 'getSenderCountry',
        'senderDateOfBirth' => 'getSenderDateOfBirth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('senderAccountNumber', $data ?? [], null);
        $this->setIfExists('senderReference', $data ?? [], null);
        $this->setIfExists('senderFirstName', $data ?? [], null);
        $this->setIfExists('senderLastName', $data ?? [], null);
        $this->setIfExists('senderAddress', $data ?? [], null);
        $this->setIfExists('senderCity', $data ?? [], null);
        $this->setIfExists('senderPostalCode', $data ?? [], null);
        $this->setIfExists('senderState', $data ?? [], null);
        $this->setIfExists('senderCountry', $data ?? [], null);
        $this->setIfExists('senderDateOfBirth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['senderState']) && !preg_match("/[A-Z]/", $this->container['senderState'])) {
            $invalidProperties[] = "invalid value for 'senderState', must be conform to the pattern /[A-Z]/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets senderAccountNumber
     *
     * @return string|null
     */
    public function getSenderAccountNumber()
    {
        return $this->container['senderAccountNumber'];
    }

    /**
     * Sets senderAccountNumber
     *
     * @param string|null $senderAccountNumber The sender’s account number, i.e. an identification of the account being funded by the debit. It can be an IBAN, a proprietary wallet number, a prepaid PAN, etc.
     *
     * @return self
     */
    public function setSenderAccountNumber($senderAccountNumber)
    {
        if (is_null($senderAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable senderAccountNumber cannot be null');
        }
        $this->container['senderAccountNumber'] = $senderAccountNumber;

        return $this;
    }

    /**
     * Gets senderReference
     *
     * @return string|null
     */
    public function getSenderReference()
    {
        return $this->container['senderReference'];
    }

    /**
     * Sets senderReference
     *
     * @param string|null $senderReference Sender's reference number. You must be able to uniquely identify the sender using this number. Required if the merchant account’s Business Application Identifier (BAI) is Funds Disbursement (FD).
     *
     * @return self
     */
    public function setSenderReference($senderReference)
    {
        if (is_null($senderReference)) {
            throw new \InvalidArgumentException('non-nullable senderReference cannot be null');
        }
        $this->container['senderReference'] = $senderReference;

        return $this;
    }

    /**
     * Gets senderFirstName
     *
     * @return string|null
     */
    public function getSenderFirstName()
    {
        return $this->container['senderFirstName'];
    }

    /**
     * Sets senderFirstName
     *
     * @param string|null $senderFirstName Sender’s first name. Required only if 'sender_address' is provided.
     *
     * @return self
     */
    public function setSenderFirstName($senderFirstName)
    {
        if (is_null($senderFirstName)) {
            throw new \InvalidArgumentException('non-nullable senderFirstName cannot be null');
        }
        $this->container['senderFirstName'] = $senderFirstName;

        return $this;
    }

    /**
     * Gets senderLastName
     *
     * @return string|null
     */
    public function getSenderLastName()
    {
        return $this->container['senderLastName'];
    }

    /**
     * Sets senderLastName
     *
     * @param string|null $senderLastName Sender’s last name. Required only if 'sender_address' is provided.
     *
     * @return self
     */
    public function setSenderLastName($senderLastName)
    {
        if (is_null($senderLastName)) {
            throw new \InvalidArgumentException('non-nullable senderLastName cannot be null');
        }
        $this->container['senderLastName'] = $senderLastName;

        return $this;
    }

    /**
     * Gets senderAddress
     *
     * @return string|null
     */
    public function getSenderAddress()
    {
        return $this->container['senderAddress'];
    }

    /**
     * Sets senderAddress
     *
     * @param string|null $senderAddress Sender’s address (street name, house number, etc.)
     *
     * @return self
     */
    public function setSenderAddress($senderAddress)
    {
        if (is_null($senderAddress)) {
            throw new \InvalidArgumentException('non-nullable senderAddress cannot be null');
        }
        $this->container['senderAddress'] = $senderAddress;

        return $this;
    }

    /**
     * Gets senderCity
     *
     * @return string|null
     */
    public function getSenderCity()
    {
        return $this->container['senderCity'];
    }

    /**
     * Sets senderCity
     *
     * @param string|null $senderCity Sender’s city
     *
     * @return self
     */
    public function setSenderCity($senderCity)
    {
        if (is_null($senderCity)) {
            throw new \InvalidArgumentException('non-nullable senderCity cannot be null');
        }
        $this->container['senderCity'] = $senderCity;

        return $this;
    }

    /**
     * Gets senderPostalCode
     *
     * @return string|null
     */
    public function getSenderPostalCode()
    {
        return $this->container['senderPostalCode'];
    }

    /**
     * Sets senderPostalCode
     *
     * @param string|null $senderPostalCode Sender’s postal code
     *
     * @return self
     */
    public function setSenderPostalCode($senderPostalCode)
    {
        if (is_null($senderPostalCode)) {
            throw new \InvalidArgumentException('non-nullable senderPostalCode cannot be null');
        }
        $this->container['senderPostalCode'] = $senderPostalCode;

        return $this;
    }

    /**
     * Gets senderState
     *
     * @return string|null
     */
    public function getSenderState()
    {
        return $this->container['senderState'];
    }

    /**
     * Sets senderState
     *
     * @param string|null $senderState Sender’s state. Required for countries US and CA
     *
     * @return self
     */
    public function setSenderState($senderState)
    {
        if (is_null($senderState)) {
            throw new \InvalidArgumentException('non-nullable senderState cannot be null');
        }

        if ((!preg_match("/[A-Z]/", ObjectSerializer::toString($senderState)))) {
            throw new \InvalidArgumentException("invalid value for \$senderState when calling AccountFundingInformation., must conform to the pattern /[A-Z]/.");
        }

        $this->container['senderState'] = $senderState;

        return $this;
    }

    /**
     * Gets senderCountry
     *
     * @return string|null
     */
    public function getSenderCountry()
    {
        return $this->container['senderCountry'];
    }

    /**
     * Sets senderCountry
     *
     * @param string|null $senderCountry Sender’s country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return self
     */
    public function setSenderCountry($senderCountry)
    {
        if (is_null($senderCountry)) {
            throw new \InvalidArgumentException('non-nullable senderCountry cannot be null');
        }
        $this->container['senderCountry'] = $senderCountry;

        return $this;
    }

    /**
     * Gets senderDateOfBirth
     *
     * @return string|null
     */
    public function getSenderDateOfBirth()
    {
        return $this->container['senderDateOfBirth'];
    }

    /**
     * Sets senderDateOfBirth
     *
     * @param string|null $senderDateOfBirth Sender’s date of birth in format yyyy-MM-dd.
     *
     * @return self
     */
    public function setSenderDateOfBirth($senderDateOfBirth)
    {
        if (is_null($senderDateOfBirth)) {
            throw new \InvalidArgumentException('non-nullable senderDateOfBirth cannot be null');
        }
        $this->container['senderDateOfBirth'] = $senderDateOfBirth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


