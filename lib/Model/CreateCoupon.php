<?php
/**
 * CreateCoupon
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreateCoupon Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCoupon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCoupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'handle' => 'string',
        'code' => 'string',
        'discount' => 'string',
        'metadata' => 'array<string,object>',
        'allPlans' => 'bool',
        'eligiblePlans' => 'string[]',
        'maxRedemptions' => 'int',
        'validUntil' => 'string',
        'redemptionStrategy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'handle' => null,
        'code' => null,
        'discount' => null,
        'metadata' => null,
        'allPlans' => null,
        'eligiblePlans' => null,
        'maxRedemptions' => 'int32',
        'validUntil' => null,
        'redemptionStrategy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'handle' => false,
        'code' => false,
        'discount' => false,
        'metadata' => false,
        'allPlans' => false,
        'eligiblePlans' => false,
        'maxRedemptions' => false,
        'validUntil' => false,
        'redemptionStrategy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'handle' => 'handle',
        'code' => 'code',
        'discount' => 'discount',
        'metadata' => 'metadata',
        'allPlans' => 'all_plans',
        'eligiblePlans' => 'eligible_plans',
        'maxRedemptions' => 'max_redemptions',
        'validUntil' => 'valid_until',
        'redemptionStrategy' => 'redemption_strategy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'handle' => 'setHandle',
        'code' => 'setCode',
        'discount' => 'setDiscount',
        'metadata' => 'setMetadata',
        'allPlans' => 'setAllPlans',
        'eligiblePlans' => 'setEligiblePlans',
        'maxRedemptions' => 'setMaxRedemptions',
        'validUntil' => 'setValidUntil',
        'redemptionStrategy' => 'setRedemptionStrategy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'handle' => 'getHandle',
        'code' => 'getCode',
        'discount' => 'getDiscount',
        'metadata' => 'getMetadata',
        'allPlans' => 'getAllPlans',
        'eligiblePlans' => 'getEligiblePlans',
        'maxRedemptions' => 'getMaxRedemptions',
        'validUntil' => 'getValidUntil',
        'redemptionStrategy' => 'getRedemptionStrategy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REDEMPTION_STRATEGY_CUSTOMER = 'once_per_customer';
    public const REDEMPTION_STRATEGY_PLAN = 'once_per_plan';
    public const REDEMPTION_STRATEGY_SUBSCRIPTION = 'once_per_subscription';
    public const REDEMPTION_STRATEGY_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedemptionStrategyAllowableValues()
    {
        return [
            self::REDEMPTION_STRATEGY_CUSTOMER,
            self::REDEMPTION_STRATEGY_PLAN,
            self::REDEMPTION_STRATEGY_SUBSCRIPTION,
            self::REDEMPTION_STRATEGY_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('allPlans', $data ?? [], null);
        $this->setIfExists('eligiblePlans', $data ?? [], null);
        $this->setIfExists('maxRedemptions', $data ?? [], null);
        $this->setIfExists('validUntil', $data ?? [], null);
        $this->setIfExists('redemptionStrategy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ((mb_strlen($this->container['discount']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maxRedemptions']) && ($this->container['maxRedemptions'] < 1)) {
            $invalidProperties[] = "invalid value for 'maxRedemptions', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRedemptionStrategyAllowableValues();
        if (!is_null($this->container['redemptionStrategy']) && !in_array($this->container['redemptionStrategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redemptionStrategy', must be one of '%s'",
                $this->container['redemptionStrategy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal name for the coupon.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the coupon
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling CreateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The coupon code. Maximum 100 characters.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }

        if ((mb_strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CreateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount Discount to use for coupon
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }

        if ((mb_strlen($discount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount when calling CreateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata Custom metadata.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets allPlans
     *
     * @return bool|null
     */
    public function getAllPlans()
    {
        return $this->container['allPlans'];
    }

    /**
     * Sets allPlans
     *
     * @param bool|null $allPlans Whether all plans are eligible for this coupon. Defaults to false.
     *
     * @return self
     */
    public function setAllPlans($allPlans)
    {
        if (is_null($allPlans)) {
            throw new \InvalidArgumentException('non-nullable allPlans cannot be null');
        }
        $this->container['allPlans'] = $allPlans;

        return $this;
    }

    /**
     * Gets eligiblePlans
     *
     * @return string[]|null
     */
    public function getEligiblePlans()
    {
        return $this->container['eligiblePlans'];
    }

    /**
     * Sets eligiblePlans
     *
     * @param string[]|null $eligiblePlans If not all_plans are set to true, then the set of eligible plan handles must be defined.
     *
     * @return self
     */
    public function setEligiblePlans($eligiblePlans)
    {
        if (is_null($eligiblePlans)) {
            throw new \InvalidArgumentException('non-nullable eligiblePlans cannot be null');
        }


        $this->container['eligiblePlans'] = $eligiblePlans;

        return $this;
    }

    /**
     * Gets maxRedemptions
     *
     * @return int|null
     */
    public function getMaxRedemptions()
    {
        return $this->container['maxRedemptions'];
    }

    /**
     * Sets maxRedemptions
     *
     * @param int|null $maxRedemptions Optional maximum number of times this coupon can be redeemed.
     *
     * @return self
     */
    public function setMaxRedemptions($maxRedemptions)
    {
        if (is_null($maxRedemptions)) {
            throw new \InvalidArgumentException('non-nullable maxRedemptions cannot be null');
        }

        if (($maxRedemptions < 1)) {
            throw new \InvalidArgumentException('invalid value for $maxRedemptions when calling CreateCoupon., must be bigger than or equal to 1.');
        }

        $this->container['maxRedemptions'] = $maxRedemptions;

        return $this;
    }

    /**
     * Gets validUntil
     *
     * @return string|null
     */
    public function getValidUntil()
    {
        return $this->container['validUntil'];
    }

    /**
     * Sets validUntil
     *
     * @param string|null $validUntil Optional date and time until which the coupon is redeemable. Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`.
     *
     * @return self
     */
    public function setValidUntil($validUntil)
    {
        if (is_null($validUntil)) {
            throw new \InvalidArgumentException('non-nullable validUntil cannot be null');
        }
        $this->container['validUntil'] = $validUntil;

        return $this;
    }

    /**
     * Gets redemptionStrategy
     *
     * @return string|null
     */
    public function getRedemptionStrategy()
    {
        return $this->container['redemptionStrategy'];
    }

    /**
     * Sets redemptionStrategy
     *
     * @param string|null $redemptionStrategy This field determines the coupon redemption strategy for applying coupons. It accepts the following values: once_per_customer, once_per_plan, once_per_subscription. If no 'redemption strategy' value is provided, the default strategy of 'once_per_customer' will be applied.
     *
     * @return self
     */
    public function setRedemptionStrategy($redemptionStrategy)
    {
        if (is_null($redemptionStrategy)) {
            throw new \InvalidArgumentException('non-nullable redemptionStrategy cannot be null');
        }
        $allowedValues = $this->getRedemptionStrategyAllowableValues();
        if (!in_array($redemptionStrategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redemptionStrategy', must be one of '%s'",
                    $redemptionStrategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redemptionStrategy'] = $redemptionStrategy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


