<?php
/**
 * PaymentMethodV2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * PaymentMethodV2 Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentMethodV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethodV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'state' => 'string',
        'customer' => 'string',
        'created' => '\DateTime',
        'paymentType' => 'string',
        'reference' => 'string',
        'failed' => '\DateTime',
        'card' => '\Frisbii\Model\CardV2',
        'applepay' => '\Frisbii\Model\CardV2',
        'mpsSubscription' => '\Frisbii\Model\MpsSubscriptionV2',
        'vippsRecurringMandate' => 'object',
        'sepaMandate' => '\Frisbii\Model\SepaMandate',
        'twintMandate' => 'object',
        'offlineMandate' => '\Frisbii\Model\OfflineMandate',
        'paypalMandate' => 'object',
        'sepaEbicsMandate' => '\Frisbii\Model\SepaEbicsMandate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'customer' => null,
        'created' => 'date-time',
        'paymentType' => null,
        'reference' => null,
        'failed' => 'date-time',
        'card' => null,
        'applepay' => null,
        'mpsSubscription' => null,
        'vippsRecurringMandate' => null,
        'sepaMandate' => null,
        'twintMandate' => null,
        'offlineMandate' => null,
        'paypalMandate' => null,
        'sepaEbicsMandate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'state' => false,
        'customer' => false,
        'created' => false,
        'paymentType' => false,
        'reference' => false,
        'failed' => false,
        'card' => false,
        'applepay' => false,
        'mpsSubscription' => false,
        'vippsRecurringMandate' => false,
        'sepaMandate' => false,
        'twintMandate' => false,
        'offlineMandate' => false,
        'paypalMandate' => false,
        'sepaEbicsMandate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'customer' => 'customer',
        'created' => 'created',
        'paymentType' => 'payment_type',
        'reference' => 'reference',
        'failed' => 'failed',
        'card' => 'card',
        'applepay' => 'applepay',
        'mpsSubscription' => 'mps_subscription',
        'vippsRecurringMandate' => 'vipps_recurring_mandate',
        'sepaMandate' => 'sepa_mandate',
        'twintMandate' => 'twint_mandate',
        'offlineMandate' => 'offline_mandate',
        'paypalMandate' => 'paypal_mandate',
        'sepaEbicsMandate' => 'sepa_ebics_mandate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'customer' => 'setCustomer',
        'created' => 'setCreated',
        'paymentType' => 'setPaymentType',
        'reference' => 'setReference',
        'failed' => 'setFailed',
        'card' => 'setCard',
        'applepay' => 'setApplepay',
        'mpsSubscription' => 'setMpsSubscription',
        'vippsRecurringMandate' => 'setVippsRecurringMandate',
        'sepaMandate' => 'setSepaMandate',
        'twintMandate' => 'setTwintMandate',
        'offlineMandate' => 'setOfflineMandate',
        'paypalMandate' => 'setPaypalMandate',
        'sepaEbicsMandate' => 'setSepaEbicsMandate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'customer' => 'getCustomer',
        'created' => 'getCreated',
        'paymentType' => 'getPaymentType',
        'reference' => 'getReference',
        'failed' => 'getFailed',
        'card' => 'getCard',
        'applepay' => 'getApplepay',
        'mpsSubscription' => 'getMpsSubscription',
        'vippsRecurringMandate' => 'getVippsRecurringMandate',
        'sepaMandate' => 'getSepaMandate',
        'twintMandate' => 'getTwintMandate',
        'offlineMandate' => 'getOfflineMandate',
        'paypalMandate' => 'getPaypalMandate',
        'sepaEbicsMandate' => 'getSepaEbicsMandate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_INACTIVATED = 'inactivated';
    public const STATE_FAILED = 'failed';
    public const STATE_PENDING = 'pending';
    public const STATE_DELETED = 'deleted';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const PAYMENT_TYPE_CARD = 'card';
    public const PAYMENT_TYPE_EMV_TOKEN = 'emv_token';
    public const PAYMENT_TYPE_VIPPS_RECURRING = 'vipps_recurring';
    public const PAYMENT_TYPE_APPLEPAY = 'applepay';
    public const PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    public const PAYMENT_TYPE_SEPA = 'sepa';
    public const PAYMENT_TYPE_OFFLINE_CASH = 'offline_cash';
    public const PAYMENT_TYPE_OFFLINE_BANK_TRANSFER = 'offline_bank_transfer';
    public const PAYMENT_TYPE_OFFLINE_OTHER = 'offline_other';
    public const PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INACTIVATED,
            self::STATE_FAILED,
            self::STATE_PENDING,
            self::STATE_DELETED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_CARD,
            self::PAYMENT_TYPE_EMV_TOKEN,
            self::PAYMENT_TYPE_VIPPS_RECURRING,
            self::PAYMENT_TYPE_APPLEPAY,
            self::PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::PAYMENT_TYPE_SEPA,
            self::PAYMENT_TYPE_OFFLINE_CASH,
            self::PAYMENT_TYPE_OFFLINE_BANK_TRANSFER,
            self::PAYMENT_TYPE_OFFLINE_OTHER,
            self::PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('applepay', $data ?? [], null);
        $this->setIfExists('mpsSubscription', $data ?? [], null);
        $this->setIfExists('vippsRecurringMandate', $data ?? [], null);
        $this->setIfExists('sepaMandate', $data ?? [], null);
        $this->setIfExists('twintMandate', $data ?? [], null);
        $this->setIfExists('offlineMandate', $data ?? [], null);
        $this->setIfExists('paypalMandate', $data ?? [], null);
        $this->setIfExists('sepaEbicsMandate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ((mb_strlen($this->container['customer']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['paymentType'] === null) {
            $invalidProperties[] = "'paymentType' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['paymentType']) && !in_array($this->container['paymentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentType', must be one of '%s'",
                $this->container['paymentType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id for payment method
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentMethodV2., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the payment method: `active`, `inactivated`, `failed`, `pending` or `deleted`
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling PaymentMethodV2., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer by handle
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }

        if ((mb_strlen($customer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling PaymentMethodV2., must be bigger than or equal to 1.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the payment method was created. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string $paymentType Payment type for saved payment method, either: `card`, `emv_token`, `vipps_recurring`, `applepay`, `mobilepay_subscriptions`, `sepa`, `offline_cash`, `offline_bank_transfer` or `offline_other`
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($paymentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentType', must be one of '%s'",
                    $paymentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Optional reference provided when creating the payment method. For payment methods created with Frisbii Checkout the reference will correspond to the session id for the Checkout session that created the payment method.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime|null
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime|null $failed Date when the payment method failed. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setFailed($failed)
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Frisbii\Model\CardV2|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Frisbii\Model\CardV2|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets applepay
     *
     * @return \Frisbii\Model\CardV2|null
     */
    public function getApplepay()
    {
        return $this->container['applepay'];
    }

    /**
     * Sets applepay
     *
     * @param \Frisbii\Model\CardV2|null $applepay applepay
     *
     * @return self
     */
    public function setApplepay($applepay)
    {
        if (is_null($applepay)) {
            throw new \InvalidArgumentException('non-nullable applepay cannot be null');
        }
        $this->container['applepay'] = $applepay;

        return $this;
    }

    /**
     * Gets mpsSubscription
     *
     * @return \Frisbii\Model\MpsSubscriptionV2|null
     */
    public function getMpsSubscription()
    {
        return $this->container['mpsSubscription'];
    }

    /**
     * Sets mpsSubscription
     *
     * @param \Frisbii\Model\MpsSubscriptionV2|null $mpsSubscription mpsSubscription
     *
     * @return self
     */
    public function setMpsSubscription($mpsSubscription)
    {
        if (is_null($mpsSubscription)) {
            throw new \InvalidArgumentException('non-nullable mpsSubscription cannot be null');
        }
        $this->container['mpsSubscription'] = $mpsSubscription;

        return $this;
    }

    /**
     * Gets vippsRecurringMandate
     *
     * @return object|null
     */
    public function getVippsRecurringMandate()
    {
        return $this->container['vippsRecurringMandate'];
    }

    /**
     * Sets vippsRecurringMandate
     *
     * @param object|null $vippsRecurringMandate Vipps Recurring mandate object in case of Vipps Recurring payment method
     *
     * @return self
     */
    public function setVippsRecurringMandate($vippsRecurringMandate)
    {
        if (is_null($vippsRecurringMandate)) {
            throw new \InvalidArgumentException('non-nullable vippsRecurringMandate cannot be null');
        }
        $this->container['vippsRecurringMandate'] = $vippsRecurringMandate;

        return $this;
    }

    /**
     * Gets sepaMandate
     *
     * @return \Frisbii\Model\SepaMandate|null
     */
    public function getSepaMandate()
    {
        return $this->container['sepaMandate'];
    }

    /**
     * Sets sepaMandate
     *
     * @param \Frisbii\Model\SepaMandate|null $sepaMandate sepaMandate
     *
     * @return self
     */
    public function setSepaMandate($sepaMandate)
    {
        if (is_null($sepaMandate)) {
            throw new \InvalidArgumentException('non-nullable sepaMandate cannot be null');
        }
        $this->container['sepaMandate'] = $sepaMandate;

        return $this;
    }

    /**
     * Gets twintMandate
     *
     * @return object|null
     */
    public function getTwintMandate()
    {
        return $this->container['twintMandate'];
    }

    /**
     * Sets twintMandate
     *
     * @param object|null $twintMandate Twint mandate object in case of Twint payment method
     *
     * @return self
     */
    public function setTwintMandate($twintMandate)
    {
        if (is_null($twintMandate)) {
            throw new \InvalidArgumentException('non-nullable twintMandate cannot be null');
        }
        $this->container['twintMandate'] = $twintMandate;

        return $this;
    }

    /**
     * Gets offlineMandate
     *
     * @return \Frisbii\Model\OfflineMandate|null
     */
    public function getOfflineMandate()
    {
        return $this->container['offlineMandate'];
    }

    /**
     * Sets offlineMandate
     *
     * @param \Frisbii\Model\OfflineMandate|null $offlineMandate offlineMandate
     *
     * @return self
     */
    public function setOfflineMandate($offlineMandate)
    {
        if (is_null($offlineMandate)) {
            throw new \InvalidArgumentException('non-nullable offlineMandate cannot be null');
        }
        $this->container['offlineMandate'] = $offlineMandate;

        return $this;
    }

    /**
     * Gets paypalMandate
     *
     * @return object|null
     */
    public function getPaypalMandate()
    {
        return $this->container['paypalMandate'];
    }

    /**
     * Sets paypalMandate
     *
     * @param object|null $paypalMandate PayPal mandate object in case of PayPal payment method
     *
     * @return self
     */
    public function setPaypalMandate($paypalMandate)
    {
        if (is_null($paypalMandate)) {
            throw new \InvalidArgumentException('non-nullable paypalMandate cannot be null');
        }
        $this->container['paypalMandate'] = $paypalMandate;

        return $this;
    }

    /**
     * Gets sepaEbicsMandate
     *
     * @return \Frisbii\Model\SepaEbicsMandate|null
     */
    public function getSepaEbicsMandate()
    {
        return $this->container['sepaEbicsMandate'];
    }

    /**
     * Sets sepaEbicsMandate
     *
     * @param \Frisbii\Model\SepaEbicsMandate|null $sepaEbicsMandate sepaEbicsMandate
     *
     * @return self
     */
    public function setSepaEbicsMandate($sepaEbicsMandate)
    {
        if (is_null($sepaEbicsMandate)) {
            throw new \InvalidArgumentException('non-nullable sepaEbicsMandate cannot be null');
        }
        $this->container['sepaEbicsMandate'] = $sepaEbicsMandate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


