<?php
/**
 * InvoiceCreditNote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * InvoiceCreditNote Class Doc Comment
 *
 * @category Class
 * @description Invoice credit notes
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceCreditNote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceCreditNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'invoice' => 'string',
        'amount' => 'int',
        'created' => '\DateTime',
        'currency' => 'string',
        'customer' => 'string',
        'amountVat' => 'int',
        'creditNoteLines' => '\Frisbii\Model\CreditNoteLine[]',
        'transaction' => 'string',
        'credit' => 'string',
        'subscription' => 'string',
        'amountExVat' => 'int',
        'accountingNumber' => 'string',
        'debtorId' => 'int',
        'downloadUrl' => 'string',
        'accountingCreatedDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'invoice' => null,
        'amount' => 'int32',
        'created' => 'date-time',
        'currency' => null,
        'customer' => null,
        'amountVat' => 'int32',
        'creditNoteLines' => null,
        'transaction' => null,
        'credit' => null,
        'subscription' => null,
        'amountExVat' => 'int32',
        'accountingNumber' => null,
        'debtorId' => 'int64',
        'downloadUrl' => null,
        'accountingCreatedDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'invoice' => false,
        'amount' => false,
        'created' => false,
        'currency' => false,
        'customer' => false,
        'amountVat' => false,
        'creditNoteLines' => false,
        'transaction' => false,
        'credit' => false,
        'subscription' => false,
        'amountExVat' => false,
        'accountingNumber' => false,
        'debtorId' => false,
        'downloadUrl' => false,
        'accountingCreatedDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice' => 'invoice',
        'amount' => 'amount',
        'created' => 'created',
        'currency' => 'currency',
        'customer' => 'customer',
        'amountVat' => 'amount_vat',
        'creditNoteLines' => 'credit_note_lines',
        'transaction' => 'transaction',
        'credit' => 'credit',
        'subscription' => 'subscription',
        'amountExVat' => 'amount_ex_vat',
        'accountingNumber' => 'accounting_number',
        'debtorId' => 'debtor_id',
        'downloadUrl' => 'download_url',
        'accountingCreatedDate' => 'accounting_created_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'amount' => 'setAmount',
        'created' => 'setCreated',
        'currency' => 'setCurrency',
        'customer' => 'setCustomer',
        'amountVat' => 'setAmountVat',
        'creditNoteLines' => 'setCreditNoteLines',
        'transaction' => 'setTransaction',
        'credit' => 'setCredit',
        'subscription' => 'setSubscription',
        'amountExVat' => 'setAmountExVat',
        'accountingNumber' => 'setAccountingNumber',
        'debtorId' => 'setDebtorId',
        'downloadUrl' => 'setDownloadUrl',
        'accountingCreatedDate' => 'setAccountingCreatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'amount' => 'getAmount',
        'created' => 'getCreated',
        'currency' => 'getCurrency',
        'customer' => 'getCustomer',
        'amountVat' => 'getAmountVat',
        'creditNoteLines' => 'getCreditNoteLines',
        'transaction' => 'getTransaction',
        'credit' => 'getCredit',
        'subscription' => 'getSubscription',
        'amountExVat' => 'getAmountExVat',
        'accountingNumber' => 'getAccountingNumber',
        'debtorId' => 'getDebtorId',
        'downloadUrl' => 'getDownloadUrl',
        'accountingCreatedDate' => 'getAccountingCreatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('amountVat', $data ?? [], null);
        $this->setIfExists('creditNoteLines', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('credit', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('amountExVat', $data ?? [], null);
        $this->setIfExists('accountingNumber', $data ?? [], null);
        $this->setIfExists('debtorId', $data ?? [], null);
        $this->setIfExists('downloadUrl', $data ?? [], null);
        $this->setIfExists('accountingCreatedDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ((mb_strlen($this->container['customer']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amountVat'] === null) {
            $invalidProperties[] = "'amountVat' can't be null";
        }
        if ($this->container['creditNoteLines'] === null) {
            $invalidProperties[] = "'creditNoteLines' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Credit note id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling InvoiceCreditNote., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Invoice credited by this note
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Credit note amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Creation date for note, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Credit note currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }

        if ((mb_strlen($customer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling InvoiceCreditNote., must be bigger than or equal to 1.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets amountVat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amountVat'];
    }

    /**
     * Sets amountVat
     *
     * @param int $amountVat Credit note vat amount calculated as rounded summed fractional vats for each credit note lines
     *
     * @return self
     */
    public function setAmountVat($amountVat)
    {
        if (is_null($amountVat)) {
            throw new \InvalidArgumentException('non-nullable amountVat cannot be null');
        }
        $this->container['amountVat'] = $amountVat;

        return $this;
    }

    /**
     * Gets creditNoteLines
     *
     * @return \Frisbii\Model\CreditNoteLine[]
     */
    public function getCreditNoteLines()
    {
        return $this->container['creditNoteLines'];
    }

    /**
     * Sets creditNoteLines
     *
     * @param \Frisbii\Model\CreditNoteLine[] $creditNoteLines Credit note lines
     *
     * @return self
     */
    public function setCreditNoteLines($creditNoteLines)
    {
        if (is_null($creditNoteLines)) {
            throw new \InvalidArgumentException('non-nullable creditNoteLines cannot be null');
        }
        $this->container['creditNoteLines'] = $creditNoteLines;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string|null $transaction Refund transaction id if credit note has an associated refund
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return string|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param string|null $credit Credit reference if the credit note relates to a subscription credit
     *
     * @return self
     */
    public function setCredit($credit)
    {
        if (is_null($credit)) {
            throw new \InvalidArgumentException('non-nullable credit cannot be null');
        }
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string|null $subscription Subscription handle, will be null for a one-time customer invoice
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets amountExVat
     *
     * @return int|null
     */
    public function getAmountExVat()
    {
        return $this->container['amountExVat'];
    }

    /**
     * Sets amountExVat
     *
     * @param int|null $amountExVat Credit note total amount excluding VAT calculated as summed amounts excl. vats for each credit note lines
     *
     * @return self
     */
    public function setAmountExVat($amountExVat)
    {
        if (is_null($amountExVat)) {
            throw new \InvalidArgumentException('non-nullable amountExVat cannot be null');
        }
        $this->container['amountExVat'] = $amountExVat;

        return $this;
    }

    /**
     * Gets accountingNumber
     *
     * @return string|null
     */
    public function getAccountingNumber()
    {
        return $this->container['accountingNumber'];
    }

    /**
     * Sets accountingNumber
     *
     * @param string|null $accountingNumber Credit note accounting number
     *
     * @return self
     */
    public function setAccountingNumber($accountingNumber)
    {
        if (is_null($accountingNumber)) {
            throw new \InvalidArgumentException('non-nullable accountingNumber cannot be null');
        }
        $this->container['accountingNumber'] = $accountingNumber;

        return $this;
    }

    /**
     * Gets debtorId
     *
     * @return int|null
     */
    public function getDebtorId()
    {
        return $this->container['debtorId'];
    }

    /**
     * Sets debtorId
     *
     * @param int|null $debtorId Customer debtor id
     *
     * @return self
     */
    public function setDebtorId($debtorId)
    {
        if (is_null($debtorId)) {
            throw new \InvalidArgumentException('non-nullable debtorId cannot be null');
        }
        $this->container['debtorId'] = $debtorId;

        return $this;
    }

    /**
     * Gets downloadUrl
     *
     * @return string|null
     */
    public function getDownloadUrl()
    {
        return $this->container['downloadUrl'];
    }

    /**
     * Sets downloadUrl
     *
     * @param string|null $downloadUrl Link to the credit note PDF, available if PDF generation and accounting features are enabled (only for subscription invoices, not charges). Access requires authentication. See https://docs.frisbii.com/reference/authentication. The response is a binary PDF file.
     *
     * @return self
     */
    public function setDownloadUrl($downloadUrl)
    {
        if (is_null($downloadUrl)) {
            throw new \InvalidArgumentException('non-nullable downloadUrl cannot be null');
        }
        $this->container['downloadUrl'] = $downloadUrl;

        return $this;
    }

    /**
     * Gets accountingCreatedDate
     *
     * @return \DateTime|null
     */
    public function getAccountingCreatedDate()
    {
        return $this->container['accountingCreatedDate'];
    }

    /**
     * Sets accountingCreatedDate
     *
     * @param \DateTime|null $accountingCreatedDate When the credit note was created. A credit note is created when a non-charging invoice is cancelled or refunded. Timestamp in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setAccountingCreatedDate($accountingCreatedDate)
    {
        if (is_null($accountingCreatedDate)) {
            throw new \InvalidArgumentException('non-nullable accountingCreatedDate cannot be null');
        }
        $this->container['accountingCreatedDate'] = $accountingCreatedDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


