<?php
/**
 * GatewayAgreement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * GatewayAgreement Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GatewayAgreement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'state' => 'string',
        'type' => 'string',
        'usage' => 'string',
        'test' => 'bool',
        'created' => '\DateTime',
        'name' => 'string',
        'cardGatewayAgreement' => '\Frisbii\Model\CardGatewayAgreement',
        'offlineAgreement' => '\Frisbii\Model\OfflineAgreement',
        'mpoAgreement' => '\Frisbii\Model\MpoAgreement',
        'vippsAgreement' => '\Frisbii\Model\VippsAgreement',
        'vippsMobilepayAgreement' => '\Frisbii\Model\VippsMobilepayAgreement',
        'vippsRecurringAgreement' => '\Frisbii\Model\VippsRecurringAgreement',
        'sepaEbicsAgreement' => '\Frisbii\Model\SepaEbicsAgreement',
        'viabillAgreement' => '\Frisbii\Model\ViabillAgreement',
        'anydayAgreement' => '\Frisbii\Model\AnydayAgreement',
        'resursAgreement' => '\Frisbii\Model\ResursAgreement',
        'klarnaAgreement' => '\Frisbii\Model\KlarnaAgreement',
        'swish' => '\Frisbii\Model\SwishAgreement',
        'applepayAgreement' => '\Frisbii\Model\ApplepayAgreement',
        'googlepayAgreement' => '\Frisbii\Model\GooglepayAgreement',
        'paypalAgreement' => '\Frisbii\Model\PaypalAgreement',
        'mpsAgreement' => '\Frisbii\Model\MpsAgreement',
        'pproAgreement' => '\Frisbii\Model\PproAgreement',
        'payeverAgreement' => '\Frisbii\Model\PayeverAgreement'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'type' => null,
        'usage' => null,
        'test' => null,
        'created' => 'date-time',
        'name' => null,
        'cardGatewayAgreement' => null,
        'offlineAgreement' => null,
        'mpoAgreement' => null,
        'vippsAgreement' => null,
        'vippsMobilepayAgreement' => null,
        'vippsRecurringAgreement' => null,
        'sepaEbicsAgreement' => null,
        'viabillAgreement' => null,
        'anydayAgreement' => null,
        'resursAgreement' => null,
        'klarnaAgreement' => null,
        'swish' => null,
        'applepayAgreement' => null,
        'googlepayAgreement' => null,
        'paypalAgreement' => null,
        'mpsAgreement' => null,
        'pproAgreement' => null,
        'payeverAgreement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'state' => false,
        'type' => false,
        'usage' => false,
        'test' => false,
        'created' => false,
        'name' => false,
        'cardGatewayAgreement' => false,
        'offlineAgreement' => false,
        'mpoAgreement' => false,
        'vippsAgreement' => false,
        'vippsMobilepayAgreement' => false,
        'vippsRecurringAgreement' => false,
        'sepaEbicsAgreement' => false,
        'viabillAgreement' => false,
        'anydayAgreement' => false,
        'resursAgreement' => false,
        'klarnaAgreement' => false,
        'swish' => false,
        'applepayAgreement' => false,
        'googlepayAgreement' => false,
        'paypalAgreement' => false,
        'mpsAgreement' => false,
        'pproAgreement' => false,
        'payeverAgreement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'type' => 'type',
        'usage' => 'usage',
        'test' => 'test',
        'created' => 'created',
        'name' => 'name',
        'cardGatewayAgreement' => 'card_gateway_agreement',
        'offlineAgreement' => 'offline_agreement',
        'mpoAgreement' => 'mpo_agreement',
        'vippsAgreement' => 'vipps_agreement',
        'vippsMobilepayAgreement' => 'vipps_mobilepay_agreement',
        'vippsRecurringAgreement' => 'vipps_recurring_agreement',
        'sepaEbicsAgreement' => 'sepa_ebics_agreement',
        'viabillAgreement' => 'viabill_agreement',
        'anydayAgreement' => 'anyday_agreement',
        'resursAgreement' => 'resurs_agreement',
        'klarnaAgreement' => 'klarna_agreement',
        'swish' => 'swish',
        'applepayAgreement' => 'applepay_agreement',
        'googlepayAgreement' => 'googlepay_agreement',
        'paypalAgreement' => 'paypal_agreement',
        'mpsAgreement' => 'mps_agreement',
        'pproAgreement' => 'ppro_agreement',
        'payeverAgreement' => 'payever_agreement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'type' => 'setType',
        'usage' => 'setUsage',
        'test' => 'setTest',
        'created' => 'setCreated',
        'name' => 'setName',
        'cardGatewayAgreement' => 'setCardGatewayAgreement',
        'offlineAgreement' => 'setOfflineAgreement',
        'mpoAgreement' => 'setMpoAgreement',
        'vippsAgreement' => 'setVippsAgreement',
        'vippsMobilepayAgreement' => 'setVippsMobilepayAgreement',
        'vippsRecurringAgreement' => 'setVippsRecurringAgreement',
        'sepaEbicsAgreement' => 'setSepaEbicsAgreement',
        'viabillAgreement' => 'setViabillAgreement',
        'anydayAgreement' => 'setAnydayAgreement',
        'resursAgreement' => 'setResursAgreement',
        'klarnaAgreement' => 'setKlarnaAgreement',
        'swish' => 'setSwish',
        'applepayAgreement' => 'setApplepayAgreement',
        'googlepayAgreement' => 'setGooglepayAgreement',
        'paypalAgreement' => 'setPaypalAgreement',
        'mpsAgreement' => 'setMpsAgreement',
        'pproAgreement' => 'setPproAgreement',
        'payeverAgreement' => 'setPayeverAgreement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'type' => 'getType',
        'usage' => 'getUsage',
        'test' => 'getTest',
        'created' => 'getCreated',
        'name' => 'getName',
        'cardGatewayAgreement' => 'getCardGatewayAgreement',
        'offlineAgreement' => 'getOfflineAgreement',
        'mpoAgreement' => 'getMpoAgreement',
        'vippsAgreement' => 'getVippsAgreement',
        'vippsMobilepayAgreement' => 'getVippsMobilepayAgreement',
        'vippsRecurringAgreement' => 'getVippsRecurringAgreement',
        'sepaEbicsAgreement' => 'getSepaEbicsAgreement',
        'viabillAgreement' => 'getViabillAgreement',
        'anydayAgreement' => 'getAnydayAgreement',
        'resursAgreement' => 'getResursAgreement',
        'klarnaAgreement' => 'getKlarnaAgreement',
        'swish' => 'getSwish',
        'applepayAgreement' => 'getApplepayAgreement',
        'googlepayAgreement' => 'getGooglepayAgreement',
        'paypalAgreement' => 'getPaypalAgreement',
        'mpsAgreement' => 'getMpsAgreement',
        'pproAgreement' => 'getPproAgreement',
        'payeverAgreement' => 'getPayeverAgreement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_DISABLED = 'disabled';
    public const STATE_PENDING = 'pending';
    public const STATE_DELETED = 'deleted';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_CREDITCARD = 'creditcard';
    public const TYPE_VIABILL = 'viabill';
    public const TYPE_ANYDAY = 'anyday';
    public const TYPE_RESURS = 'resurs';
    public const TYPE_KLARNA_PAY_NOW = 'klarna_pay_now';
    public const TYPE_KLARNA_PAY_LATER = 'klarna_pay_later';
    public const TYPE_KLARNA_SLICE_IT = 'klarna_slice_it';
    public const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'klarna_direct_bank_transfer';
    public const TYPE_KLARNA_DIRECT_DEBIT = 'klarna_direct_debit';
    public const TYPE_MOBILEPAY = 'mobilepay';
    public const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'mobilepay_subscriptions';
    public const TYPE_SANTANDER = 'santander';
    public const TYPE_APPLEPAY = 'applepay';
    public const TYPE_GOOGLEPAY = 'googlepay';
    public const TYPE_VIPPS = 'vipps';
    public const TYPE_SWISH = 'swish';
    public const TYPE_PAYPAL = 'paypal';
    public const TYPE_SEPA_EBICS = 'sepa_ebics';
    public const TYPE_PP_BANCOMATPAY = 'pp_bancomatpay';
    public const TYPE_PP_BANCONTACT = 'pp_bancontact';
    public const TYPE_PP_BLIK_OC = 'pp_blik_oc';
    public const TYPE_PP_GIROPAY = 'pp_giropay';
    public const TYPE_PP_IDEAL = 'pp_ideal';
    public const TYPE_PP_P24 = 'pp_p24';
    public const TYPE_PP_SEPA = 'pp_sepa';
    public const TYPE_PP_TRUSTLY = 'pp_trustly';
    public const TYPE_PP_VERKKOPANKKI = 'pp_verkkopankki';
    public const TYPE_PP_EPS = 'pp_eps';
    public const TYPE_PP_ESTONIA_BANKS = 'pp_estonia_banks';
    public const TYPE_PP_LATVIA_BANKS = 'pp_latvia_banks';
    public const TYPE_PP_LITHUANIA_BANKS = 'pp_lithuania_banks';
    public const TYPE_PP_MB_WAY = 'pp_mb_way';
    public const TYPE_PP_MULTIBANCO = 'pp_multibanco';
    public const TYPE_PP_MYBANK = 'pp_mybank';
    public const TYPE_PP_PAYCONIQ = 'pp_payconiq';
    public const TYPE_PP_PAYSAFECARD = 'pp_paysafecard';
    public const TYPE_PP_PAYSERA = 'pp_paysera';
    public const TYPE_PP_POSTFINANCE = 'pp_postfinance';
    public const TYPE_PP_TWINT = 'pp_twint';
    public const TYPE_PP_SATISPAY = 'pp_satispay';
    public const TYPE_PP_WECHATPAY = 'pp_wechatpay';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const USAGE_SINGLE = 'single';
    public const USAGE_REUSABLE = 'reusable';
    public const USAGE_SUBSCRIPTION = 'subscription';
    public const USAGE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DISABLED,
            self::STATE_PENDING,
            self::STATE_DELETED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDITCARD,
            self::TYPE_VIABILL,
            self::TYPE_ANYDAY,
            self::TYPE_RESURS,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_MOBILEPAY,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_SANTANDER,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_VIPPS,
            self::TYPE_SWISH,
            self::TYPE_PAYPAL,
            self::TYPE_SEPA_EBICS,
            self::TYPE_PP_BANCOMATPAY,
            self::TYPE_PP_BANCONTACT,
            self::TYPE_PP_BLIK_OC,
            self::TYPE_PP_GIROPAY,
            self::TYPE_PP_IDEAL,
            self::TYPE_PP_P24,
            self::TYPE_PP_SEPA,
            self::TYPE_PP_TRUSTLY,
            self::TYPE_PP_VERKKOPANKKI,
            self::TYPE_PP_EPS,
            self::TYPE_PP_ESTONIA_BANKS,
            self::TYPE_PP_LATVIA_BANKS,
            self::TYPE_PP_LITHUANIA_BANKS,
            self::TYPE_PP_MB_WAY,
            self::TYPE_PP_MULTIBANCO,
            self::TYPE_PP_MYBANK,
            self::TYPE_PP_PAYCONIQ,
            self::TYPE_PP_PAYSAFECARD,
            self::TYPE_PP_PAYSERA,
            self::TYPE_PP_POSTFINANCE,
            self::TYPE_PP_TWINT,
            self::TYPE_PP_SATISPAY,
            self::TYPE_PP_WECHATPAY,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageAllowableValues()
    {
        return [
            self::USAGE_SINGLE,
            self::USAGE_REUSABLE,
            self::USAGE_SUBSCRIPTION,
            self::USAGE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cardGatewayAgreement', $data ?? [], null);
        $this->setIfExists('offlineAgreement', $data ?? [], null);
        $this->setIfExists('mpoAgreement', $data ?? [], null);
        $this->setIfExists('vippsAgreement', $data ?? [], null);
        $this->setIfExists('vippsMobilepayAgreement', $data ?? [], null);
        $this->setIfExists('vippsRecurringAgreement', $data ?? [], null);
        $this->setIfExists('sepaEbicsAgreement', $data ?? [], null);
        $this->setIfExists('viabillAgreement', $data ?? [], null);
        $this->setIfExists('anydayAgreement', $data ?? [], null);
        $this->setIfExists('resursAgreement', $data ?? [], null);
        $this->setIfExists('klarnaAgreement', $data ?? [], null);
        $this->setIfExists('swish', $data ?? [], null);
        $this->setIfExists('applepayAgreement', $data ?? [], null);
        $this->setIfExists('googlepayAgreement', $data ?? [], null);
        $this->setIfExists('paypalAgreement', $data ?? [], null);
        $this->setIfExists('mpsAgreement', $data ?? [], null);
        $this->setIfExists('pproAgreement', $data ?? [], null);
        $this->setIfExists('payeverAgreement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['usage'] === null) {
            $invalidProperties[] = "'usage' can't be null";
        }
        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($this->container['usage']) && !in_array($this->container['usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'usage', must be one of '%s'",
                $this->container['usage'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['usage']) < 1)) {
            $invalidProperties[] = "invalid value for 'usage', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Agreement id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling GatewayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Agreement state: `active`, `disabled`, `pending` or `deleted`
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling GatewayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Agreement type: `card`, `viabill`, `anyday`, `resurs`, `klarna_pay_now`, `klarna_pay_later`, `klarna_slice_it`,`klarna_direct_bank_transfer`, `klarna_direct_debit`, `santander`,`mobilepay`, `mobilepay_subscriptions`, `applepay`, `googlepay`, `vipps`, `swish`, `paypal`, `pp_bancomatpay`, `pp_bancontact`, `pp_blik_oc`, `pp_giropay`, `pp_ideal`, `pp_p24`, `pp_sepa`, `pp_trustly`, `pp_verkkopankki``pp_eps`, `pp_estonia_banks`, `pp_latvia_banks`, `pp_lithuania_banks`, `pp_mb_way`, `pp_multibanco`, `pp_mybank`, `pp_payconiq`, `pp_paysafecard`, `pp_paysera`, `pp_postfinance`, `pp_satispay`, `pp_twint`, `pp_wechatpay`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling GatewayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string $usage Agreement payment type usage: `single`, `reusable`, `subscription`
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $allowedValues = $this->getUsageAllowableValues();
        if (!in_array($usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'usage', must be one of '%s'",
                    $usage,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($usage) < 1)) {
            throw new \InvalidArgumentException('invalid length for $usage when calling GatewayAgreement., must be bigger than or equal to 1.');
        }

        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test Test agreement or not
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the agreement was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Optional name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cardGatewayAgreement
     *
     * @return \Frisbii\Model\CardGatewayAgreement|null
     */
    public function getCardGatewayAgreement()
    {
        return $this->container['cardGatewayAgreement'];
    }

    /**
     * Sets cardGatewayAgreement
     *
     * @param \Frisbii\Model\CardGatewayAgreement|null $cardGatewayAgreement cardGatewayAgreement
     *
     * @return self
     */
    public function setCardGatewayAgreement($cardGatewayAgreement)
    {
        if (is_null($cardGatewayAgreement)) {
            throw new \InvalidArgumentException('non-nullable cardGatewayAgreement cannot be null');
        }
        $this->container['cardGatewayAgreement'] = $cardGatewayAgreement;

        return $this;
    }

    /**
     * Gets offlineAgreement
     *
     * @return \Frisbii\Model\OfflineAgreement|null
     */
    public function getOfflineAgreement()
    {
        return $this->container['offlineAgreement'];
    }

    /**
     * Sets offlineAgreement
     *
     * @param \Frisbii\Model\OfflineAgreement|null $offlineAgreement offlineAgreement
     *
     * @return self
     */
    public function setOfflineAgreement($offlineAgreement)
    {
        if (is_null($offlineAgreement)) {
            throw new \InvalidArgumentException('non-nullable offlineAgreement cannot be null');
        }
        $this->container['offlineAgreement'] = $offlineAgreement;

        return $this;
    }

    /**
     * Gets mpoAgreement
     *
     * @return \Frisbii\Model\MpoAgreement|null
     */
    public function getMpoAgreement()
    {
        return $this->container['mpoAgreement'];
    }

    /**
     * Sets mpoAgreement
     *
     * @param \Frisbii\Model\MpoAgreement|null $mpoAgreement mpoAgreement
     *
     * @return self
     */
    public function setMpoAgreement($mpoAgreement)
    {
        if (is_null($mpoAgreement)) {
            throw new \InvalidArgumentException('non-nullable mpoAgreement cannot be null');
        }
        $this->container['mpoAgreement'] = $mpoAgreement;

        return $this;
    }

    /**
     * Gets vippsAgreement
     *
     * @return \Frisbii\Model\VippsAgreement|null
     */
    public function getVippsAgreement()
    {
        return $this->container['vippsAgreement'];
    }

    /**
     * Sets vippsAgreement
     *
     * @param \Frisbii\Model\VippsAgreement|null $vippsAgreement vippsAgreement
     *
     * @return self
     */
    public function setVippsAgreement($vippsAgreement)
    {
        if (is_null($vippsAgreement)) {
            throw new \InvalidArgumentException('non-nullable vippsAgreement cannot be null');
        }
        $this->container['vippsAgreement'] = $vippsAgreement;

        return $this;
    }

    /**
     * Gets vippsMobilepayAgreement
     *
     * @return \Frisbii\Model\VippsMobilepayAgreement|null
     */
    public function getVippsMobilepayAgreement()
    {
        return $this->container['vippsMobilepayAgreement'];
    }

    /**
     * Sets vippsMobilepayAgreement
     *
     * @param \Frisbii\Model\VippsMobilepayAgreement|null $vippsMobilepayAgreement vippsMobilepayAgreement
     *
     * @return self
     */
    public function setVippsMobilepayAgreement($vippsMobilepayAgreement)
    {
        if (is_null($vippsMobilepayAgreement)) {
            throw new \InvalidArgumentException('non-nullable vippsMobilepayAgreement cannot be null');
        }
        $this->container['vippsMobilepayAgreement'] = $vippsMobilepayAgreement;

        return $this;
    }

    /**
     * Gets vippsRecurringAgreement
     *
     * @return \Frisbii\Model\VippsRecurringAgreement|null
     */
    public function getVippsRecurringAgreement()
    {
        return $this->container['vippsRecurringAgreement'];
    }

    /**
     * Sets vippsRecurringAgreement
     *
     * @param \Frisbii\Model\VippsRecurringAgreement|null $vippsRecurringAgreement vippsRecurringAgreement
     *
     * @return self
     */
    public function setVippsRecurringAgreement($vippsRecurringAgreement)
    {
        if (is_null($vippsRecurringAgreement)) {
            throw new \InvalidArgumentException('non-nullable vippsRecurringAgreement cannot be null');
        }
        $this->container['vippsRecurringAgreement'] = $vippsRecurringAgreement;

        return $this;
    }

    /**
     * Gets sepaEbicsAgreement
     *
     * @return \Frisbii\Model\SepaEbicsAgreement|null
     */
    public function getSepaEbicsAgreement()
    {
        return $this->container['sepaEbicsAgreement'];
    }

    /**
     * Sets sepaEbicsAgreement
     *
     * @param \Frisbii\Model\SepaEbicsAgreement|null $sepaEbicsAgreement sepaEbicsAgreement
     *
     * @return self
     */
    public function setSepaEbicsAgreement($sepaEbicsAgreement)
    {
        if (is_null($sepaEbicsAgreement)) {
            throw new \InvalidArgumentException('non-nullable sepaEbicsAgreement cannot be null');
        }
        $this->container['sepaEbicsAgreement'] = $sepaEbicsAgreement;

        return $this;
    }

    /**
     * Gets viabillAgreement
     *
     * @return \Frisbii\Model\ViabillAgreement|null
     */
    public function getViabillAgreement()
    {
        return $this->container['viabillAgreement'];
    }

    /**
     * Sets viabillAgreement
     *
     * @param \Frisbii\Model\ViabillAgreement|null $viabillAgreement viabillAgreement
     *
     * @return self
     */
    public function setViabillAgreement($viabillAgreement)
    {
        if (is_null($viabillAgreement)) {
            throw new \InvalidArgumentException('non-nullable viabillAgreement cannot be null');
        }
        $this->container['viabillAgreement'] = $viabillAgreement;

        return $this;
    }

    /**
     * Gets anydayAgreement
     *
     * @return \Frisbii\Model\AnydayAgreement|null
     */
    public function getAnydayAgreement()
    {
        return $this->container['anydayAgreement'];
    }

    /**
     * Sets anydayAgreement
     *
     * @param \Frisbii\Model\AnydayAgreement|null $anydayAgreement anydayAgreement
     *
     * @return self
     */
    public function setAnydayAgreement($anydayAgreement)
    {
        if (is_null($anydayAgreement)) {
            throw new \InvalidArgumentException('non-nullable anydayAgreement cannot be null');
        }
        $this->container['anydayAgreement'] = $anydayAgreement;

        return $this;
    }

    /**
     * Gets resursAgreement
     *
     * @return \Frisbii\Model\ResursAgreement|null
     */
    public function getResursAgreement()
    {
        return $this->container['resursAgreement'];
    }

    /**
     * Sets resursAgreement
     *
     * @param \Frisbii\Model\ResursAgreement|null $resursAgreement resursAgreement
     *
     * @return self
     */
    public function setResursAgreement($resursAgreement)
    {
        if (is_null($resursAgreement)) {
            throw new \InvalidArgumentException('non-nullable resursAgreement cannot be null');
        }
        $this->container['resursAgreement'] = $resursAgreement;

        return $this;
    }

    /**
     * Gets klarnaAgreement
     *
     * @return \Frisbii\Model\KlarnaAgreement|null
     */
    public function getKlarnaAgreement()
    {
        return $this->container['klarnaAgreement'];
    }

    /**
     * Sets klarnaAgreement
     *
     * @param \Frisbii\Model\KlarnaAgreement|null $klarnaAgreement klarnaAgreement
     *
     * @return self
     */
    public function setKlarnaAgreement($klarnaAgreement)
    {
        if (is_null($klarnaAgreement)) {
            throw new \InvalidArgumentException('non-nullable klarnaAgreement cannot be null');
        }
        $this->container['klarnaAgreement'] = $klarnaAgreement;

        return $this;
    }

    /**
     * Gets swish
     *
     * @return \Frisbii\Model\SwishAgreement|null
     */
    public function getSwish()
    {
        return $this->container['swish'];
    }

    /**
     * Sets swish
     *
     * @param \Frisbii\Model\SwishAgreement|null $swish swish
     *
     * @return self
     */
    public function setSwish($swish)
    {
        if (is_null($swish)) {
            throw new \InvalidArgumentException('non-nullable swish cannot be null');
        }
        $this->container['swish'] = $swish;

        return $this;
    }

    /**
     * Gets applepayAgreement
     *
     * @return \Frisbii\Model\ApplepayAgreement|null
     */
    public function getApplepayAgreement()
    {
        return $this->container['applepayAgreement'];
    }

    /**
     * Sets applepayAgreement
     *
     * @param \Frisbii\Model\ApplepayAgreement|null $applepayAgreement applepayAgreement
     *
     * @return self
     */
    public function setApplepayAgreement($applepayAgreement)
    {
        if (is_null($applepayAgreement)) {
            throw new \InvalidArgumentException('non-nullable applepayAgreement cannot be null');
        }
        $this->container['applepayAgreement'] = $applepayAgreement;

        return $this;
    }

    /**
     * Gets googlepayAgreement
     *
     * @return \Frisbii\Model\GooglepayAgreement|null
     */
    public function getGooglepayAgreement()
    {
        return $this->container['googlepayAgreement'];
    }

    /**
     * Sets googlepayAgreement
     *
     * @param \Frisbii\Model\GooglepayAgreement|null $googlepayAgreement googlepayAgreement
     *
     * @return self
     */
    public function setGooglepayAgreement($googlepayAgreement)
    {
        if (is_null($googlepayAgreement)) {
            throw new \InvalidArgumentException('non-nullable googlepayAgreement cannot be null');
        }
        $this->container['googlepayAgreement'] = $googlepayAgreement;

        return $this;
    }

    /**
     * Gets paypalAgreement
     *
     * @return \Frisbii\Model\PaypalAgreement|null
     */
    public function getPaypalAgreement()
    {
        return $this->container['paypalAgreement'];
    }

    /**
     * Sets paypalAgreement
     *
     * @param \Frisbii\Model\PaypalAgreement|null $paypalAgreement paypalAgreement
     *
     * @return self
     */
    public function setPaypalAgreement($paypalAgreement)
    {
        if (is_null($paypalAgreement)) {
            throw new \InvalidArgumentException('non-nullable paypalAgreement cannot be null');
        }
        $this->container['paypalAgreement'] = $paypalAgreement;

        return $this;
    }

    /**
     * Gets mpsAgreement
     *
     * @return \Frisbii\Model\MpsAgreement|null
     */
    public function getMpsAgreement()
    {
        return $this->container['mpsAgreement'];
    }

    /**
     * Sets mpsAgreement
     *
     * @param \Frisbii\Model\MpsAgreement|null $mpsAgreement mpsAgreement
     *
     * @return self
     */
    public function setMpsAgreement($mpsAgreement)
    {
        if (is_null($mpsAgreement)) {
            throw new \InvalidArgumentException('non-nullable mpsAgreement cannot be null');
        }
        $this->container['mpsAgreement'] = $mpsAgreement;

        return $this;
    }

    /**
     * Gets pproAgreement
     *
     * @return \Frisbii\Model\PproAgreement|null
     */
    public function getPproAgreement()
    {
        return $this->container['pproAgreement'];
    }

    /**
     * Sets pproAgreement
     *
     * @param \Frisbii\Model\PproAgreement|null $pproAgreement pproAgreement
     *
     * @return self
     */
    public function setPproAgreement($pproAgreement)
    {
        if (is_null($pproAgreement)) {
            throw new \InvalidArgumentException('non-nullable pproAgreement cannot be null');
        }
        $this->container['pproAgreement'] = $pproAgreement;

        return $this;
    }

    /**
     * Gets payeverAgreement
     *
     * @return \Frisbii\Model\PayeverAgreement|null
     */
    public function getPayeverAgreement()
    {
        return $this->container['payeverAgreement'];
    }

    /**
     * Sets payeverAgreement
     *
     * @param \Frisbii\Model\PayeverAgreement|null $payeverAgreement payeverAgreement
     *
     * @return self
     */
    public function setPayeverAgreement($payeverAgreement)
    {
        if (is_null($payeverAgreement)) {
            throw new \InvalidArgumentException('non-nullable payeverAgreement cannot be null');
        }
        $this->container['payeverAgreement'] = $payeverAgreement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


