<?php
/**
 * DunningPlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * DunningPlan Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DunningPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DunningPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'schedule' => 'int[]',
        'handle' => 'string',
        'state' => 'string',
        'created' => '\DateTime',
        'defaultPlan' => 'bool',
        'finalSubscriptionAction' => 'string',
        'gracePeriod' => 'string',
        'noGraceHardDecline' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'schedule' => 'int32',
        'handle' => null,
        'state' => null,
        'created' => 'date-time',
        'defaultPlan' => null,
        'finalSubscriptionAction' => null,
        'gracePeriod' => null,
        'noGraceHardDecline' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'schedule' => false,
        'handle' => false,
        'state' => false,
        'created' => false,
        'defaultPlan' => false,
        'finalSubscriptionAction' => false,
        'gracePeriod' => false,
        'noGraceHardDecline' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'schedule' => 'schedule',
        'handle' => 'handle',
        'state' => 'state',
        'created' => 'created',
        'defaultPlan' => 'default_plan',
        'finalSubscriptionAction' => 'final_subscription_action',
        'gracePeriod' => 'grace_period',
        'noGraceHardDecline' => 'no_grace_hard_decline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'schedule' => 'setSchedule',
        'handle' => 'setHandle',
        'state' => 'setState',
        'created' => 'setCreated',
        'defaultPlan' => 'setDefaultPlan',
        'finalSubscriptionAction' => 'setFinalSubscriptionAction',
        'gracePeriod' => 'setGracePeriod',
        'noGraceHardDecline' => 'setNoGraceHardDecline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'schedule' => 'getSchedule',
        'handle' => 'getHandle',
        'state' => 'getState',
        'created' => 'getCreated',
        'defaultPlan' => 'getDefaultPlan',
        'finalSubscriptionAction' => 'getFinalSubscriptionAction',
        'gracePeriod' => 'getGracePeriod',
        'noGraceHardDecline' => 'getNoGraceHardDecline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_DELETED = 'deleted';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const FINAL_SUBSCRIPTION_ACTION_EXPIRE = 'expire';
    public const FINAL_SUBSCRIPTION_ACTION_ON_HOLD = 'on_hold';
    public const FINAL_SUBSCRIPTION_ACTION_NONE = 'none';
    public const FINAL_SUBSCRIPTION_ACTION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinalSubscriptionActionAllowableValues()
    {
        return [
            self::FINAL_SUBSCRIPTION_ACTION_EXPIRE,
            self::FINAL_SUBSCRIPTION_ACTION_ON_HOLD,
            self::FINAL_SUBSCRIPTION_ACTION_NONE,
            self::FINAL_SUBSCRIPTION_ACTION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('defaultPlan', $data ?? [], null);
        $this->setIfExists('finalSubscriptionAction', $data ?? [], null);
        $this->setIfExists('gracePeriod', $data ?? [], null);
        $this->setIfExists('noGraceHardDecline', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['schedule'] === null) {
            $invalidProperties[] = "'schedule' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['defaultPlan'] === null) {
            $invalidProperties[] = "'defaultPlan' can't be null";
        }
        if ($this->container['finalSubscriptionAction'] === null) {
            $invalidProperties[] = "'finalSubscriptionAction' can't be null";
        }
        $allowedValues = $this->getFinalSubscriptionActionAllowableValues();
        if (!is_null($this->container['finalSubscriptionAction']) && !in_array($this->container['finalSubscriptionAction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'finalSubscriptionAction', must be one of '%s'",
                $this->container['finalSubscriptionAction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Dunning plan name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling DunningPlan., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return int[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param int[] $schedule The schedule as list of intervals in days
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the dunning plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling DunningPlan., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of dunning plan, one of the following: `active`, `deleted`.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling DunningPlan., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets defaultPlan
     *
     * @return bool
     */
    public function getDefaultPlan()
    {
        return $this->container['defaultPlan'];
    }

    /**
     * Sets defaultPlan
     *
     * @param bool $defaultPlan If this is default plan
     *
     * @return self
     */
    public function setDefaultPlan($defaultPlan)
    {
        if (is_null($defaultPlan)) {
            throw new \InvalidArgumentException('non-nullable defaultPlan cannot be null');
        }
        $this->container['defaultPlan'] = $defaultPlan;

        return $this;
    }

    /**
     * Gets finalSubscriptionAction
     *
     * @return string
     */
    public function getFinalSubscriptionAction()
    {
        return $this->container['finalSubscriptionAction'];
    }

    /**
     * Sets finalSubscriptionAction
     *
     * @param string $finalSubscriptionAction Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`
     *
     * @return self
     */
    public function setFinalSubscriptionAction($finalSubscriptionAction)
    {
        if (is_null($finalSubscriptionAction)) {
            throw new \InvalidArgumentException('non-nullable finalSubscriptionAction cannot be null');
        }
        $allowedValues = $this->getFinalSubscriptionActionAllowableValues();
        if (!in_array($finalSubscriptionAction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'finalSubscriptionAction', must be one of '%s'",
                    $finalSubscriptionAction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['finalSubscriptionAction'] = $finalSubscriptionAction;

        return $this;
    }

    /**
     * Gets gracePeriod
     *
     * @return string|null
     */
    public function getGracePeriod()
    {
        return $this->container['gracePeriod'];
    }

    /**
     * Sets gracePeriod
     *
     * @param string|null $gracePeriod Optional grace period before starting dunning process. Also see `no_grace_hard_decline`. If eligible re-trying will be attempted in the grace period. The period is defined as an ISO-8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations
     *
     * @return self
     */
    public function setGracePeriod($gracePeriod)
    {
        if (is_null($gracePeriod)) {
            throw new \InvalidArgumentException('non-nullable gracePeriod cannot be null');
        }
        $this->container['gracePeriod'] = $gracePeriod;

        return $this;
    }

    /**
     * Gets noGraceHardDecline
     *
     * @return bool|null
     */
    public function getNoGraceHardDecline()
    {
        return $this->container['noGraceHardDecline'];
    }

    /**
     * Sets noGraceHardDecline
     *
     * @param bool|null $noGraceHardDecline If a grace period has been defined, this parameter can be used to control whether the grace period is only for soft failing invoices. That is, the used payment method is actually eligible for retrying. Default is true.
     *
     * @return self
     */
    public function setNoGraceHardDecline($noGraceHardDecline)
    {
        if (is_null($noGraceHardDecline)) {
            throw new \InvalidArgumentException('non-nullable noGraceHardDecline cannot be null');
        }
        $this->container['noGraceHardDecline'] = $noGraceHardDecline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


