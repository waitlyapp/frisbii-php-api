<?php
/**
 * CreateSubscription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * CreateSubscription Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSubscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plan' => 'string',
        'signupMethod' => 'string',
        'customer' => 'string',
        'amount' => 'int',
        'quantity' => 'int',
        'test' => 'bool',
        'handle' => 'string',
        'metadata' => 'array<string,object>',
        'source' => 'string',
        'createCustomer' => '\Frisbii\Model\CreateCustomer',
        'planVersion' => 'int',
        'amountInclVat' => 'bool',
        'generateHandle' => 'bool',
        'startDate' => 'string',
        'endDate' => 'string',
        'graceDuration' => 'int',
        'noTrial' => 'bool',
        'noSetupFee' => 'bool',
        'trialPeriod' => 'string',
        'subscriptionDiscounts' => '\Frisbii\Model\CreateSubscriptionDiscount[]',
        'couponCodes' => 'string[]',
        'addOns' => '\Frisbii\Model\CreateSubscriptionAddOn[]',
        'additionalCosts' => '\Frisbii\Model\CreateSubscriptionAdditionalCost[]',
        'additionalEntitlements' => 'string[]',
        'excludedEntitlements' => 'string[]',
        'meteredBillingProducts' => '\Frisbii\Model\CreateSubscriptionMeteredBillingProduct[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'plan' => null,
        'signupMethod' => null,
        'customer' => null,
        'amount' => 'int32',
        'quantity' => 'int32',
        'test' => null,
        'handle' => null,
        'metadata' => null,
        'source' => null,
        'createCustomer' => null,
        'planVersion' => 'int32',
        'amountInclVat' => null,
        'generateHandle' => null,
        'startDate' => null,
        'endDate' => null,
        'graceDuration' => 'int64',
        'noTrial' => null,
        'noSetupFee' => null,
        'trialPeriod' => null,
        'subscriptionDiscounts' => null,
        'couponCodes' => null,
        'addOns' => null,
        'additionalCosts' => null,
        'additionalEntitlements' => null,
        'excludedEntitlements' => null,
        'meteredBillingProducts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'plan' => false,
        'signupMethod' => false,
        'customer' => false,
        'amount' => false,
        'quantity' => false,
        'test' => false,
        'handle' => false,
        'metadata' => false,
        'source' => false,
        'createCustomer' => false,
        'planVersion' => false,
        'amountInclVat' => false,
        'generateHandle' => false,
        'startDate' => false,
        'endDate' => false,
        'graceDuration' => false,
        'noTrial' => false,
        'noSetupFee' => false,
        'trialPeriod' => false,
        'subscriptionDiscounts' => false,
        'couponCodes' => false,
        'addOns' => false,
        'additionalCosts' => false,
        'additionalEntitlements' => false,
        'excludedEntitlements' => false,
        'meteredBillingProducts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan' => 'plan',
        'signupMethod' => 'signup_method',
        'customer' => 'customer',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'test' => 'test',
        'handle' => 'handle',
        'metadata' => 'metadata',
        'source' => 'source',
        'createCustomer' => 'create_customer',
        'planVersion' => 'plan_version',
        'amountInclVat' => 'amount_incl_vat',
        'generateHandle' => 'generate_handle',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'graceDuration' => 'grace_duration',
        'noTrial' => 'no_trial',
        'noSetupFee' => 'no_setup_fee',
        'trialPeriod' => 'trial_period',
        'subscriptionDiscounts' => 'subscription_discounts',
        'couponCodes' => 'coupon_codes',
        'addOns' => 'add_ons',
        'additionalCosts' => 'additional_costs',
        'additionalEntitlements' => 'additional_entitlements',
        'excludedEntitlements' => 'excluded_entitlements',
        'meteredBillingProducts' => 'metered_billing_products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan' => 'setPlan',
        'signupMethod' => 'setSignupMethod',
        'customer' => 'setCustomer',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'test' => 'setTest',
        'handle' => 'setHandle',
        'metadata' => 'setMetadata',
        'source' => 'setSource',
        'createCustomer' => 'setCreateCustomer',
        'planVersion' => 'setPlanVersion',
        'amountInclVat' => 'setAmountInclVat',
        'generateHandle' => 'setGenerateHandle',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'graceDuration' => 'setGraceDuration',
        'noTrial' => 'setNoTrial',
        'noSetupFee' => 'setNoSetupFee',
        'trialPeriod' => 'setTrialPeriod',
        'subscriptionDiscounts' => 'setSubscriptionDiscounts',
        'couponCodes' => 'setCouponCodes',
        'addOns' => 'setAddOns',
        'additionalCosts' => 'setAdditionalCosts',
        'additionalEntitlements' => 'setAdditionalEntitlements',
        'excludedEntitlements' => 'setExcludedEntitlements',
        'meteredBillingProducts' => 'setMeteredBillingProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan' => 'getPlan',
        'signupMethod' => 'getSignupMethod',
        'customer' => 'getCustomer',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'test' => 'getTest',
        'handle' => 'getHandle',
        'metadata' => 'getMetadata',
        'source' => 'getSource',
        'createCustomer' => 'getCreateCustomer',
        'planVersion' => 'getPlanVersion',
        'amountInclVat' => 'getAmountInclVat',
        'generateHandle' => 'getGenerateHandle',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'graceDuration' => 'getGraceDuration',
        'noTrial' => 'getNoTrial',
        'noSetupFee' => 'getNoSetupFee',
        'trialPeriod' => 'getTrialPeriod',
        'subscriptionDiscounts' => 'getSubscriptionDiscounts',
        'couponCodes' => 'getCouponCodes',
        'addOns' => 'getAddOns',
        'additionalCosts' => 'getAdditionalCosts',
        'additionalEntitlements' => 'getAdditionalEntitlements',
        'excludedEntitlements' => 'getExcludedEntitlements',
        'meteredBillingProducts' => 'getMeteredBillingProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('signupMethod', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('createCustomer', $data ?? [], null);
        $this->setIfExists('planVersion', $data ?? [], null);
        $this->setIfExists('amountInclVat', $data ?? [], null);
        $this->setIfExists('generateHandle', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('graceDuration', $data ?? [], null);
        $this->setIfExists('noTrial', $data ?? [], null);
        $this->setIfExists('noSetupFee', $data ?? [], null);
        $this->setIfExists('trialPeriod', $data ?? [], null);
        $this->setIfExists('subscriptionDiscounts', $data ?? [], null);
        $this->setIfExists('couponCodes', $data ?? [], null);
        $this->setIfExists('addOns', $data ?? [], null);
        $this->setIfExists('additionalCosts', $data ?? [], null);
        $this->setIfExists('additionalEntitlements', $data ?? [], null);
        $this->setIfExists('excludedEntitlements', $data ?? [], null);
        $this->setIfExists('meteredBillingProducts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        if ($this->container['signupMethod'] === null) {
            $invalidProperties[] = "'signupMethod' can't be null";
        }
        if (!is_null($this->container['amount']) && ($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['planVersion']) && ($this->container['planVersion'] < 1)) {
            $invalidProperties[] = "invalid value for 'planVersion', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['graceDuration']) && ($this->container['graceDuration'] < 0)) {
            $invalidProperties[] = "invalid value for 'graceDuration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['subscriptionDiscounts']) && (count($this->container['subscriptionDiscounts']) > 100)) {
            $invalidProperties[] = "invalid value for 'subscriptionDiscounts', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['subscriptionDiscounts']) && (count($this->container['subscriptionDiscounts']) < 0)) {
            $invalidProperties[] = "invalid value for 'subscriptionDiscounts', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['addOns']) && (count($this->container['addOns']) > 100)) {
            $invalidProperties[] = "invalid value for 'addOns', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['addOns']) && (count($this->container['addOns']) < 0)) {
            $invalidProperties[] = "invalid value for 'addOns', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['additionalCosts']) && (count($this->container['additionalCosts']) > 100)) {
            $invalidProperties[] = "invalid value for 'additionalCosts', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['additionalCosts']) && (count($this->container['additionalCosts']) < 0)) {
            $invalidProperties[] = "invalid value for 'additionalCosts', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan Plan handle
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets signupMethod
     *
     * @return string
     */
    public function getSignupMethod()
    {
        return $this->container['signupMethod'];
    }

    /**
     * Sets signupMethod
     *
     * @param string $signupMethod The signup method, how to get payment information from customer, one of the following: `source`, `email`, `link`. The `source` method takes a reference to an existing customer payment method (e.g. card `ca_..`) or a card token for `ct_...`. The method `email` will send an email to customer requesting payment information with a link to a hosted page. The method `link` does not do anything but the hosted page link in the subscription object can be provided to the customer as a link to enter payment information.
     *
     * @return self
     */
    public function setSignupMethod($signupMethod)
    {
        if (is_null($signupMethod)) {
            throw new \InvalidArgumentException('non-nullable signupMethod cannot be null');
        }
        $this->container['signupMethod'] = $signupMethod;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`.
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CreateSubscription., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool|null
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool|null $test Test flag. If given it will be verified that the account state matches the intended create state.
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string|null
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string|null $handle Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,object>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,object>|null $metadata Custom metadata.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source The payment method source if signup method `source`. Either an existing payment method for the customer, e.g. existing card id `ca_...` or a card token `ct_...`.
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets createCustomer
     *
     * @return \Frisbii\Model\CreateCustomer|null
     */
    public function getCreateCustomer()
    {
        return $this->container['createCustomer'];
    }

    /**
     * Sets createCustomer
     *
     * @param \Frisbii\Model\CreateCustomer|null $createCustomer createCustomer
     *
     * @return self
     */
    public function setCreateCustomer($createCustomer)
    {
        if (is_null($createCustomer)) {
            throw new \InvalidArgumentException('non-nullable createCustomer cannot be null');
        }
        $this->container['createCustomer'] = $createCustomer;

        return $this;
    }

    /**
     * Gets planVersion
     *
     * @return int|null
     */
    public function getPlanVersion()
    {
        return $this->container['planVersion'];
    }

    /**
     * Sets planVersion
     *
     * @param int|null $planVersion Optional plan version, default is to use newest version of plan
     *
     * @return self
     */
    public function setPlanVersion($planVersion)
    {
        if (is_null($planVersion)) {
            throw new \InvalidArgumentException('non-nullable planVersion cannot be null');
        }

        if (($planVersion < 1)) {
            throw new \InvalidArgumentException('invalid value for $planVersion when calling CreateSubscription., must be bigger than or equal to 1.');
        }

        $this->container['planVersion'] = $planVersion;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return bool|null
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param bool|null $amountInclVat Whether the optional amount is including VAT. Defaults to true.
     *
     * @return self
     */
    public function setAmountInclVat($amountInclVat)
    {
        if (is_null($amountInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountInclVat cannot be null');
        }
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets generateHandle
     *
     * @return bool|null
     */
    public function getGenerateHandle()
    {
        return $this->container['generateHandle'];
    }

    /**
     * Sets generateHandle
     *
     * @param bool|null $generateHandle Auto generate handle on the form sub-[sequence_number]
     *
     * @return self
     */
    public function setGenerateHandle($generateHandle)
    {
        if (is_null($generateHandle)) {
            throw new \InvalidArgumentException('non-nullable generateHandle cannot be null');
        }
        $this->container['generateHandle'] = $generateHandle;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string|null $startDate Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        if (is_null($startDate)) {
            throw new \InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string|null $endDate Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        if (is_null($endDate)) {
            throw new \InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets graceDuration
     *
     * @return int|null
     */
    public function getGraceDuration()
    {
        return $this->container['graceDuration'];
    }

    /**
     * Sets graceDuration
     *
     * @param int|null $graceDuration A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
     *
     * @return self
     */
    public function setGraceDuration($graceDuration)
    {
        if (is_null($graceDuration)) {
            throw new \InvalidArgumentException('non-nullable graceDuration cannot be null');
        }

        if (($graceDuration < 0)) {
            throw new \InvalidArgumentException('invalid value for $graceDuration when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['graceDuration'] = $graceDuration;

        return $this;
    }

    /**
     * Gets noTrial
     *
     * @return bool|null
     */
    public function getNoTrial()
    {
        return $this->container['noTrial'];
    }

    /**
     * Sets noTrial
     *
     * @param bool|null $noTrial Override plan trial settings and disable trial
     *
     * @return self
     */
    public function setNoTrial($noTrial)
    {
        if (is_null($noTrial)) {
            throw new \InvalidArgumentException('non-nullable noTrial cannot be null');
        }
        $this->container['noTrial'] = $noTrial;

        return $this;
    }

    /**
     * Gets noSetupFee
     *
     * @return bool|null
     */
    public function getNoSetupFee()
    {
        return $this->container['noSetupFee'];
    }

    /**
     * Sets noSetupFee
     *
     * @param bool|null $noSetupFee Override plan setup fee settings and disable fee
     *
     * @return self
     */
    public function setNoSetupFee($noSetupFee)
    {
        if (is_null($noSetupFee)) {
            throw new \InvalidArgumentException('non-nullable noSetupFee cannot be null');
        }
        $this->container['noSetupFee'] = $noSetupFee;

        return $this;
    }

    /**
     * Gets trialPeriod
     *
     * @return string|null
     */
    public function getTrialPeriod()
    {
        return $this->container['trialPeriod'];
    }

    /**
     * Sets trialPeriod
     *
     * @param string|null $trialPeriod Optional custom trial period overriding the setting on the subscription plan. Defined in ISO 8601 duration. See https://en.wikipedia.org/wiki/ISO_8601#Durations. E.g. `P7D` for seven days or `P1M` for one month.
     *
     * @return self
     */
    public function setTrialPeriod($trialPeriod)
    {
        if (is_null($trialPeriod)) {
            throw new \InvalidArgumentException('non-nullable trialPeriod cannot be null');
        }
        $this->container['trialPeriod'] = $trialPeriod;

        return $this;
    }

    /**
     * Gets subscriptionDiscounts
     *
     * @return \Frisbii\Model\CreateSubscriptionDiscount[]|null
     */
    public function getSubscriptionDiscounts()
    {
        return $this->container['subscriptionDiscounts'];
    }

    /**
     * Sets subscriptionDiscounts
     *
     * @param \Frisbii\Model\CreateSubscriptionDiscount[]|null $subscriptionDiscounts Discounts to attach to subscription. A maximum of 100 discounts is allowed.
     *
     * @return self
     */
    public function setSubscriptionDiscounts($subscriptionDiscounts)
    {
        if (is_null($subscriptionDiscounts)) {
            throw new \InvalidArgumentException('non-nullable subscriptionDiscounts cannot be null');
        }

        if ((count($subscriptionDiscounts) > 100)) {
            throw new \InvalidArgumentException('invalid value for $subscriptionDiscounts when calling CreateSubscription., number of items must be less than or equal to 100.');
        }
        if ((count($subscriptionDiscounts) < 0)) {
            throw new \InvalidArgumentException('invalid length for $subscriptionDiscounts when calling CreateSubscription., number of items must be greater than or equal to 0.');
        }
        $this->container['subscriptionDiscounts'] = $subscriptionDiscounts;

        return $this;
    }

    /**
     * Gets couponCodes
     *
     * @return string[]|null
     */
    public function getCouponCodes()
    {
        return $this->container['couponCodes'];
    }

    /**
     * Sets couponCodes
     *
     * @param string[]|null $couponCodes Coupon codes to redeem for subscription
     *
     * @return self
     */
    public function setCouponCodes($couponCodes)
    {
        if (is_null($couponCodes)) {
            throw new \InvalidArgumentException('non-nullable couponCodes cannot be null');
        }


        $this->container['couponCodes'] = $couponCodes;

        return $this;
    }

    /**
     * Gets addOns
     *
     * @return \Frisbii\Model\CreateSubscriptionAddOn[]|null
     */
    public function getAddOns()
    {
        return $this->container['addOns'];
    }

    /**
     * Sets addOns
     *
     * @param \Frisbii\Model\CreateSubscriptionAddOn[]|null $addOns Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on. A maximum of 100 add-ons is allowed.
     *
     * @return self
     */
    public function setAddOns($addOns)
    {
        if (is_null($addOns)) {
            throw new \InvalidArgumentException('non-nullable addOns cannot be null');
        }

        if ((count($addOns) > 100)) {
            throw new \InvalidArgumentException('invalid value for $addOns when calling CreateSubscription., number of items must be less than or equal to 100.');
        }
        if ((count($addOns) < 0)) {
            throw new \InvalidArgumentException('invalid length for $addOns when calling CreateSubscription., number of items must be greater than or equal to 0.');
        }
        $this->container['addOns'] = $addOns;

        return $this;
    }

    /**
     * Gets additionalCosts
     *
     * @return \Frisbii\Model\CreateSubscriptionAdditionalCost[]|null
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     *
     * @param \Frisbii\Model\CreateSubscriptionAdditionalCost[]|null $additionalCosts Additional costs to add to subscription at creation time. A maximum of 100 additional costs is allowed.
     *
     * @return self
     */
    public function setAdditionalCosts($additionalCosts)
    {
        if (is_null($additionalCosts)) {
            throw new \InvalidArgumentException('non-nullable additionalCosts cannot be null');
        }

        if ((count($additionalCosts) > 100)) {
            throw new \InvalidArgumentException('invalid value for $additionalCosts when calling CreateSubscription., number of items must be less than or equal to 100.');
        }
        if ((count($additionalCosts) < 0)) {
            throw new \InvalidArgumentException('invalid length for $additionalCosts when calling CreateSubscription., number of items must be greater than or equal to 0.');
        }
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets additionalEntitlements
     *
     * @return string[]|null
     */
    public function getAdditionalEntitlements()
    {
        return $this->container['additionalEntitlements'];
    }

    /**
     * Sets additionalEntitlements
     *
     * @param string[]|null $additionalEntitlements Additional entitlements to add to subscription at creation time.
     *
     * @return self
     */
    public function setAdditionalEntitlements($additionalEntitlements)
    {
        if (is_null($additionalEntitlements)) {
            throw new \InvalidArgumentException('non-nullable additionalEntitlements cannot be null');
        }


        $this->container['additionalEntitlements'] = $additionalEntitlements;

        return $this;
    }

    /**
     * Gets excludedEntitlements
     *
     * @return string[]|null
     */
    public function getExcludedEntitlements()
    {
        return $this->container['excludedEntitlements'];
    }

    /**
     * Sets excludedEntitlements
     *
     * @param string[]|null $excludedEntitlements Entitlements to exclude from subscription at creation time.
     *
     * @return self
     */
    public function setExcludedEntitlements($excludedEntitlements)
    {
        if (is_null($excludedEntitlements)) {
            throw new \InvalidArgumentException('non-nullable excludedEntitlements cannot be null');
        }


        $this->container['excludedEntitlements'] = $excludedEntitlements;

        return $this;
    }

    /**
     * Gets meteredBillingProducts
     *
     * @return \Frisbii\Model\CreateSubscriptionMeteredBillingProduct[]|null
     */
    public function getMeteredBillingProducts()
    {
        return $this->container['meteredBillingProducts'];
    }

    /**
     * Sets meteredBillingProducts
     *
     * @param \Frisbii\Model\CreateSubscriptionMeteredBillingProduct[]|null $meteredBillingProducts Metered billing products to attach to subscription.
     *
     * @return self
     */
    public function setMeteredBillingProducts($meteredBillingProducts)
    {
        if (is_null($meteredBillingProducts)) {
            throw new \InvalidArgumentException('non-nullable meteredBillingProducts cannot be null');
        }
        $this->container['meteredBillingProducts'] = $meteredBillingProducts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


