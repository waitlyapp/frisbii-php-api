<?php
/**
 * UpdateSubscriptionPlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * UpdateSubscriptionPlan Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateSubscriptionPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateSubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'vat' => 'float',
        'dunningPlan' => 'string',
        'taxPolicy' => 'string',
        'renewalReminderEmailDays' => 'int',
        'trialReminderEmailDays' => 'int',
        'partialPeriodHandling' => 'string',
        'includeZeroAmount' => 'bool',
        'setupFee' => 'int',
        'setupFeeText' => 'string',
        'setupFeeHandling' => 'string',
        'partialProrationDays' => 'bool',
        'fixedTrialDays' => 'bool',
        'minimumProratedAmount' => 'int',
        'accountFunding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'vat' => 'float',
        'dunningPlan' => null,
        'taxPolicy' => null,
        'renewalReminderEmailDays' => 'int32',
        'trialReminderEmailDays' => 'int32',
        'partialPeriodHandling' => null,
        'includeZeroAmount' => null,
        'setupFee' => 'int32',
        'setupFeeText' => null,
        'setupFeeHandling' => null,
        'partialProrationDays' => null,
        'fixedTrialDays' => null,
        'minimumProratedAmount' => 'int32',
        'accountFunding' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'vat' => false,
        'dunningPlan' => false,
        'taxPolicy' => false,
        'renewalReminderEmailDays' => false,
        'trialReminderEmailDays' => false,
        'partialPeriodHandling' => false,
        'includeZeroAmount' => false,
        'setupFee' => false,
        'setupFeeText' => false,
        'setupFeeHandling' => false,
        'partialProrationDays' => false,
        'fixedTrialDays' => false,
        'minimumProratedAmount' => false,
        'accountFunding' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'vat' => 'vat',
        'dunningPlan' => 'dunning_plan',
        'taxPolicy' => 'tax_policy',
        'renewalReminderEmailDays' => 'renewal_reminder_email_days',
        'trialReminderEmailDays' => 'trial_reminder_email_days',
        'partialPeriodHandling' => 'partial_period_handling',
        'includeZeroAmount' => 'include_zero_amount',
        'setupFee' => 'setup_fee',
        'setupFeeText' => 'setup_fee_text',
        'setupFeeHandling' => 'setup_fee_handling',
        'partialProrationDays' => 'partial_proration_days',
        'fixedTrialDays' => 'fixed_trial_days',
        'minimumProratedAmount' => 'minimum_prorated_amount',
        'accountFunding' => 'account_funding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'dunningPlan' => 'setDunningPlan',
        'taxPolicy' => 'setTaxPolicy',
        'renewalReminderEmailDays' => 'setRenewalReminderEmailDays',
        'trialReminderEmailDays' => 'setTrialReminderEmailDays',
        'partialPeriodHandling' => 'setPartialPeriodHandling',
        'includeZeroAmount' => 'setIncludeZeroAmount',
        'setupFee' => 'setSetupFee',
        'setupFeeText' => 'setSetupFeeText',
        'setupFeeHandling' => 'setSetupFeeHandling',
        'partialProrationDays' => 'setPartialProrationDays',
        'fixedTrialDays' => 'setFixedTrialDays',
        'minimumProratedAmount' => 'setMinimumProratedAmount',
        'accountFunding' => 'setAccountFunding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'dunningPlan' => 'getDunningPlan',
        'taxPolicy' => 'getTaxPolicy',
        'renewalReminderEmailDays' => 'getRenewalReminderEmailDays',
        'trialReminderEmailDays' => 'getTrialReminderEmailDays',
        'partialPeriodHandling' => 'getPartialPeriodHandling',
        'includeZeroAmount' => 'getIncludeZeroAmount',
        'setupFee' => 'getSetupFee',
        'setupFeeText' => 'getSetupFeeText',
        'setupFeeHandling' => 'getSetupFeeHandling',
        'partialProrationDays' => 'getPartialProrationDays',
        'fixedTrialDays' => 'getFixedTrialDays',
        'minimumProratedAmount' => 'getMinimumProratedAmount',
        'accountFunding' => 'getAccountFunding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARTIAL_PERIOD_HANDLING_BILL_FULL = 'bill_full';
    public const PARTIAL_PERIOD_HANDLING_BILL_PRORATED = 'bill_prorated';
    public const PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT = 'bill_zero_amount';
    public const PARTIAL_PERIOD_HANDLING_NO_BILL = 'no_bill';
    public const PARTIAL_PERIOD_HANDLING_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPeriodHandlingAllowableValues()
    {
        return [
            self::PARTIAL_PERIOD_HANDLING_BILL_FULL,
            self::PARTIAL_PERIOD_HANDLING_BILL_PRORATED,
            self::PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT,
            self::PARTIAL_PERIOD_HANDLING_NO_BILL,
            self::PARTIAL_PERIOD_HANDLING_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('dunningPlan', $data ?? [], null);
        $this->setIfExists('taxPolicy', $data ?? [], null);
        $this->setIfExists('renewalReminderEmailDays', $data ?? [], null);
        $this->setIfExists('trialReminderEmailDays', $data ?? [], null);
        $this->setIfExists('partialPeriodHandling', $data ?? [], null);
        $this->setIfExists('includeZeroAmount', $data ?? [], null);
        $this->setIfExists('setupFee', $data ?? [], null);
        $this->setIfExists('setupFeeText', $data ?? [], null);
        $this->setIfExists('setupFeeHandling', $data ?? [], null);
        $this->setIfExists('partialProrationDays', $data ?? [], null);
        $this->setIfExists('fixedTrialDays', $data ?? [], null);
        $this->setIfExists('minimumProratedAmount', $data ?? [], null);
        $this->setIfExists('accountFunding', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['renewalReminderEmailDays']) && ($this->container['renewalReminderEmailDays'] < 1)) {
            $invalidProperties[] = "invalid value for 'renewalReminderEmailDays', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trialReminderEmailDays']) && ($this->container['trialReminderEmailDays'] < 1)) {
            $invalidProperties[] = "invalid value for 'trialReminderEmailDays', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!is_null($this->container['partialPeriodHandling']) && !in_array($this->container['partialPeriodHandling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partialPeriodHandling', must be one of '%s'",
                $this->container['partialPeriodHandling'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['setupFee']) && ($this->container['setupFee'] < 0)) {
            $invalidProperties[] = "invalid value for 'setupFee', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['minimumProratedAmount']) && ($this->container['minimumProratedAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimumProratedAmount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the plan
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling UpdateSubscriptionPlan., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the plan
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat Optional vat for this plan. Account default is used if none given.
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets dunningPlan
     *
     * @return string|null
     */
    public function getDunningPlan()
    {
        return $this->container['dunningPlan'];
    }

    /**
     * Sets dunningPlan
     *
     * @param string|null $dunningPlan Dunning plan by handle to use for the subscription plan. Default dunning plan will be used if none given.
     *
     * @return self
     */
    public function setDunningPlan($dunningPlan)
    {
        if (is_null($dunningPlan)) {
            throw new \InvalidArgumentException('non-nullable dunningPlan cannot be null');
        }
        $this->container['dunningPlan'] = $dunningPlan;

        return $this;
    }

    /**
     * Gets taxPolicy
     *
     * @return string|null
     */
    public function getTaxPolicy()
    {
        return $this->container['taxPolicy'];
    }

    /**
     * Sets taxPolicy
     *
     * @param string|null $taxPolicy Optional tax policy handle for this plan. If vat and tax policy is given, vat will be ignored.
     *
     * @return self
     */
    public function setTaxPolicy($taxPolicy)
    {
        if (is_null($taxPolicy)) {
            throw new \InvalidArgumentException('non-nullable taxPolicy cannot be null');
        }
        $this->container['taxPolicy'] = $taxPolicy;

        return $this;
    }

    /**
     * Gets renewalReminderEmailDays
     *
     * @return int|null
     */
    public function getRenewalReminderEmailDays()
    {
        return $this->container['renewalReminderEmailDays'];
    }

    /**
     * Sets renewalReminderEmailDays
     *
     * @param int|null $renewalReminderEmailDays Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
     *
     * @return self
     */
    public function setRenewalReminderEmailDays($renewalReminderEmailDays)
    {
        if (is_null($renewalReminderEmailDays)) {
            throw new \InvalidArgumentException('non-nullable renewalReminderEmailDays cannot be null');
        }

        if (($renewalReminderEmailDays < 1)) {
            throw new \InvalidArgumentException('invalid value for $renewalReminderEmailDays when calling UpdateSubscriptionPlan., must be bigger than or equal to 1.');
        }

        $this->container['renewalReminderEmailDays'] = $renewalReminderEmailDays;

        return $this;
    }

    /**
     * Gets trialReminderEmailDays
     *
     * @return int|null
     */
    public function getTrialReminderEmailDays()
    {
        return $this->container['trialReminderEmailDays'];
    }

    /**
     * Sets trialReminderEmailDays
     *
     * @param int|null $trialReminderEmailDays Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
     *
     * @return self
     */
    public function setTrialReminderEmailDays($trialReminderEmailDays)
    {
        if (is_null($trialReminderEmailDays)) {
            throw new \InvalidArgumentException('non-nullable trialReminderEmailDays cannot be null');
        }

        if (($trialReminderEmailDays < 1)) {
            throw new \InvalidArgumentException('invalid value for $trialReminderEmailDays when calling UpdateSubscriptionPlan., must be bigger than or equal to 1.');
        }

        $this->container['trialReminderEmailDays'] = $trialReminderEmailDays;

        return $this;
    }

    /**
     * Gets partialPeriodHandling
     *
     * @return string|null
     */
    public function getPartialPeriodHandling()
    {
        return $this->container['partialPeriodHandling'];
    }

    /**
     * Sets partialPeriodHandling
     *
     * @param string|null $partialPeriodHandling How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
     *
     * @return self
     */
    public function setPartialPeriodHandling($partialPeriodHandling)
    {
        if (is_null($partialPeriodHandling)) {
            throw new \InvalidArgumentException('non-nullable partialPeriodHandling cannot be null');
        }
        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!in_array($partialPeriodHandling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partialPeriodHandling', must be one of '%s'",
                    $partialPeriodHandling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partialPeriodHandling'] = $partialPeriodHandling;

        return $this;
    }

    /**
     * Gets includeZeroAmount
     *
     * @return bool|null
     */
    public function getIncludeZeroAmount()
    {
        return $this->container['includeZeroAmount'];
    }

    /**
     * Sets includeZeroAmount
     *
     * @param bool|null $includeZeroAmount Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added.
     *
     * @return self
     */
    public function setIncludeZeroAmount($includeZeroAmount)
    {
        if (is_null($includeZeroAmount)) {
            throw new \InvalidArgumentException('non-nullable includeZeroAmount cannot be null');
        }
        $this->container['includeZeroAmount'] = $includeZeroAmount;

        return $this;
    }

    /**
     * Gets setupFee
     *
     * @return int|null
     */
    public function getSetupFee()
    {
        return $this->container['setupFee'];
    }

    /**
     * Sets setupFee
     *
     * @param int|null $setupFee Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_handling`.
     *
     * @return self
     */
    public function setSetupFee($setupFee)
    {
        if (is_null($setupFee)) {
            throw new \InvalidArgumentException('non-nullable setupFee cannot be null');
        }

        if (($setupFee < 0)) {
            throw new \InvalidArgumentException('invalid value for $setupFee when calling UpdateSubscriptionPlan., must be bigger than or equal to 0.');
        }

        $this->container['setupFee'] = $setupFee;

        return $this;
    }

    /**
     * Gets setupFeeText
     *
     * @return string|null
     */
    public function getSetupFeeText()
    {
        return $this->container['setupFeeText'];
    }

    /**
     * Sets setupFeeText
     *
     * @param string|null $setupFeeText Optional invoice order text for the setup fee that
     *
     * @return self
     */
    public function setSetupFeeText($setupFeeText)
    {
        if (is_null($setupFeeText)) {
            throw new \InvalidArgumentException('non-nullable setupFeeText cannot be null');
        }
        $this->container['setupFeeText'] = $setupFeeText;

        return $this;
    }

    /**
     * Gets setupFeeHandling
     *
     * @return string|null
     */
    public function getSetupFeeHandling()
    {
        return $this->container['setupFeeHandling'];
    }

    /**
     * Sets setupFeeHandling
     *
     * @param string|null $setupFeeHandling How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`.
     *
     * @return self
     */
    public function setSetupFeeHandling($setupFeeHandling)
    {
        if (is_null($setupFeeHandling)) {
            throw new \InvalidArgumentException('non-nullable setupFeeHandling cannot be null');
        }
        $this->container['setupFeeHandling'] = $setupFeeHandling;

        return $this;
    }

    /**
     * Gets partialProrationDays
     *
     * @return bool|null
     */
    public function getPartialProrationDays()
    {
        return $this->container['partialProrationDays'];
    }

    /**
     * Sets partialProrationDays
     *
     * @param bool|null $partialProrationDays For fixed day scheduling and prorated partial handling calculate prorated amount using whole days counting start day as a full day, or use by the minute proration calculation from start date time to the next period start. Default is true (whole days).
     *
     * @return self
     */
    public function setPartialProrationDays($partialProrationDays)
    {
        if (is_null($partialProrationDays)) {
            throw new \InvalidArgumentException('non-nullable partialProrationDays cannot be null');
        }
        $this->container['partialProrationDays'] = $partialProrationDays;

        return $this;
    }

    /**
     * Gets fixedTrialDays
     *
     * @return bool|null
     */
    public function getFixedTrialDays()
    {
        return $this->container['fixedTrialDays'];
    }

    /**
     * Sets fixedTrialDays
     *
     * @param bool|null $fixedTrialDays When using trial for fixed day scheduling use this setting to control if trial expires at midnight or the trial period is down to the minute. Default is true (trial until start of day). Trial in days can only be true if `partial_proration_days` is also set to true.
     *
     * @return self
     */
    public function setFixedTrialDays($fixedTrialDays)
    {
        if (is_null($fixedTrialDays)) {
            throw new \InvalidArgumentException('non-nullable fixedTrialDays cannot be null');
        }
        $this->container['fixedTrialDays'] = $fixedTrialDays;

        return $this;
    }

    /**
     * Gets minimumProratedAmount
     *
     * @return int|null
     */
    public function getMinimumProratedAmount()
    {
        return $this->container['minimumProratedAmount'];
    }

    /**
     * Sets minimumProratedAmount
     *
     * @param int|null $minimumProratedAmount When using prorated partial handling the prorated amount for plan and add-ons might result in very small amounts. A minimum prorated amount for plan and add-ons can be defined. If the prorated amount is below this minimum the amount will be changed to zero.
     *
     * @return self
     */
    public function setMinimumProratedAmount($minimumProratedAmount)
    {
        if (is_null($minimumProratedAmount)) {
            throw new \InvalidArgumentException('non-nullable minimumProratedAmount cannot be null');
        }

        if (($minimumProratedAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimumProratedAmount when calling UpdateSubscriptionPlan., must be bigger than or equal to 0.');
        }

        $this->container['minimumProratedAmount'] = $minimumProratedAmount;

        return $this;
    }

    /**
     * Gets accountFunding
     *
     * @return bool|null
     */
    public function getAccountFunding()
    {
        return $this->container['accountFunding'];
    }

    /**
     * Sets accountFunding
     *
     * @param bool|null $accountFunding Indicates that Account Funding Transaction (AFT) is requested.
     *
     * @return self
     */
    public function setAccountFunding($accountFunding)
    {
        if (is_null($accountFunding)) {
            throw new \InvalidArgumentException('non-nullable accountFunding cannot be null');
        }
        $this->container['accountFunding'] = $accountFunding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


