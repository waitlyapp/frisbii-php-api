<?php
/**
 * SubscriptionDiscount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * SubscriptionDiscount Class Doc Comment
 *
 * @category Class
 * @description Subscription discount released by coupon
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubscriptionDiscount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubscriptionDiscount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'handle' => 'string',
        'discount' => 'string',
        'state' => 'string',
        'created' => '\DateTime',
        'count' => 'int',
        'invoices' => 'string[]',
        'discountDto' => '\Frisbii\Model\Discount',
        'applyTo' => 'string[]',
        'fixedUsageReached' => 'bool',
        'fixedPeriodPassed' => 'bool',
        'coupon' => 'string',
        'deleted' => '\DateTime',
        'name' => 'string',
        'description' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'percentage' => 'int',
        'fixedCount' => 'int',
        'fixedPeriodUnit' => 'string',
        'fixedPeriod' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'handle' => null,
        'discount' => null,
        'state' => null,
        'created' => 'date-time',
        'count' => 'int32',
        'invoices' => null,
        'discountDto' => null,
        'applyTo' => null,
        'fixedUsageReached' => null,
        'fixedPeriodPassed' => null,
        'coupon' => null,
        'deleted' => 'date-time',
        'name' => null,
        'description' => null,
        'amount' => 'int32',
        'currency' => null,
        'percentage' => 'int32',
        'fixedCount' => 'int32',
        'fixedPeriodUnit' => null,
        'fixedPeriod' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'handle' => false,
        'discount' => false,
        'state' => false,
        'created' => false,
        'count' => false,
        'invoices' => false,
        'discountDto' => false,
        'applyTo' => false,
        'fixedUsageReached' => false,
        'fixedPeriodPassed' => false,
        'coupon' => false,
        'deleted' => false,
        'name' => false,
        'description' => false,
        'amount' => false,
        'currency' => false,
        'percentage' => false,
        'fixedCount' => false,
        'fixedPeriodUnit' => false,
        'fixedPeriod' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'handle' => 'handle',
        'discount' => 'discount',
        'state' => 'state',
        'created' => 'created',
        'count' => 'count',
        'invoices' => 'invoices',
        'discountDto' => 'discount_dto',
        'applyTo' => 'apply_to',
        'fixedUsageReached' => 'fixed_usage_reached',
        'fixedPeriodPassed' => 'fixed_period_passed',
        'coupon' => 'coupon',
        'deleted' => 'deleted',
        'name' => 'name',
        'description' => 'description',
        'amount' => 'amount',
        'currency' => 'currency',
        'percentage' => 'percentage',
        'fixedCount' => 'fixed_count',
        'fixedPeriodUnit' => 'fixed_period_unit',
        'fixedPeriod' => 'fixed_period'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'handle' => 'setHandle',
        'discount' => 'setDiscount',
        'state' => 'setState',
        'created' => 'setCreated',
        'count' => 'setCount',
        'invoices' => 'setInvoices',
        'discountDto' => 'setDiscountDto',
        'applyTo' => 'setApplyTo',
        'fixedUsageReached' => 'setFixedUsageReached',
        'fixedPeriodPassed' => 'setFixedPeriodPassed',
        'coupon' => 'setCoupon',
        'deleted' => 'setDeleted',
        'name' => 'setName',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'percentage' => 'setPercentage',
        'fixedCount' => 'setFixedCount',
        'fixedPeriodUnit' => 'setFixedPeriodUnit',
        'fixedPeriod' => 'setFixedPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'handle' => 'getHandle',
        'discount' => 'getDiscount',
        'state' => 'getState',
        'created' => 'getCreated',
        'count' => 'getCount',
        'invoices' => 'getInvoices',
        'discountDto' => 'getDiscountDto',
        'applyTo' => 'getApplyTo',
        'fixedUsageReached' => 'getFixedUsageReached',
        'fixedPeriodPassed' => 'getFixedPeriodPassed',
        'coupon' => 'getCoupon',
        'deleted' => 'getDeleted',
        'name' => 'getName',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'percentage' => 'getPercentage',
        'fixedCount' => 'getFixedCount',
        'fixedPeriodUnit' => 'getFixedPeriodUnit',
        'fixedPeriod' => 'getFixedPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_DELETED = 'deleted';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const FIXED_PERIOD_UNIT_MONTHS = 'months';
    public const FIXED_PERIOD_UNIT_DAYS = 'days';
    public const FIXED_PERIOD_UNIT_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFixedPeriodUnitAllowableValues()
    {
        return [
            self::FIXED_PERIOD_UNIT_MONTHS,
            self::FIXED_PERIOD_UNIT_DAYS,
            self::FIXED_PERIOD_UNIT_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('invoices', $data ?? [], null);
        $this->setIfExists('discountDto', $data ?? [], null);
        $this->setIfExists('applyTo', $data ?? [], null);
        $this->setIfExists('fixedUsageReached', $data ?? [], null);
        $this->setIfExists('fixedPeriodPassed', $data ?? [], null);
        $this->setIfExists('coupon', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('percentage', $data ?? [], null);
        $this->setIfExists('fixedCount', $data ?? [], null);
        $this->setIfExists('fixedPeriodUnit', $data ?? [], null);
        $this->setIfExists('fixedPeriod', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ((mb_strlen($this->container['discount']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['invoices'] === null) {
            $invalidProperties[] = "'invoices' can't be null";
        }
        if ($this->container['discountDto'] === null) {
            $invalidProperties[] = "'discountDto' can't be null";
        }
        if ($this->container['applyTo'] === null) {
            $invalidProperties[] = "'applyTo' can't be null";
        }
        if ((count($this->container['applyTo']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'applyTo', number of items must be less than or equal to 2147483647.";
        }

        if ((count($this->container['applyTo']) < 1)) {
            $invalidProperties[] = "invalid value for 'applyTo', number of items must be greater than or equal to 1.";
        }

        if ($this->container['fixedUsageReached'] === null) {
            $invalidProperties[] = "'fixedUsageReached' can't be null";
        }
        if ($this->container['fixedPeriodPassed'] === null) {
            $invalidProperties[] = "'fixedPeriodPassed' can't be null";
        }
        if (!is_null($this->container['amount']) && ($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['percentage']) && ($this->container['percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'percentage', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['percentage']) && ($this->container['percentage'] < 1)) {
            $invalidProperties[] = "invalid value for 'percentage', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fixedCount']) && ($this->container['fixedCount'] < 1)) {
            $invalidProperties[] = "invalid value for 'fixedCount', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getFixedPeriodUnitAllowableValues();
        if (!is_null($this->container['fixedPeriodUnit']) && !in_array($this->container['fixedPeriodUnit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fixedPeriodUnit', must be one of '%s'",
                $this->container['fixedPeriodUnit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fixedPeriod']) && ($this->container['fixedPeriod'] < 1)) {
            $invalidProperties[] = "invalid value for 'fixedPeriod', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per subscription unique handle for the subscription discount.
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount Discount for subscription discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }

        if ((mb_strlen($discount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Discount state `active` or `deleted`.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the discount was created. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count Number of invoices this subscription discount has been applied to
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return string[]
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param string[] $invoices List of invoices this subscription discount has been applied to
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        if (is_null($invoices)) {
            throw new \InvalidArgumentException('non-nullable invoices cannot be null');
        }
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets discountDto
     *
     * @return \Frisbii\Model\Discount
     */
    public function getDiscountDto()
    {
        return $this->container['discountDto'];
    }

    /**
     * Sets discountDto
     *
     * @param \Frisbii\Model\Discount $discountDto discountDto
     *
     * @return self
     */
    public function setDiscountDto($discountDto)
    {
        if (is_null($discountDto)) {
            throw new \InvalidArgumentException('non-nullable discountDto cannot be null');
        }
        $this->container['discountDto'] = $discountDto;

        return $this;
    }

    /**
     * Gets applyTo
     *
     * @return string[]
     */
    public function getApplyTo()
    {
        return $this->container['applyTo'];
    }

    /**
     * Sets applyTo
     *
     * @param string[] $applyTo Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on`, `ondemand` and `metered_billing_product`
     *
     * @return self
     */
    public function setApplyTo($applyTo)
    {
        if (is_null($applyTo)) {
            throw new \InvalidArgumentException('non-nullable applyTo cannot be null');
        }

        if ((count($applyTo) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $applyTo when calling SubscriptionDiscount., number of items must be less than or equal to 2147483647.');
        }
        if ((count($applyTo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $applyTo when calling SubscriptionDiscount., number of items must be greater than or equal to 1.');
        }
        $this->container['applyTo'] = $applyTo;

        return $this;
    }

    /**
     * Gets fixedUsageReached
     *
     * @return bool
     */
    public function getFixedUsageReached()
    {
        return $this->container['fixedUsageReached'];
    }

    /**
     * Sets fixedUsageReached
     *
     * @param bool $fixedUsageReached Whether fixed usage for subscription discount has been reached
     *
     * @return self
     */
    public function setFixedUsageReached($fixedUsageReached)
    {
        if (is_null($fixedUsageReached)) {
            throw new \InvalidArgumentException('non-nullable fixedUsageReached cannot be null');
        }
        $this->container['fixedUsageReached'] = $fixedUsageReached;

        return $this;
    }

    /**
     * Gets fixedPeriodPassed
     *
     * @return bool
     */
    public function getFixedPeriodPassed()
    {
        return $this->container['fixedPeriodPassed'];
    }

    /**
     * Sets fixedPeriodPassed
     *
     * @param bool $fixedPeriodPassed Whether fixed period for subscription discount has been passed
     *
     * @return self
     */
    public function setFixedPeriodPassed($fixedPeriodPassed)
    {
        if (is_null($fixedPeriodPassed)) {
            throw new \InvalidArgumentException('non-nullable fixedPeriodPassed cannot be null');
        }
        $this->container['fixedPeriodPassed'] = $fixedPeriodPassed;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return string|null
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param string|null $coupon Coupon reference if this discount was released by a coupon code
     *
     * @return self
     */
    public function setCoupon($coupon)
    {
        if (is_null($coupon)) {
            throw new \InvalidArgumentException('non-nullable coupon cannot be null');
        }
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return \DateTime|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param \DateTime|null $deleted Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Optional name overriding the discount name. If not defined the discount name will be used as order line text.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Optional description overriding the discount description. If not defined the discount description will be used.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Fixed amount discount deducted from order line amounts including VAT
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of fixed amount discount in ISO 4217 three letter alpha code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return int|null
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param int|null $percentage Percentage discount applied to each applicable order line
     *
     * @return self
     */
    public function setPercentage($percentage)
    {
        if (is_null($percentage)) {
            throw new \InvalidArgumentException('non-nullable percentage cannot be null');
        }

        if (($percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $percentage when calling SubscriptionDiscount., must be smaller than or equal to 100.');
        }
        if (($percentage < 1)) {
            throw new \InvalidArgumentException('invalid value for $percentage when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets fixedCount
     *
     * @return int|null
     */
    public function getFixedCount()
    {
        return $this->container['fixedCount'];
    }

    /**
     * Sets fixedCount
     *
     * @param int|null $fixedCount Apply discount to a fixed number of invoices
     *
     * @return self
     */
    public function setFixedCount($fixedCount)
    {
        if (is_null($fixedCount)) {
            throw new \InvalidArgumentException('non-nullable fixedCount cannot be null');
        }

        if (($fixedCount < 1)) {
            throw new \InvalidArgumentException('invalid value for $fixedCount when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['fixedCount'] = $fixedCount;

        return $this;
    }

    /**
     * Gets fixedPeriodUnit
     *
     * @return string|null
     */
    public function getFixedPeriodUnit()
    {
        return $this->container['fixedPeriodUnit'];
    }

    /**
     * Sets fixedPeriodUnit
     *
     * @param string|null $fixedPeriodUnit Time unit use for fixed valid period
     *
     * @return self
     */
    public function setFixedPeriodUnit($fixedPeriodUnit)
    {
        if (is_null($fixedPeriodUnit)) {
            throw new \InvalidArgumentException('non-nullable fixedPeriodUnit cannot be null');
        }
        $allowedValues = $this->getFixedPeriodUnitAllowableValues();
        if (!in_array($fixedPeriodUnit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fixedPeriodUnit', must be one of '%s'",
                    $fixedPeriodUnit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fixedPeriodUnit'] = $fixedPeriodUnit;

        return $this;
    }

    /**
     * Gets fixedPeriod
     *
     * @return int|null
     */
    public function getFixedPeriod()
    {
        return $this->container['fixedPeriod'];
    }

    /**
     * Sets fixedPeriod
     *
     * @param int|null $fixedPeriod Fixed period length e.g. 12 months or 14 days
     *
     * @return self
     */
    public function setFixedPeriod($fixedPeriod)
    {
        if (is_null($fixedPeriod)) {
            throw new \InvalidArgumentException('non-nullable fixedPeriod cannot be null');
        }

        if (($fixedPeriod < 1)) {
            throw new \InvalidArgumentException('invalid value for $fixedPeriod when calling SubscriptionDiscount., must be bigger than or equal to 1.');
        }

        $this->container['fixedPeriod'] = $fixedPeriod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


