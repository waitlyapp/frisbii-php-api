<?php
/**
 * Card
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @description Saved card used for transaction. Only present if a saved card was used.
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Card implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'state' => 'string',
        'customer' => 'string',
        'created' => '\DateTime',
        'gwRef' => 'string',
        'cardType' => 'string',
        'reference' => 'string',
        'failed' => '\DateTime',
        'fingerprint' => 'string',
        'reactivated' => '\DateTime',
        'transactionCardType' => 'string',
        'expDate' => 'string',
        'maskedCard' => 'string',
        'lastSuccess' => '\DateTime',
        'lastFailed' => '\DateTime',
        'firstFail' => '\DateTime',
        'errorCode' => 'string',
        'errorState' => 'string',
        'strongAuthenticationStatus' => 'string',
        'threeDSecureStatus' => 'string',
        'riskRule' => 'string',
        'cardCountry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'state' => null,
        'customer' => null,
        'created' => 'date-time',
        'gwRef' => null,
        'cardType' => null,
        'reference' => null,
        'failed' => 'date-time',
        'fingerprint' => null,
        'reactivated' => 'date-time',
        'transactionCardType' => null,
        'expDate' => null,
        'maskedCard' => null,
        'lastSuccess' => 'date-time',
        'lastFailed' => 'date-time',
        'firstFail' => 'date-time',
        'errorCode' => null,
        'errorState' => null,
        'strongAuthenticationStatus' => null,
        'threeDSecureStatus' => null,
        'riskRule' => null,
        'cardCountry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'state' => false,
        'customer' => false,
        'created' => false,
        'gwRef' => false,
        'cardType' => false,
        'reference' => false,
        'failed' => false,
        'fingerprint' => false,
        'reactivated' => false,
        'transactionCardType' => false,
        'expDate' => false,
        'maskedCard' => false,
        'lastSuccess' => false,
        'lastFailed' => false,
        'firstFail' => false,
        'errorCode' => false,
        'errorState' => false,
        'strongAuthenticationStatus' => false,
        'threeDSecureStatus' => false,
        'riskRule' => false,
        'cardCountry' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'customer' => 'customer',
        'created' => 'created',
        'gwRef' => 'gw_ref',
        'cardType' => 'card_type',
        'reference' => 'reference',
        'failed' => 'failed',
        'fingerprint' => 'fingerprint',
        'reactivated' => 'reactivated',
        'transactionCardType' => 'transaction_card_type',
        'expDate' => 'exp_date',
        'maskedCard' => 'masked_card',
        'lastSuccess' => 'last_success',
        'lastFailed' => 'last_failed',
        'firstFail' => 'first_fail',
        'errorCode' => 'error_code',
        'errorState' => 'error_state',
        'strongAuthenticationStatus' => 'strong_authentication_status',
        'threeDSecureStatus' => 'three_d_secure_status',
        'riskRule' => 'risk_rule',
        'cardCountry' => 'card_country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'customer' => 'setCustomer',
        'created' => 'setCreated',
        'gwRef' => 'setGwRef',
        'cardType' => 'setCardType',
        'reference' => 'setReference',
        'failed' => 'setFailed',
        'fingerprint' => 'setFingerprint',
        'reactivated' => 'setReactivated',
        'transactionCardType' => 'setTransactionCardType',
        'expDate' => 'setExpDate',
        'maskedCard' => 'setMaskedCard',
        'lastSuccess' => 'setLastSuccess',
        'lastFailed' => 'setLastFailed',
        'firstFail' => 'setFirstFail',
        'errorCode' => 'setErrorCode',
        'errorState' => 'setErrorState',
        'strongAuthenticationStatus' => 'setStrongAuthenticationStatus',
        'threeDSecureStatus' => 'setThreeDSecureStatus',
        'riskRule' => 'setRiskRule',
        'cardCountry' => 'setCardCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'customer' => 'getCustomer',
        'created' => 'getCreated',
        'gwRef' => 'getGwRef',
        'cardType' => 'getCardType',
        'reference' => 'getReference',
        'failed' => 'getFailed',
        'fingerprint' => 'getFingerprint',
        'reactivated' => 'getReactivated',
        'transactionCardType' => 'getTransactionCardType',
        'expDate' => 'getExpDate',
        'maskedCard' => 'getMaskedCard',
        'lastSuccess' => 'getLastSuccess',
        'lastFailed' => 'getLastFailed',
        'firstFail' => 'getFirstFail',
        'errorCode' => 'getErrorCode',
        'errorState' => 'getErrorState',
        'strongAuthenticationStatus' => 'getStrongAuthenticationStatus',
        'threeDSecureStatus' => 'getThreeDSecureStatus',
        'riskRule' => 'getRiskRule',
        'cardCountry' => 'getCardCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_INACTIVATED = 'inactivated';
    public const STATE_FAILED = 'failed';
    public const STATE_PENDING = 'pending';
    public const STATE_DELETED = 'deleted';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const CARD_TYPE_UNKNOWN = 'unknown';
    public const CARD_TYPE_VISA = 'visa';
    public const CARD_TYPE_MC = 'mc';
    public const CARD_TYPE_DANKORT = 'dankort';
    public const CARD_TYPE_VISA_DK = 'visa_dk';
    public const CARD_TYPE_FFK = 'ffk';
    public const CARD_TYPE_VISA_ELEC = 'visa_elec';
    public const CARD_TYPE_MAESTRO = 'maestro';
    public const CARD_TYPE_LASER = 'laser';
    public const CARD_TYPE_AMEX = 'amex';
    public const CARD_TYPE_DINERS = 'diners';
    public const CARD_TYPE_DISCOVER = 'discover';
    public const CARD_TYPE_JCB = 'jcb';
    public const CARD_TYPE_CHINA_UNION_PAY = 'china_union_pay';
    public const CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TRANSACTION_CARD_TYPE_UNKNOWN = 'unknown';
    public const TRANSACTION_CARD_TYPE_VISA = 'visa';
    public const TRANSACTION_CARD_TYPE_MC = 'mc';
    public const TRANSACTION_CARD_TYPE_DANKORT = 'dankort';
    public const TRANSACTION_CARD_TYPE_VISA_DK = 'visa_dk';
    public const TRANSACTION_CARD_TYPE_FFK = 'ffk';
    public const TRANSACTION_CARD_TYPE_VISA_ELEC = 'visa_elec';
    public const TRANSACTION_CARD_TYPE_MAESTRO = 'maestro';
    public const TRANSACTION_CARD_TYPE_LASER = 'laser';
    public const TRANSACTION_CARD_TYPE_AMEX = 'amex';
    public const TRANSACTION_CARD_TYPE_DINERS = 'diners';
    public const TRANSACTION_CARD_TYPE_DISCOVER = 'discover';
    public const TRANSACTION_CARD_TYPE_JCB = 'jcb';
    public const TRANSACTION_CARD_TYPE_CHINA_UNION_PAY = 'china_union_pay';
    public const TRANSACTION_CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const ERROR_STATE_PENDING = 'pending';
    public const ERROR_STATE_SOFT_DECLINED = 'soft_declined';
    public const ERROR_STATE_HARD_DECLINED = 'hard_declined';
    public const ERROR_STATE_PROCESSING_ERROR = 'processing_error';
    public const ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const STRONG_AUTHENTICATION_STATUS_THREED_SECURE = 'threed_secure';
    public const STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED = 'threed_secure_not_enrolled';
    public const STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS = 'secured_by_nets';
    public const STRONG_AUTHENTICATION_STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INACTIVATED,
            self::STATE_FAILED,
            self::STATE_PENDING,
            self::STATE_DELETED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
            self::CARD_TYPE_CHINA_UNION_PAY,
            self::CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCardTypeAllowableValues()
    {
        return [
            self::TRANSACTION_CARD_TYPE_UNKNOWN,
            self::TRANSACTION_CARD_TYPE_VISA,
            self::TRANSACTION_CARD_TYPE_MC,
            self::TRANSACTION_CARD_TYPE_DANKORT,
            self::TRANSACTION_CARD_TYPE_VISA_DK,
            self::TRANSACTION_CARD_TYPE_FFK,
            self::TRANSACTION_CARD_TYPE_VISA_ELEC,
            self::TRANSACTION_CARD_TYPE_MAESTRO,
            self::TRANSACTION_CARD_TYPE_LASER,
            self::TRANSACTION_CARD_TYPE_AMEX,
            self::TRANSACTION_CARD_TYPE_DINERS,
            self::TRANSACTION_CARD_TYPE_DISCOVER,
            self::TRANSACTION_CARD_TYPE_JCB,
            self::TRANSACTION_CARD_TYPE_CHINA_UNION_PAY,
            self::TRANSACTION_CARD_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorStateAllowableValues()
    {
        return [
            self::ERROR_STATE_PENDING,
            self::ERROR_STATE_SOFT_DECLINED,
            self::ERROR_STATE_HARD_DECLINED,
            self::ERROR_STATE_PROCESSING_ERROR,
            self::ERROR_STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrongAuthenticationStatusAllowableValues()
    {
        return [
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE,
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED,
            self::STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS,
            self::STRONG_AUTHENTICATION_STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('gwRef', $data ?? [], null);
        $this->setIfExists('cardType', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('fingerprint', $data ?? [], null);
        $this->setIfExists('reactivated', $data ?? [], null);
        $this->setIfExists('transactionCardType', $data ?? [], null);
        $this->setIfExists('expDate', $data ?? [], null);
        $this->setIfExists('maskedCard', $data ?? [], null);
        $this->setIfExists('lastSuccess', $data ?? [], null);
        $this->setIfExists('lastFailed', $data ?? [], null);
        $this->setIfExists('firstFail', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('errorState', $data ?? [], null);
        $this->setIfExists('strongAuthenticationStatus', $data ?? [], null);
        $this->setIfExists('threeDSecureStatus', $data ?? [], null);
        $this->setIfExists('riskRule', $data ?? [], null);
        $this->setIfExists('cardCountry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ((mb_strlen($this->container['customer']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['gwRef'] === null) {
            $invalidProperties[] = "'gwRef' can't be null";
        }
        if ((mb_strlen($this->container['gwRef']) < 1)) {
            $invalidProperties[] = "invalid value for 'gwRef', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cardType'] === null) {
            $invalidProperties[] = "'cardType' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['cardType']) && !in_array($this->container['cardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cardType', must be one of '%s'",
                $this->container['cardType'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['cardType']) < 1)) {
            $invalidProperties[] = "invalid value for 'cardType', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($this->container['transactionCardType']) && !in_array($this->container['transactionCardType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transactionCardType', must be one of '%s'",
                $this->container['transactionCardType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($this->container['errorState']) && !in_array($this->container['errorState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'errorState', must be one of '%s'",
                $this->container['errorState'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($this->container['strongAuthenticationStatus']) && !in_array($this->container['strongAuthenticationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strongAuthenticationStatus', must be one of '%s'",
                $this->container['strongAuthenticationStatus'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id for payment method
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the payment method: `active`, `inactivated`, `failed`, `pending` or `deleted`
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer by handle
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }

        if ((mb_strlen($customer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the payment method was created. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets gwRef
     *
     * @return string
     */
    public function getGwRef()
    {
        return $this->container['gwRef'];
    }

    /**
     * Sets gwRef
     *
     * @param string $gwRef Card gateway reference id
     *
     * @return self
     */
    public function setGwRef($gwRef)
    {
        if (is_null($gwRef)) {
            throw new \InvalidArgumentException('non-nullable gwRef cannot be null');
        }

        if ((mb_strlen($gwRef) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gwRef when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['gwRef'] = $gwRef;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string $cardType Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover`, `jcb` or `china_union_pay`
     *
     * @return self
     */
    public function setCardType($cardType)
    {
        if (is_null($cardType)) {
            throw new \InvalidArgumentException('non-nullable cardType cannot be null');
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($cardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cardType', must be one of '%s'",
                    $cardType,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($cardType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cardType when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Optional reference provided when creating the payment method. For payment methods created with Frisbii Checkout the reference will correspond to the session id for the Checkout session that created the payment method.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime|null
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime|null $failed Date when the payment method failed. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setFailed($failed)
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string|null
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string|null $fingerprint Uniquely identifies this particular card number
     *
     * @return self
     */
    public function setFingerprint($fingerprint)
    {
        if (is_null($fingerprint)) {
            throw new \InvalidArgumentException('non-nullable fingerprint cannot be null');
        }
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets reactivated
     *
     * @return \DateTime|null
     */
    public function getReactivated()
    {
        return $this->container['reactivated'];
    }

    /**
     * Sets reactivated
     *
     * @param \DateTime|null $reactivated Date and time of reactivation if the card has been reactivated from failed state. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setReactivated($reactivated)
    {
        if (is_null($reactivated)) {
            throw new \InvalidArgumentException('non-nullable reactivated cannot be null');
        }
        $this->container['reactivated'] = $reactivated;

        return $this;
    }

    /**
     * Gets transactionCardType
     *
     * @return string|null
     */
    public function getTransactionCardType()
    {
        return $this->container['transactionCardType'];
    }

    /**
     * Sets transactionCardType
     *
     * @param string|null $transactionCardType Card type used in authentication and the card type used for subsequent MIT transactions. Will differ from `card_type` if co-branded card. `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover`, `jcb` or `china_union_pay`
     *
     * @return self
     */
    public function setTransactionCardType($transactionCardType)
    {
        if (is_null($transactionCardType)) {
            throw new \InvalidArgumentException('non-nullable transactionCardType cannot be null');
        }
        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!in_array($transactionCardType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transactionCardType', must be one of '%s'",
                    $transactionCardType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionCardType'] = $transactionCardType;

        return $this;
    }

    /**
     * Gets expDate
     *
     * @return string|null
     */
    public function getExpDate()
    {
        return $this->container['expDate'];
    }

    /**
     * Sets expDate
     *
     * @param string|null $expDate Card expire date on form MM-YY
     *
     * @return self
     */
    public function setExpDate($expDate)
    {
        if (is_null($expDate)) {
            throw new \InvalidArgumentException('non-nullable expDate cannot be null');
        }
        $this->container['expDate'] = $expDate;

        return $this;
    }

    /**
     * Gets maskedCard
     *
     * @return string|null
     */
    public function getMaskedCard()
    {
        return $this->container['maskedCard'];
    }

    /**
     * Sets maskedCard
     *
     * @param string|null $maskedCard Masked card number
     *
     * @return self
     */
    public function setMaskedCard($maskedCard)
    {
        if (is_null($maskedCard)) {
            throw new \InvalidArgumentException('non-nullable maskedCard cannot be null');
        }
        $this->container['maskedCard'] = $maskedCard;

        return $this;
    }

    /**
     * Gets lastSuccess
     *
     * @return \DateTime|null
     */
    public function getLastSuccess()
    {
        return $this->container['lastSuccess'];
    }

    /**
     * Sets lastSuccess
     *
     * @param \DateTime|null $lastSuccess Date and time of last successful use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setLastSuccess($lastSuccess)
    {
        if (is_null($lastSuccess)) {
            throw new \InvalidArgumentException('non-nullable lastSuccess cannot be null');
        }
        $this->container['lastSuccess'] = $lastSuccess;

        return $this;
    }

    /**
     * Gets lastFailed
     *
     * @return \DateTime|null
     */
    public function getLastFailed()
    {
        return $this->container['lastFailed'];
    }

    /**
     * Sets lastFailed
     *
     * @param \DateTime|null $lastFailed Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setLastFailed($lastFailed)
    {
        if (is_null($lastFailed)) {
            throw new \InvalidArgumentException('non-nullable lastFailed cannot be null');
        }
        $this->container['lastFailed'] = $lastFailed;

        return $this;
    }

    /**
     * Gets firstFail
     *
     * @return \DateTime|null
     */
    public function getFirstFail()
    {
        return $this->container['firstFail'];
    }

    /**
     * Sets firstFail
     *
     * @param \DateTime|null $firstFail Date and time of first successful use of the card. In ISO-8601 extended offset date-time format.
     *
     * @return self
     */
    public function setFirstFail($firstFail)
    {
        if (is_null($firstFail)) {
            throw new \InvalidArgumentException('non-nullable firstFail cannot be null');
        }
        $this->container['firstFail'] = $firstFail;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string|null $errorCode An error code from the last failed use of the card. See [transaction errors](https://docs.frisbii.com/reference/transaction_errors).
     *
     * @return self
     */
    public function setErrorCode($errorCode)
    {
        if (is_null($errorCode)) {
            throw new \InvalidArgumentException('non-nullable errorCode cannot be null');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets errorState
     *
     * @return string|null
     */
    public function getErrorState()
    {
        return $this->container['errorState'];
    }

    /**
     * Sets errorState
     *
     * @param string|null $errorState Error state from last failed use of the card: `pending`, `soft_declined`, `hard_declined` or `processing_error`
     *
     * @return self
     */
    public function setErrorState($errorState)
    {
        if (is_null($errorState)) {
            throw new \InvalidArgumentException('non-nullable errorState cannot be null');
        }
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!in_array($errorState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'errorState', must be one of '%s'",
                    $errorState,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['errorState'] = $errorState;

        return $this;
    }

    /**
     * Gets strongAuthenticationStatus
     *
     * @return string|null
     */
    public function getStrongAuthenticationStatus()
    {
        return $this->container['strongAuthenticationStatus'];
    }

    /**
     * Sets strongAuthenticationStatus
     *
     * @param string|null $strongAuthenticationStatus Status for strong customer authentication: `threed_secure` - 3D Secure authenticated, `threed_secure_not_enrolled` - 3D Secure authentication not performed as card not enrolled, `secured_by_nets` - Secure by Nets authenticated
     *
     * @return self
     */
    public function setStrongAuthenticationStatus($strongAuthenticationStatus)
    {
        if (is_null($strongAuthenticationStatus)) {
            throw new \InvalidArgumentException('non-nullable strongAuthenticationStatus cannot be null');
        }
        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!in_array($strongAuthenticationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strongAuthenticationStatus', must be one of '%s'",
                    $strongAuthenticationStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strongAuthenticationStatus'] = $strongAuthenticationStatus;

        return $this;
    }

    /**
     * Gets threeDSecureStatus
     *
     * @return string|null
     */
    public function getThreeDSecureStatus()
    {
        return $this->container['threeDSecureStatus'];
    }

    /**
     * Sets threeDSecureStatus
     *
     * @param string|null $threeDSecureStatus If 3D Secure authenticated the 3D status will either be `Y` (fully authenticated) or `A` (attempted authenticated). An attempted authentication means that card issuer (e.g. bank) does not support 3D Secure so no full authentication has been performed. Attempted authentication normally means liability shift, but this can differ between acquirers.
     *
     * @return self
     */
    public function setThreeDSecureStatus($threeDSecureStatus)
    {
        if (is_null($threeDSecureStatus)) {
            throw new \InvalidArgumentException('non-nullable threeDSecureStatus cannot be null');
        }
        $this->container['threeDSecureStatus'] = $threeDSecureStatus;

        return $this;
    }

    /**
     * Gets riskRule
     *
     * @return string|null
     */
    public function getRiskRule()
    {
        return $this->container['riskRule'];
    }

    /**
     * Sets riskRule
     *
     * @param string|null $riskRule If this parameter is set the card has been flagged by Frisbii Risk Filter with a flag rule. Special attention may be required before using the card for recurring payments or subscription sign-up.
     *
     * @return self
     */
    public function setRiskRule($riskRule)
    {
        if (is_null($riskRule)) {
            throw new \InvalidArgumentException('non-nullable riskRule cannot be null');
        }
        $this->container['riskRule'] = $riskRule;

        return $this;
    }

    /**
     * Gets cardCountry
     *
     * @return string|null
     */
    public function getCardCountry()
    {
        return $this->container['cardCountry'];
    }

    /**
     * Sets cardCountry
     *
     * @param string|null $cardCountry Card issuing country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return self
     */
    public function setCardCountry($cardCountry)
    {
        if (is_null($cardCountry)) {
            throw new \InvalidArgumentException('non-nullable cardCountry cannot be null');
        }
        $this->container['cardCountry'] = $cardCountry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


