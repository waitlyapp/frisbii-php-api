<?php
/**
 * Credit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * Credit Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Credit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Credit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscription' => 'string',
        'handle' => 'string',
        'amount' => 'int',
        'text' => 'string',
        'state' => 'string',
        'created' => '\DateTime',
        'pendingAmount' => 'int',
        'validFrom' => 'string',
        'creditInvoices' => '\Frisbii\Model\CreditInvoice[]',
        'invoiceCreditNote' => '\Frisbii\Model\InvoiceCreditNote'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subscription' => null,
        'handle' => null,
        'amount' => 'int32',
        'text' => null,
        'state' => null,
        'created' => 'date-time',
        'pendingAmount' => 'int32',
        'validFrom' => null,
        'creditInvoices' => null,
        'invoiceCreditNote' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subscription' => false,
        'handle' => false,
        'amount' => false,
        'text' => false,
        'state' => false,
        'created' => false,
        'pendingAmount' => false,
        'validFrom' => false,
        'creditInvoices' => false,
        'invoiceCreditNote' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription' => 'subscription',
        'handle' => 'handle',
        'amount' => 'amount',
        'text' => 'text',
        'state' => 'state',
        'created' => 'created',
        'pendingAmount' => 'pending_amount',
        'validFrom' => 'valid_from',
        'creditInvoices' => 'credit_invoices',
        'invoiceCreditNote' => 'invoice_credit_note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription' => 'setSubscription',
        'handle' => 'setHandle',
        'amount' => 'setAmount',
        'text' => 'setText',
        'state' => 'setState',
        'created' => 'setCreated',
        'pendingAmount' => 'setPendingAmount',
        'validFrom' => 'setValidFrom',
        'creditInvoices' => 'setCreditInvoices',
        'invoiceCreditNote' => 'setInvoiceCreditNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription' => 'getSubscription',
        'handle' => 'getHandle',
        'amount' => 'getAmount',
        'text' => 'getText',
        'state' => 'getState',
        'created' => 'getCreated',
        'pendingAmount' => 'getPendingAmount',
        'validFrom' => 'getValidFrom',
        'creditInvoices' => 'getCreditInvoices',
        'invoiceCreditNote' => 'getInvoiceCreditNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_PENDING = 'pending';
    public const STATE_TRANSFERRED = 'transferred';
    public const STATE_CANCELLED = 'cancelled';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_TRANSFERRED,
            self::STATE_CANCELLED,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('pendingAmount', $data ?? [], null);
        $this->setIfExists('validFrom', $data ?? [], null);
        $this->setIfExists('creditInvoices', $data ?? [], null);
        $this->setIfExists('invoiceCreditNote', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscription'] === null) {
            $invalidProperties[] = "'subscription' can't be null";
        }
        if ((mb_strlen($this->container['subscription']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscription', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ((mb_strlen($this->container['handle']) < 1)) {
            $invalidProperties[] = "invalid value for 'handle', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ((mb_strlen($this->container['text']) < 1)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['pendingAmount'] === null) {
            $invalidProperties[] = "'pendingAmount' can't be null";
        }
        if (($this->container['pendingAmount'] < 0)) {
            $invalidProperties[] = "invalid value for 'pendingAmount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string $subscription Subscription by handle to add the credit to
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }

        if ((mb_strlen($subscription) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscription when calling Credit., must be bigger than or equal to 1.');
        }

        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return self
     */
    public function setHandle($handle)
    {
        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        if ((mb_strlen($handle) < 1)) {
            throw new \InvalidArgumentException('invalid length for $handle when calling Credit., must be bigger than or equal to 1.');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Credit amount in the smallest unit for the subscription currency
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Credit., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Text describing the credit. Will be on affected invoices.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }

        if ((mb_strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $text when calling Credit., must be bigger than or equal to 1.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the credit, one of the following: `pending`, `transferred`, `cancelled`. Pending credits have not yet been transferred fully to invoices. Cancelled credits have been manually cancelled.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Credit., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the credit was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets pendingAmount
     *
     * @return int
     */
    public function getPendingAmount()
    {
        return $this->container['pendingAmount'];
    }

    /**
     * Sets pendingAmount
     *
     * @param int $pendingAmount Remaining amount not transferred to invoices
     *
     * @return self
     */
    public function setPendingAmount($pendingAmount)
    {
        if (is_null($pendingAmount)) {
            throw new \InvalidArgumentException('non-nullable pendingAmount cannot be null');
        }

        if (($pendingAmount < 0)) {
            throw new \InvalidArgumentException('invalid value for $pendingAmount when calling Credit., must be bigger than or equal to 0.');
        }

        $this->container['pendingAmount'] = $pendingAmount;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return string|null
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param string|null $validFrom Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date.
     *
     * @return self
     */
    public function setValidFrom($validFrom)
    {
        if (is_null($validFrom)) {
            throw new \InvalidArgumentException('non-nullable validFrom cannot be null');
        }
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets creditInvoices
     *
     * @return \Frisbii\Model\CreditInvoice[]|null
     */
    public function getCreditInvoices()
    {
        return $this->container['creditInvoices'];
    }

    /**
     * Sets creditInvoices
     *
     * @param \Frisbii\Model\CreditInvoice[]|null $creditInvoices List of invoices where the credit is applied
     *
     * @return self
     */
    public function setCreditInvoices($creditInvoices)
    {
        if (is_null($creditInvoices)) {
            throw new \InvalidArgumentException('non-nullable creditInvoices cannot be null');
        }
        $this->container['creditInvoices'] = $creditInvoices;

        return $this;
    }

    /**
     * Gets invoiceCreditNote
     *
     * @return \Frisbii\Model\InvoiceCreditNote|null
     */
    public function getInvoiceCreditNote()
    {
        return $this->container['invoiceCreditNote'];
    }

    /**
     * Sets invoiceCreditNote
     *
     * @param \Frisbii\Model\InvoiceCreditNote|null $invoiceCreditNote invoiceCreditNote
     *
     * @return self
     */
    public function setInvoiceCreditNote($invoiceCreditNote)
    {
        if (is_null($invoiceCreditNote)) {
            throw new \InvalidArgumentException('non-nullable invoiceCreditNote cannot be null');
        }
        $this->container['invoiceCreditNote'] = $invoiceCreditNote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


