<?php
/**
 * ChangeSubscription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * ChangeSubscription Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChangeSubscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChangeSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timing' => 'string',
        'plan' => 'string',
        'amount' => 'int',
        'quantity' => 'int',
        'billing' => 'string',
        'amountInclVat' => 'bool',
        'compensationMethod' => 'string',
        'partialPeriodHandling' => 'string',
        'startDate' => 'string',
        'forceNewPeriod' => 'bool',
        'cancelChange' => 'bool',
        'addOns' => '\Frisbii\Model\CreateSubscriptionAddOn[]',
        'removeAddOns' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timing' => null,
        'plan' => null,
        'amount' => 'int32',
        'quantity' => 'int32',
        'billing' => null,
        'amountInclVat' => null,
        'compensationMethod' => null,
        'partialPeriodHandling' => null,
        'startDate' => null,
        'forceNewPeriod' => null,
        'cancelChange' => null,
        'addOns' => null,
        'removeAddOns' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timing' => false,
        'plan' => false,
        'amount' => false,
        'quantity' => false,
        'billing' => false,
        'amountInclVat' => false,
        'compensationMethod' => false,
        'partialPeriodHandling' => false,
        'startDate' => false,
        'forceNewPeriod' => false,
        'cancelChange' => false,
        'addOns' => false,
        'removeAddOns' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timing' => 'timing',
        'plan' => 'plan',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'billing' => 'billing',
        'amountInclVat' => 'amount_incl_vat',
        'compensationMethod' => 'compensation_method',
        'partialPeriodHandling' => 'partial_period_handling',
        'startDate' => 'start_date',
        'forceNewPeriod' => 'force_new_period',
        'cancelChange' => 'cancel_change',
        'addOns' => 'add_ons',
        'removeAddOns' => 'remove_add_ons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timing' => 'setTiming',
        'plan' => 'setPlan',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'billing' => 'setBilling',
        'amountInclVat' => 'setAmountInclVat',
        'compensationMethod' => 'setCompensationMethod',
        'partialPeriodHandling' => 'setPartialPeriodHandling',
        'startDate' => 'setStartDate',
        'forceNewPeriod' => 'setForceNewPeriod',
        'cancelChange' => 'setCancelChange',
        'addOns' => 'setAddOns',
        'removeAddOns' => 'setRemoveAddOns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timing' => 'getTiming',
        'plan' => 'getPlan',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'billing' => 'getBilling',
        'amountInclVat' => 'getAmountInclVat',
        'compensationMethod' => 'getCompensationMethod',
        'partialPeriodHandling' => 'getPartialPeriodHandling',
        'startDate' => 'getStartDate',
        'forceNewPeriod' => 'getForceNewPeriod',
        'cancelChange' => 'getCancelChange',
        'addOns' => 'getAddOns',
        'removeAddOns' => 'getRemoveAddOns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMING_IMMEDIATE = 'immediate';
    public const TIMING_RENEWAL = 'renewal';
    public const TIMING_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const BILLING_PRORATED = 'prorated';
    public const BILLING_FULL = 'full';
    public const BILLING_ZERO_AMOUNT = 'zero_amount';
    public const BILLING_NONE = 'none';
    public const BILLING_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const COMPENSATION_METHOD_FULL_REFUND = 'full_refund';
    public const COMPENSATION_METHOD_PRORATED_REFUND = 'prorated_refund';
    public const COMPENSATION_METHOD_FULL_CREDIT = 'full_credit';
    public const COMPENSATION_METHOD_PRORATED_CREDIT = 'prorated_credit';
    public const COMPENSATION_METHOD_NONE = 'none';
    public const COMPENSATION_METHOD_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const PARTIAL_PERIOD_HANDLING_BILL_FULL = 'bill_full';
    public const PARTIAL_PERIOD_HANDLING_BILL_PRORATED = 'bill_prorated';
    public const PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT = 'bill_zero_amount';
    public const PARTIAL_PERIOD_HANDLING_NO_BILL = 'no_bill';
    public const PARTIAL_PERIOD_HANDLING_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimingAllowableValues()
    {
        return [
            self::TIMING_IMMEDIATE,
            self::TIMING_RENEWAL,
            self::TIMING_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingAllowableValues()
    {
        return [
            self::BILLING_PRORATED,
            self::BILLING_FULL,
            self::BILLING_ZERO_AMOUNT,
            self::BILLING_NONE,
            self::BILLING_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompensationMethodAllowableValues()
    {
        return [
            self::COMPENSATION_METHOD_FULL_REFUND,
            self::COMPENSATION_METHOD_PRORATED_REFUND,
            self::COMPENSATION_METHOD_FULL_CREDIT,
            self::COMPENSATION_METHOD_PRORATED_CREDIT,
            self::COMPENSATION_METHOD_NONE,
            self::COMPENSATION_METHOD_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPeriodHandlingAllowableValues()
    {
        return [
            self::PARTIAL_PERIOD_HANDLING_BILL_FULL,
            self::PARTIAL_PERIOD_HANDLING_BILL_PRORATED,
            self::PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT,
            self::PARTIAL_PERIOD_HANDLING_NO_BILL,
            self::PARTIAL_PERIOD_HANDLING_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timing', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('amountInclVat', $data ?? [], null);
        $this->setIfExists('compensationMethod', $data ?? [], null);
        $this->setIfExists('partialPeriodHandling', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('forceNewPeriod', $data ?? [], null);
        $this->setIfExists('cancelChange', $data ?? [], null);
        $this->setIfExists('addOns', $data ?? [], null);
        $this->setIfExists('removeAddOns', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timing'] === null) {
            $invalidProperties[] = "'timing' can't be null";
        }
        $allowedValues = $this->getTimingAllowableValues();
        if (!is_null($this->container['timing']) && !in_array($this->container['timing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timing', must be one of '%s'",
                $this->container['timing'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBillingAllowableValues();
        if (!is_null($this->container['billing']) && !in_array($this->container['billing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing', must be one of '%s'",
                $this->container['billing'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompensationMethodAllowableValues();
        if (!is_null($this->container['compensationMethod']) && !in_array($this->container['compensationMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'compensationMethod', must be one of '%s'",
                $this->container['compensationMethod'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!is_null($this->container['partialPeriodHandling']) && !in_array($this->container['partialPeriodHandling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partialPeriodHandling', must be one of '%s'",
                $this->container['partialPeriodHandling'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['addOns']) && (count($this->container['addOns']) > 100)) {
            $invalidProperties[] = "invalid value for 'addOns', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['addOns']) && (count($this->container['addOns']) < 0)) {
            $invalidProperties[] = "invalid value for 'addOns', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timing
     *
     * @return string
     */
    public function getTiming()
    {
        return $this->container['timing'];
    }

    /**
     * Sets timing
     *
     * @param string $timing When to perform the subscription change. Either `immediate` or `renewal`.
     *
     * @return self
     */
    public function setTiming($timing)
    {
        if (is_null($timing)) {
            throw new \InvalidArgumentException('non-nullable timing cannot be null');
        }
        $allowedValues = $this->getTimingAllowableValues();
        if (!in_array($timing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timing', must be one of '%s'",
                    $timing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timing'] = $timing;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string|null $plan The handle of the plan to change to
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ChangeSubscription., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ChangeSubscription., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return string|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param string|null $billing In the case of immediate change and change not affecting billing period, how to bill for the remaining partial period. Either `prorated`, `full`, `zero_amount` or `none`. The default is `prorated`.
     *
     * @return self
     */
    public function setBilling($billing)
    {
        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }
        $allowedValues = $this->getBillingAllowableValues();
        if (!in_array($billing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing', must be one of '%s'",
                    $billing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets amountInclVat
     *
     * @return bool|null
     */
    public function getAmountInclVat()
    {
        return $this->container['amountInclVat'];
    }

    /**
     * Sets amountInclVat
     *
     * @param bool|null $amountInclVat Whether the optional amount is including VAT. Defaults to true.
     *
     * @return self
     */
    public function setAmountInclVat($amountInclVat)
    {
        if (is_null($amountInclVat)) {
            throw new \InvalidArgumentException('non-nullable amountInclVat cannot be null');
        }
        $this->container['amountInclVat'] = $amountInclVat;

        return $this;
    }

    /**
     * Gets compensationMethod
     *
     * @return string|null
     */
    public function getCompensationMethod()
    {
        return $this->container['compensationMethod'];
    }

    /**
     * Sets compensationMethod
     *
     * @param string|null $compensationMethod In the case of immediate change, optional method for compensation of partial period, either `full_refund`, `prorated_refund`, `full_credit`, `prorated_credit` or `none`. Default is `prorated_refund`
     *
     * @return self
     */
    public function setCompensationMethod($compensationMethod)
    {
        if (is_null($compensationMethod)) {
            throw new \InvalidArgumentException('non-nullable compensationMethod cannot be null');
        }
        $allowedValues = $this->getCompensationMethodAllowableValues();
        if (!in_array($compensationMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'compensationMethod', must be one of '%s'",
                    $compensationMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compensationMethod'] = $compensationMethod;

        return $this;
    }

    /**
     * Gets partialPeriodHandling
     *
     * @return string|null
     */
    public function getPartialPeriodHandling()
    {
        return $this->container['partialPeriodHandling'];
    }

    /**
     * Sets partialPeriodHandling
     *
     * @param string|null $partialPeriodHandling Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amount, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
     *
     * @return self
     */
    public function setPartialPeriodHandling($partialPeriodHandling)
    {
        if (is_null($partialPeriodHandling)) {
            throw new \InvalidArgumentException('non-nullable partialPeriodHandling cannot be null');
        }
        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!in_array($partialPeriodHandling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partialPeriodHandling', must be one of '%s'",
                    $partialPeriodHandling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partialPeriodHandling'] = $partialPeriodHandling;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string|null $startDate If the subscription change results in a new period due to change to a plan with different scheduling, or the use of argument `force_new_period`, an optional date and time from which the subscription is eligible to schedule first invoice can be given. See subscription create and subscription reactivate argument `start_date`. If the subscription has not yet started it's billing cycles, e.g. in trial or changing from a manual plan, `start_date` will default to now.
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        if (is_null($startDate)) {
            throw new \InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets forceNewPeriod
     *
     * @return bool|null
     */
    public function getForceNewPeriod()
    {
        return $this->container['forceNewPeriod'];
    }

    /**
     * Sets forceNewPeriod
     *
     * @param bool|null $forceNewPeriod If an immediate change should result in a new billing period starting now, or at the optional `start_date`. If the subscription is in trial the trial will be terminated. Default is false. If the subscription change results in a new period due to change to a plan with different scheduling, this option will have no effect as new period is required in this case.
     *
     * @return self
     */
    public function setForceNewPeriod($forceNewPeriod)
    {
        if (is_null($forceNewPeriod)) {
            throw new \InvalidArgumentException('non-nullable forceNewPeriod cannot be null');
        }
        $this->container['forceNewPeriod'] = $forceNewPeriod;

        return $this;
    }

    /**
     * Gets cancelChange
     *
     * @return bool|null
     */
    public function getCancelChange()
    {
        return $this->container['cancelChange'];
    }

    /**
     * Sets cancelChange
     *
     * @param bool|null $cancelChange If there are pending changes at renewal for the subscription they can be cancelled using this argument and timing=renewal
     *
     * @return self
     */
    public function setCancelChange($cancelChange)
    {
        if (is_null($cancelChange)) {
            throw new \InvalidArgumentException('non-nullable cancelChange cannot be null');
        }
        $this->container['cancelChange'] = $cancelChange;

        return $this;
    }

    /**
     * Gets addOns
     *
     * @return \Frisbii\Model\CreateSubscriptionAddOn[]|null
     */
    public function getAddOns()
    {
        return $this->container['addOns'];
    }

    /**
     * Sets addOns
     *
     * @param \Frisbii\Model\CreateSubscriptionAddOn[]|null $addOns Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on. A maximum of 100 add-ons is allowed.
     *
     * @return self
     */
    public function setAddOns($addOns)
    {
        if (is_null($addOns)) {
            throw new \InvalidArgumentException('non-nullable addOns cannot be null');
        }

        if ((count($addOns) > 100)) {
            throw new \InvalidArgumentException('invalid value for $addOns when calling ChangeSubscription., number of items must be less than or equal to 100.');
        }
        if ((count($addOns) < 0)) {
            throw new \InvalidArgumentException('invalid length for $addOns when calling ChangeSubscription., number of items must be greater than or equal to 0.');
        }
        $this->container['addOns'] = $addOns;

        return $this;
    }

    /**
     * Gets removeAddOns
     *
     * @return string[]|null
     */
    public function getRemoveAddOns()
    {
        return $this->container['removeAddOns'];
    }

    /**
     * Sets removeAddOns
     *
     * @param string[]|null $removeAddOns Subscription add-ons to remove from subscription by subscription add-on handle
     *
     * @return self
     */
    public function setRemoveAddOns($removeAddOns)
    {
        if (is_null($removeAddOns)) {
            throw new \InvalidArgumentException('non-nullable removeAddOns cannot be null');
        }
        $this->container['removeAddOns'] = $removeAddOns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


