<?php
/**
 * InvoiceSequenceConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API
 *
 * REST API to manage Frisbii resources
 *
 * The version of the OpenAPI document: 1
 * Contact: support@frisbii.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Frisbii\Model;

use \ArrayAccess;
use \Frisbii\ObjectSerializer;

/**
 * InvoiceSequenceConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Frisbii
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceSequenceConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceSequenceConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prefix' => 'string',
        'placeholder' => 'string',
        'delimiterAfterPrefix' => 'string',
        'delimiterAfterPlaceholder' => 'string',
        'digitsNumber' => 'int',
        'nextNumber' => 'int',
        'numberAfterReset' => 'int',
        'resetType' => 'string',
        'creditNoteSettings' => '\Frisbii\Model\CreditNoteSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prefix' => null,
        'placeholder' => null,
        'delimiterAfterPrefix' => null,
        'delimiterAfterPlaceholder' => null,
        'digitsNumber' => 'int32',
        'nextNumber' => 'int32',
        'numberAfterReset' => 'int32',
        'resetType' => null,
        'creditNoteSettings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'prefix' => false,
        'placeholder' => false,
        'delimiterAfterPrefix' => false,
        'delimiterAfterPlaceholder' => false,
        'digitsNumber' => false,
        'nextNumber' => false,
        'numberAfterReset' => false,
        'resetType' => false,
        'creditNoteSettings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prefix' => 'prefix',
        'placeholder' => 'placeholder',
        'delimiterAfterPrefix' => 'delimiter_after_prefix',
        'delimiterAfterPlaceholder' => 'delimiter_after_placeholder',
        'digitsNumber' => 'digits_number',
        'nextNumber' => 'next_number',
        'numberAfterReset' => 'number_after_reset',
        'resetType' => 'reset_type',
        'creditNoteSettings' => 'credit_note_settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prefix' => 'setPrefix',
        'placeholder' => 'setPlaceholder',
        'delimiterAfterPrefix' => 'setDelimiterAfterPrefix',
        'delimiterAfterPlaceholder' => 'setDelimiterAfterPlaceholder',
        'digitsNumber' => 'setDigitsNumber',
        'nextNumber' => 'setNextNumber',
        'numberAfterReset' => 'setNumberAfterReset',
        'resetType' => 'setResetType',
        'creditNoteSettings' => 'setCreditNoteSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prefix' => 'getPrefix',
        'placeholder' => 'getPlaceholder',
        'delimiterAfterPrefix' => 'getDelimiterAfterPrefix',
        'delimiterAfterPlaceholder' => 'getDelimiterAfterPlaceholder',
        'digitsNumber' => 'getDigitsNumber',
        'nextNumber' => 'getNextNumber',
        'numberAfterReset' => 'getNumberAfterReset',
        'resetType' => 'getResetType',
        'creditNoteSettings' => 'getCreditNoteSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('placeholder', $data ?? [], null);
        $this->setIfExists('delimiterAfterPrefix', $data ?? [], null);
        $this->setIfExists('delimiterAfterPlaceholder', $data ?? [], null);
        $this->setIfExists('digitsNumber', $data ?? [], null);
        $this->setIfExists('nextNumber', $data ?? [], null);
        $this->setIfExists('numberAfterReset', $data ?? [], null);
        $this->setIfExists('resetType', $data ?? [], null);
        $this->setIfExists('creditNoteSettings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Prefix of invoice number
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string|null $placeholder Placeholder depicting the invoice reset type interval
     *
     * @return self
     */
    public function setPlaceholder($placeholder)
    {
        if (is_null($placeholder)) {
            throw new \InvalidArgumentException('non-nullable placeholder cannot be null');
        }
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets delimiterAfterPrefix
     *
     * @return string|null
     */
    public function getDelimiterAfterPrefix()
    {
        return $this->container['delimiterAfterPrefix'];
    }

    /**
     * Sets delimiterAfterPrefix
     *
     * @param string|null $delimiterAfterPrefix Delimiter between prefix and placeholder
     *
     * @return self
     */
    public function setDelimiterAfterPrefix($delimiterAfterPrefix)
    {
        if (is_null($delimiterAfterPrefix)) {
            throw new \InvalidArgumentException('non-nullable delimiterAfterPrefix cannot be null');
        }
        $this->container['delimiterAfterPrefix'] = $delimiterAfterPrefix;

        return $this;
    }

    /**
     * Gets delimiterAfterPlaceholder
     *
     * @return string|null
     */
    public function getDelimiterAfterPlaceholder()
    {
        return $this->container['delimiterAfterPlaceholder'];
    }

    /**
     * Sets delimiterAfterPlaceholder
     *
     * @param string|null $delimiterAfterPlaceholder Delimiter between placeholder and number
     *
     * @return self
     */
    public function setDelimiterAfterPlaceholder($delimiterAfterPlaceholder)
    {
        if (is_null($delimiterAfterPlaceholder)) {
            throw new \InvalidArgumentException('non-nullable delimiterAfterPlaceholder cannot be null');
        }
        $this->container['delimiterAfterPlaceholder'] = $delimiterAfterPlaceholder;

        return $this;
    }

    /**
     * Gets digitsNumber
     *
     * @return int|null
     */
    public function getDigitsNumber()
    {
        return $this->container['digitsNumber'];
    }

    /**
     * Sets digitsNumber
     *
     * @param int|null $digitsNumber Number of digits in invoice numbers. If the invoice number contains less digits, the required count of trailing zeros will be added
     *
     * @return self
     */
    public function setDigitsNumber($digitsNumber)
    {
        if (is_null($digitsNumber)) {
            throw new \InvalidArgumentException('non-nullable digitsNumber cannot be null');
        }
        $this->container['digitsNumber'] = $digitsNumber;

        return $this;
    }

    /**
     * Gets nextNumber
     *
     * @return int|null
     */
    public function getNextNumber()
    {
        return $this->container['nextNumber'];
    }

    /**
     * Sets nextNumber
     *
     * @param int|null $nextNumber The sequential number of first invoice that will be generated in current period
     *
     * @return self
     */
    public function setNextNumber($nextNumber)
    {
        if (is_null($nextNumber)) {
            throw new \InvalidArgumentException('non-nullable nextNumber cannot be null');
        }
        $this->container['nextNumber'] = $nextNumber;

        return $this;
    }

    /**
     * Gets numberAfterReset
     *
     * @return int|null
     */
    public function getNumberAfterReset()
    {
        return $this->container['numberAfterReset'];
    }

    /**
     * Sets numberAfterReset
     *
     * @param int|null $numberAfterReset The sequential number of first invoice that will be generated in all subsequent periods
     *
     * @return self
     */
    public function setNumberAfterReset($numberAfterReset)
    {
        if (is_null($numberAfterReset)) {
            throw new \InvalidArgumentException('non-nullable numberAfterReset cannot be null');
        }
        $this->container['numberAfterReset'] = $numberAfterReset;

        return $this;
    }

    /**
     * Gets resetType
     *
     * @return string|null
     */
    public function getResetType()
    {
        return $this->container['resetType'];
    }

    /**
     * Sets resetType
     *
     * @param string|null $resetType The frequency of resetting invoice numbers
     *
     * @return self
     */
    public function setResetType($resetType)
    {
        if (is_null($resetType)) {
            throw new \InvalidArgumentException('non-nullable resetType cannot be null');
        }
        $this->container['resetType'] = $resetType;

        return $this;
    }

    /**
     * Gets creditNoteSettings
     *
     * @return \Frisbii\Model\CreditNoteSettings|null
     */
    public function getCreditNoteSettings()
    {
        return $this->container['creditNoteSettings'];
    }

    /**
     * Sets creditNoteSettings
     *
     * @param \Frisbii\Model\CreditNoteSettings|null $creditNoteSettings creditNoteSettings
     *
     * @return self
     */
    public function setCreditNoteSettings($creditNoteSettings)
    {
        if (is_null($creditNoteSettings)) {
            throw new \InvalidArgumentException('non-nullable creditNoteSettings cannot be null');
        }
        $this->container['creditNoteSettings'] = $creditNoteSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


